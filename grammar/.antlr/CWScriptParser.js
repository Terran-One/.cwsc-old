// Generated from /Users/william/t1/cwsc/grammar/CWScriptParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var grammarFileName = "CWScriptParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003R\u03d3\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0003\u0002\u0005\u0002\u00b0\n\u0002\u0003\u0002\u0007",
    "\u0002\u00b3\n\u0002\f\u0002\u000e\u0002\u00b6\u000b\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00bd\n",
    "\u0003\u0003\u0004\u0005\u0004\u00c0\n\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u00c6\n\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u00ca\n\u0004\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u00d1\n\u0005\f\u0005\u000e\u0005",
    "\u00d4\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u00db\n\u0006\u0003\u0007\u0005\u0007\u00de\n\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u00e6\n\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00ea",
    "\n\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u00f6\n\b\u0003\b\u0003\b\u0003\b",
    "\u0005\b\u00fb\n\b\u0003\b\u0003\b\u0003\b\u0005\b\u0100\n\b\u0003\t",
    "\u0003\t\u0003\t\u0007\t\u0105\n\t\f\t\u000e\t\u0108\u000b\t\u0003\n",
    "\u0003\n\u0003\n\u0005\n\u010d\n\n\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u0111\n\u000b\f\u000b\u000e\u000b\u0114\u000b\u000b\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0007\f\u011a\n\f\f\f\u000e\f\u011d\u000b\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u012e\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u013d\n\u000e\u0003\u000f\u0005\u000f\u0140\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010\u0148\n\u0010\f\u0010\u000e\u0010\u014b\u000b\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0005\u0011\u0150\n\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0005\u0012\u0155\n\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u015d\n",
    "\u0013\f\u0013\u000e\u0013\u0160\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0005\u0014\u0165\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0005\u0015\u016a\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u016f\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0173",
    "\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u0178\n\u0016",
    "\f\u0016\u000e\u0016\u017b\u000b\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0005\u0017\u0180\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0184\n\u0017\u0003\u0017\u0005\u0017\u0187\n\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0006\u001a\u0193\n\u001a\r\u001a\u000e",
    "\u001a\u0194\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u019b\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0005",
    "\u001c\u01a1\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u01a6\n\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0005\u001d\u01ab",
    "\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u01b0\n\u001d",
    "\u0003\u001e\u0005\u001e\u01b3\n\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u01bb\n\u001f",
    "\f\u001f\u000e\u001f\u01be\u000b\u001f\u0003\u001f\u0003\u001f\u0003",
    " \u0005 \u01c3\n \u0003 \u0003 \u0003!\u0005!\u01c8\n!\u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003\"\u0007\"\u01d0\n\"\f\"\u000e\"\u01d3",
    "\u000b\"\u0003\"\u0003\"\u0003#\u0005#\u01d8\n#\u0003#\u0003#\u0003",
    "$\u0005$\u01dd\n$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0007%\u01e5",
    "\n%\f%\u000e%\u01e8\u000b%\u0003%\u0003%\u0003&\u0005&\u01ed\n&\u0003",
    "&\u0003&\u0003\'\u0005\'\u01f2\n\'\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0007(\u01fa\n(\f(\u000e(\u01fd\u000b(\u0003(\u0003(\u0003",
    ")\u0005)\u0202\n)\u0003)\u0003)\u0003*\u0005*\u0207\n*\u0003*\u0003",
    "*\u0003*\u0005*\u020c\n*\u0003*\u0003*\u0003+\u0005+\u0211\n+\u0003",
    "+\u0003+\u0003+\u0005+\u0216\n+\u0003,\u0003,\u0003,\u0005,\u021b\n",
    ",\u0003-\u0003-\u0003-\u0005-\u0220\n-\u0003.\u0003.\u0003.\u0003/\u0003",
    "/\u00030\u00030\u00030\u00030\u00070\u022b\n0\f0\u000e0\u022e\u000b",
    "0\u00030\u00030\u00031\u00031\u00031\u00031\u00071\u0236\n1\f1\u000e",
    "1\u0239\u000b1\u00051\u023b\n1\u00031\u00031\u00032\u00032\u00032\u0003",
    "2\u00072\u0243\n2\f2\u000e2\u0246\u000b2\u00032\u00052\u0249\n2\u0005",
    "2\u024b\n2\u00032\u00032\u00033\u00053\u0250\n3\u00033\u00033\u0005",
    "3\u0254\n3\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00074\u025f\n4\f4\u000e4\u0262\u000b4\u00034\u00034\u00034\u0003",
    "4\u00034\u00054\u0269\n4\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00074\u0275\n4\f4\u000e4\u0278\u000b4\u0003",
    "5\u00035\u00035\u00035\u00075\u027e\n5\f5\u000e5\u0281\u000b5\u0003",
    "5\u00035\u00036\u00036\u00036\u00076\u0288\n6\f6\u000e6\u028b\u000b",
    "6\u00037\u00057\u028e\n7\u00037\u00037\u00038\u00038\u00038\u00058\u0295",
    "\n8\u00039\u00059\u0298\n9\u00039\u00039\u00039\u0003:\u0005:\u029e",
    "\n:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0005;\u02a8",
    "\n;\u0003;\u0007;\u02ab\n;\f;\u000e;\u02ae\u000b;\u0003;\u0005;\u02b1",
    "\n;\u0005;\u02b3\n;\u0003<\u0005<\u02b6\n<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003=\u0003=\u0003=\u0005=\u02c0\n=\u0003>\u0003>\u0003>\u0005",
    ">\u02c5\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003@\u0003@\u0005@\u02ce",
    "\n@\u0003@\u0003@\u0003A\u0003A\u0003A\u0007A\u02d5\nA\fA\u000eA\u02d8",
    "\u000bA\u0003B\u0003B\u0005B\u02dc\nB\u0003B\u0003B\u0003B\u0003C\u0003",
    "C\u0007C\u02e3\nC\fC\u000eC\u02e6\u000bC\u0003C\u0003C\u0003C\u0005",
    "C\u02eb\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u02fd\nD\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0005F\u0307\nF\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u0314\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u031e\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u032b\nG\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u034d\nG\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u0353\nG\u0003G\u0007G\u0356\nG\fG\u000e",
    "G\u0359\u000bG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0005H\u036d\nH\u0003I\u0003I\u0003I\u0005I\u0372\nI\u0003I\u0003",
    "I\u0003J\u0003J\u0003J\u0007J\u0379\nJ\fJ\u000eJ\u037c\u000bJ\u0003",
    "J\u0005J\u037f\nJ\u0003K\u0003K\u0003K\u0003K\u0003L\u0003L\u0005L\u0387",
    "\nL\u0003L\u0005L\u038a\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0005M\u0394\nM\u0003N\u0003N\u0006N\u0398\nN\rN\u000e",
    "N\u0399\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u03aa\nP\u0003Q\u0003Q\u0003",
    "Q\u0007Q\u03af\nQ\fQ\u000eQ\u03b2\u000bQ\u0003R\u0003R\u0003R\u0007",
    "R\u03b7\nR\fR\u000eR\u03ba\u000bR\u0003S\u0003S\u0003S\u0007S\u03bf",
    "\nS\fS\u000eS\u03c2\u000bS\u0003T\u0003T\u0003T\u0003T\u0003U\u0003",
    "U\u0005U\u03ca\nU\u0003V\u0006V\u03cd\nV\rV\u000eV\u03ce\u0003W\u0003",
    "W\u0003W\u0002\u0004f\u008cX\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u0002\n\b\u000288<<>>@@BBDD\u0005\u0002--;;==\u0005",
    "\u0002??AACC\u0004\u0002;;==\u0003\u0002EH\u0003\u00029:\u0003\u0002",
    "NO\u0005\u0002\u0003\u0006\n\u001c\u001e\"\u0002\u0424\u0002\u00af\u0003",
    "\u0002\u0002\u0002\u0004\u00bc\u0003\u0002\u0002\u0002\u0006\u00bf\u0003",
    "\u0002\u0002\u0002\b\u00cd\u0003\u0002\u0002\u0002\n\u00d5\u0003\u0002",
    "\u0002\u0002\f\u00dd\u0003\u0002\u0002\u0002\u000e\u00ff\u0003\u0002",
    "\u0002\u0002\u0010\u0101\u0003\u0002\u0002\u0002\u0012\u0109\u0003\u0002",
    "\u0002\u0002\u0014\u010e\u0003\u0002\u0002\u0002\u0016\u0117\u0003\u0002",
    "\u0002\u0002\u0018\u012d\u0003\u0002\u0002\u0002\u001a\u013c\u0003\u0002",
    "\u0002\u0002\u001c\u013f\u0003\u0002\u0002\u0002\u001e\u0144\u0003\u0002",
    "\u0002\u0002 \u014f\u0003\u0002\u0002\u0002\"\u0154\u0003\u0002\u0002",
    "\u0002$\u0159\u0003\u0002\u0002\u0002&\u0164\u0003\u0002\u0002\u0002",
    "(\u0172\u0003\u0002\u0002\u0002*\u0174\u0003\u0002\u0002\u0002,\u0186",
    "\u0003\u0002\u0002\u0002.\u0188\u0003\u0002\u0002\u00020\u018c\u0003",
    "\u0002\u0002\u00022\u0192\u0003\u0002\u0002\u00024\u0196\u0003\u0002",
    "\u0002\u00026\u01a0\u0003\u0002\u0002\u00028\u01aa\u0003\u0002\u0002",
    "\u0002:\u01b2\u0003\u0002\u0002\u0002<\u01b7\u0003\u0002\u0002\u0002",
    ">\u01c2\u0003\u0002\u0002\u0002@\u01c7\u0003\u0002\u0002\u0002B\u01cc",
    "\u0003\u0002\u0002\u0002D\u01d7\u0003\u0002\u0002\u0002F\u01dc\u0003",
    "\u0002\u0002\u0002H\u01e1\u0003\u0002\u0002\u0002J\u01ec\u0003\u0002",
    "\u0002\u0002L\u01f1\u0003\u0002\u0002\u0002N\u01f6\u0003\u0002\u0002",
    "\u0002P\u0201\u0003\u0002\u0002\u0002R\u0206\u0003\u0002\u0002\u0002",
    "T\u0210\u0003\u0002\u0002\u0002V\u021a\u0003\u0002\u0002\u0002X\u021c",
    "\u0003\u0002\u0002\u0002Z\u0221\u0003\u0002\u0002\u0002\\\u0224\u0003",
    "\u0002\u0002\u0002^\u0226\u0003\u0002\u0002\u0002`\u0231\u0003\u0002",
    "\u0002\u0002b\u023e\u0003\u0002\u0002\u0002d\u024f\u0003\u0002\u0002",
    "\u0002f\u0268\u0003\u0002\u0002\u0002h\u0279\u0003\u0002\u0002\u0002",
    "j\u0284\u0003\u0002\u0002\u0002l\u028d\u0003\u0002\u0002\u0002n\u0294",
    "\u0003\u0002\u0002\u0002p\u0297\u0003\u0002\u0002\u0002r\u029d\u0003",
    "\u0002\u0002\u0002t\u02b2\u0003\u0002\u0002\u0002v\u02b5\u0003\u0002",
    "\u0002\u0002x\u02bc\u0003\u0002\u0002\u0002z\u02c1\u0003\u0002\u0002",
    "\u0002|\u02c8\u0003\u0002\u0002\u0002~\u02cb\u0003\u0002\u0002\u0002",
    "\u0080\u02d1\u0003\u0002\u0002\u0002\u0082\u02d9\u0003\u0002\u0002\u0002",
    "\u0084\u02ea\u0003\u0002\u0002\u0002\u0086\u02fc\u0003\u0002\u0002\u0002",
    "\u0088\u02fe\u0003\u0002\u0002\u0002\u008a\u031d\u0003\u0002\u0002\u0002",
    "\u008c\u032a\u0003\u0002\u0002\u0002\u008e\u036c\u0003\u0002\u0002\u0002",
    "\u0090\u036e\u0003\u0002\u0002\u0002\u0092\u0375\u0003\u0002\u0002\u0002",
    "\u0094\u0380\u0003\u0002\u0002\u0002\u0096\u0384\u0003\u0002\u0002\u0002",
    "\u0098\u0393\u0003\u0002\u0002\u0002\u009a\u0397\u0003\u0002\u0002\u0002",
    "\u009c\u039b\u0003\u0002\u0002\u0002\u009e\u03a9\u0003\u0002\u0002\u0002",
    "\u00a0\u03ab\u0003\u0002\u0002\u0002\u00a2\u03b3\u0003\u0002\u0002\u0002",
    "\u00a4\u03bb\u0003\u0002\u0002\u0002\u00a6\u03c3\u0003\u0002\u0002\u0002",
    "\u00a8\u03c9\u0003\u0002\u0002\u0002\u00aa\u03cc\u0003\u0002\u0002\u0002",
    "\u00ac\u03d0\u0003\u0002\u0002\u0002\u00ae\u00b0\u0005\u00aaV\u0002",
    "\u00af\u00ae\u0003\u0002\u0002\u0002\u00af\u00b0\u0003\u0002\u0002\u0002",
    "\u00b0\u00b4\u0003\u0002\u0002\u0002\u00b1\u00b3\u0005\u0004\u0003\u0002",
    "\u00b2\u00b1\u0003\u0002\u0002\u0002\u00b3\u00b6\u0003\u0002\u0002\u0002",
    "\u00b4\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002",
    "\u00b5\u00b7\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002",
    "\u00b7\u00b8\u0007\u0002\u0002\u0003\u00b8\u0003\u0003\u0002\u0002\u0002",
    "\u00b9\u00bd\u0005\u0006\u0004\u0002\u00ba\u00bd\u0005\f\u0007\u0002",
    "\u00bb\u00bd\u0005\u000e\b\u0002\u00bc\u00b9\u0003\u0002\u0002\u0002",
    "\u00bc\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bb\u0003\u0002\u0002\u0002",
    "\u00bd\u0005\u0003\u0002\u0002\u0002\u00be\u00c0\u0005\u00aaV\u0002",
    "\u00bf\u00be\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002",
    "\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007\u0003\u0002\u0002",
    "\u00c2\u00c5\u0005\u00a8U\u0002\u00c3\u00c4\u0007\n\u0002\u0002\u00c4",
    "\u00c6\u0005\u00a0Q\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5",
    "\u00c6\u0003\u0002\u0002\u0002\u00c6\u00c9\u0003\u0002\u0002\u0002\u00c7",
    "\u00c8\u0007\u0006\u0002\u0002\u00c8\u00ca\u0005\b\u0005\u0002\u00c9",
    "\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca",
    "\u00cb\u0003\u0002\u0002\u0002\u00cb\u00cc\u0005\u0014\u000b\u0002\u00cc",
    "\u0007\u0003\u0002\u0002\u0002\u00cd\u00d2\u0005\n\u0006\u0002\u00ce",
    "\u00cf\u0007+\u0002\u0002\u00cf\u00d1\u0005\n\u0006\u0002\u00d0\u00ce",
    "\u0003\u0002\u0002\u0002\u00d1\u00d4\u0003\u0002\u0002\u0002\u00d2\u00d0",
    "\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\t",
    "\u0003\u0002\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d5\u00da",
    "\u0005\u00a8U\u0002\u00d6\u00d7\u0007&\u0002\u0002\u00d7\u00d8\u0005",
    "\u00a0Q\u0002\u00d8\u00d9\u0007\'\u0002\u0002\u00d9\u00db\u0003\u0002",
    "\u0002\u0002\u00da\u00d6\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002",
    "\u0002\u0002\u00db\u000b\u0003\u0002\u0002\u0002\u00dc\u00de\u0005\u00aa",
    "V\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00dd\u00de\u0003\u0002",
    "\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e0\u0007\u0004",
    "\u0002\u0002\u00e0\u00e5\u0005\u00a8U\u0002\u00e1\u00e2\u0007&\u0002",
    "\u0002\u00e2\u00e3\u0005\u00a8U\u0002\u00e3\u00e4\u0007\'\u0002\u0002",
    "\u00e4\u00e6\u0003\u0002\u0002\u0002\u00e5\u00e1\u0003\u0002\u0002\u0002",
    "\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e9\u0003\u0002\u0002\u0002",
    "\u00e7\u00e8\u0007\n\u0002\u0002\u00e8\u00ea\u0005\b\u0005\u0002\u00e9",
    "\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea",
    "\u00eb\u0003\u0002\u0002\u0002\u00eb\u00ec\u0005\u0016\f\u0002\u00ec",
    "\r\u0003\u0002\u0002\u0002\u00ed\u00ee\u0007\u0005\u0002\u0002\u00ee",
    "\u00ef\u0007?\u0002\u0002\u00ef\u00f0\u0007\u0013\u0002\u0002\u00f0",
    "\u0100\u0007K\u0002\u0002\u00f1\u00fa\u0007\u0005\u0002\u0002\u00f2",
    "\u00f3\u0007$\u0002\u0002\u00f3\u00f5\u0005\u0010\t\u0002\u00f4\u00f6",
    "\u0007+\u0002\u0002\u00f5\u00f4\u0003\u0002\u0002\u0002\u00f5\u00f6",
    "\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8",
    "\u0007%\u0002\u0002\u00f8\u00fb\u0003\u0002\u0002\u0002\u00f9\u00fb",
    "\u0005\u0010\t\u0002\u00fa\u00f2\u0003\u0002\u0002\u0002\u00fa\u00f9",
    "\u0003\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fd",
    "\u0007\u0013\u0002\u0002\u00fd\u00fe\u0007K\u0002\u0002\u00fe\u0100",
    "\u0003\u0002\u0002\u0002\u00ff\u00ed\u0003\u0002\u0002\u0002\u00ff\u00f1",
    "\u0003\u0002\u0002\u0002\u0100\u000f\u0003\u0002\u0002\u0002\u0101\u0106",
    "\u0005\u0012\n\u0002\u0102\u0103\u0007+\u0002\u0002\u0103\u0105\u0005",
    "\u0012\n\u0002\u0104\u0102\u0003\u0002\u0002\u0002\u0105\u0108\u0003",
    "\u0002\u0002\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0106\u0107\u0003",
    "\u0002\u0002\u0002\u0107\u0011\u0003\u0002\u0002\u0002\u0108\u0106\u0003",
    "\u0002\u0002\u0002\u0109\u010c\u0005\u00a8U\u0002\u010a\u010b\u0007",
    "#\u0002\u0002\u010b\u010d\u0005\u00a8U\u0002\u010c\u010a\u0003\u0002",
    "\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u0013\u0003\u0002",
    "\u0002\u0002\u010e\u0112\u0007(\u0002\u0002\u010f\u0111\u0005\u0018",
    "\r\u0002\u0110\u010f\u0003\u0002\u0002\u0002\u0111\u0114\u0003\u0002",
    "\u0002\u0002\u0112\u0110\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002",
    "\u0002\u0002\u0113\u0115\u0003\u0002\u0002\u0002\u0114\u0112\u0003\u0002",
    "\u0002\u0002\u0115\u0116\u0007)\u0002\u0002\u0116\u0015\u0003\u0002",
    "\u0002\u0002\u0117\u011b\u0007(\u0002\u0002\u0118\u011a\u0005\u001a",
    "\u000e\u0002\u0119\u0118\u0003\u0002\u0002\u0002\u011a\u011d\u0003\u0002",
    "\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011b\u011c\u0003\u0002",
    "\u0002\u0002\u011c\u011e\u0003\u0002\u0002\u0002\u011d\u011b\u0003\u0002",
    "\u0002\u0002\u011e\u011f\u0007)\u0002\u0002\u011f\u0017\u0003\u0002",
    "\u0002\u0002\u0120\u012e\u0005n8\u0002\u0121\u012e\u0005\u001c\u000f",
    "\u0002\u0122\u012e\u0005\u001e\u0010\u0002\u0123\u012e\u0005\"\u0012",
    "\u0002\u0124\u012e\u0005$\u0013\u0002\u0125\u012e\u0005(\u0015\u0002",
    "\u0126\u012e\u0005*\u0016\u0002\u0127\u012e\u00056\u001c\u0002\u0128",
    "\u012e\u0005:\u001e\u0002\u0129\u012e\u0005<\u001f\u0002\u012a\u012e",
    "\u0005F$\u0002\u012b\u012e\u0005H%\u0002\u012c\u012e\u0005R*\u0002\u012d",
    "\u0120\u0003\u0002\u0002\u0002\u012d\u0121\u0003\u0002\u0002\u0002\u012d",
    "\u0122\u0003\u0002\u0002\u0002\u012d\u0123\u0003\u0002\u0002\u0002\u012d",
    "\u0124\u0003\u0002\u0002\u0002\u012d\u0125\u0003\u0002\u0002\u0002\u012d",
    "\u0126\u0003\u0002\u0002\u0002\u012d\u0127\u0003\u0002\u0002\u0002\u012d",
    "\u0128\u0003\u0002\u0002\u0002\u012d\u0129\u0003\u0002\u0002\u0002\u012d",
    "\u012a\u0003\u0002\u0002\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d",
    "\u012c\u0003\u0002\u0002\u0002\u012e\u0019\u0003\u0002\u0002\u0002\u012f",
    "\u013d\u0005n8\u0002\u0130\u013d\u0005\u001c\u000f\u0002\u0131\u013d",
    "\u0005\u001e\u0010\u0002\u0132\u013d\u0005\"\u0012\u0002\u0133\u013d",
    "\u0005$\u0013\u0002\u0134\u013d\u0005(\u0015\u0002\u0135\u013d\u0005",
    "*\u0016\u0002\u0136\u013d\u00058\u001d\u0002\u0137\u013d\u0005@!\u0002",
    "\u0138\u013d\u0005B\"\u0002\u0139\u013d\u0005L\'\u0002\u013a\u013d\u0005",
    "N(\u0002\u013b\u013d\u0005T+\u0002\u013c\u012f\u0003\u0002\u0002\u0002",
    "\u013c\u0130\u0003\u0002\u0002\u0002\u013c\u0131\u0003\u0002\u0002\u0002",
    "\u013c\u0132\u0003\u0002\u0002\u0002\u013c\u0133\u0003\u0002\u0002\u0002",
    "\u013c\u0134\u0003\u0002\u0002\u0002\u013c\u0135\u0003\u0002\u0002\u0002",
    "\u013c\u0136\u0003\u0002\u0002\u0002\u013c\u0137\u0003\u0002\u0002\u0002",
    "\u013c\u0138\u0003\u0002\u0002\u0002\u013c\u0139\u0003\u0002\u0002\u0002",
    "\u013c\u013a\u0003\u0002\u0002\u0002\u013c\u013b\u0003\u0002\u0002\u0002",
    "\u013d\u001b\u0003\u0002\u0002\u0002\u013e\u0140\u0005\u00aaV\u0002",
    "\u013f\u013e\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002\u0002",
    "\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0142\u0007\u000b\u0002\u0002",
    "\u0142\u0143\u0005V,\u0002\u0143\u001d\u0003\u0002\u0002\u0002\u0144",
    "\u0145\u0007\u000b\u0002\u0002\u0145\u0149\u0007(\u0002\u0002\u0146",
    "\u0148\u0005 \u0011\u0002\u0147\u0146\u0003\u0002\u0002\u0002\u0148",
    "\u014b\u0003\u0002\u0002\u0002\u0149\u0147\u0003\u0002\u0002\u0002\u0149",
    "\u014a\u0003\u0002\u0002\u0002\u014a\u014c\u0003\u0002\u0002\u0002\u014b",
    "\u0149\u0003\u0002\u0002\u0002\u014c\u014d\u0007)\u0002\u0002\u014d",
    "\u001f\u0003\u0002\u0002\u0002\u014e\u0150\u0005\u00aaV\u0002\u014f",
    "\u014e\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u0152\u0005V,\u0002\u0152!\u0003",
    "\u0002\u0002\u0002\u0153\u0155\u0005\u00aaV\u0002\u0154\u0153\u0003",
    "\u0002\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0156\u0003",
    "\u0002\u0002\u0002\u0156\u0157\u0007\f\u0002\u0002\u0157\u0158\u0005",
    "V,\u0002\u0158#\u0003\u0002\u0002\u0002\u0159\u015a\u0007\f\u0002\u0002",
    "\u015a\u015e\u0007(\u0002\u0002\u015b\u015d\u0005&\u0014\u0002\u015c",
    "\u015b\u0003\u0002\u0002\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e",
    "\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f",
    "\u0161\u0003\u0002\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161",
    "\u0162\u0007)\u0002\u0002\u0162%\u0003\u0002\u0002\u0002\u0163\u0165",
    "\u0005\u00aaV\u0002\u0164\u0163\u0003\u0002\u0002\u0002\u0164\u0165",
    "\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167",
    "\u0005V,\u0002\u0167\'\u0003\u0002\u0002\u0002\u0168\u016a\u0005\u00aa",
    "V\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u0169\u016a\u0003\u0002",
    "\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u016c\u0007\u0014",
    "\u0002\u0002\u016c\u0173\u0005.\u0018\u0002\u016d\u016f\u0005\u00aa",
    "V\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002",
    "\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0171\u0007\u0014",
    "\u0002\u0002\u0171\u0173\u00050\u0019\u0002\u0172\u0169\u0003\u0002",
    "\u0002\u0002\u0172\u016e\u0003\u0002\u0002\u0002\u0173)\u0003\u0002",
    "\u0002\u0002\u0174\u0175\u0007\u0014\u0002\u0002\u0175\u0179\u0007(",
    "\u0002\u0002\u0176\u0178\u0005,\u0017\u0002\u0177\u0176\u0003\u0002",
    "\u0002\u0002\u0178\u017b\u0003\u0002\u0002\u0002\u0179\u0177\u0003\u0002",
    "\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a\u017c\u0003\u0002",
    "\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017c\u017d\u0007)",
    "\u0002\u0002\u017d+\u0003\u0002\u0002\u0002\u017e\u0180\u0005\u00aa",
    "V\u0002\u017f\u017e\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002",
    "\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0187\u0005.",
    "\u0018\u0002\u0182\u0184\u0005\u00aaV\u0002\u0183\u0182\u0003\u0002",
    "\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002",
    "\u0002\u0002\u0185\u0187\u00050\u0019\u0002\u0186\u017f\u0003\u0002",
    "\u0002\u0002\u0186\u0183\u0003\u0002\u0002\u0002\u0187-\u0003\u0002",
    "\u0002\u0002\u0188\u0189\u0005\u00a8U\u0002\u0189\u018a\u0007.\u0002",
    "\u0002\u018a\u018b\u0005f4\u0002\u018b/\u0003\u0002\u0002\u0002\u018c",
    "\u018d\u0005\u00a8U\u0002\u018d\u018e\u00052\u001a\u0002\u018e\u018f",
    "\u0007.\u0002\u0002\u018f\u0190\u0005f4\u0002\u01901\u0003\u0002\u0002",
    "\u0002\u0191\u0193\u00054\u001b\u0002\u0192\u0191\u0003\u0002\u0002",
    "\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002\u0002",
    "\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u01953\u0003\u0002\u0002",
    "\u0002\u0196\u019a\u0007&\u0002\u0002\u0197\u0198\u0005\u00a8U\u0002",
    "\u0198\u0199\u0007.\u0002\u0002\u0199\u019b\u0003\u0002\u0002\u0002",
    "\u019a\u0197\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002",
    "\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019d\u0005f4\u0002\u019d",
    "\u019e\u0007\'\u0002\u0002\u019e5\u0003\u0002\u0002\u0002\u019f\u01a1",
    "\u0005\u00aaV\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0\u01a1",
    "\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2\u01a3",
    "\u0007\r\u0002\u0002\u01a3\u01a5\u0005~@\u0002\u01a4\u01a6\u0005|?\u0002",
    "\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002",
    "\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7\u01a8\u0005\u0084C\u0002",
    "\u01a87\u0003\u0002\u0002\u0002\u01a9\u01ab\u0005\u00aaV\u0002\u01aa",
    "\u01a9\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab",
    "\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007\r\u0002\u0002\u01ad",
    "\u01af\u0005~@\u0002\u01ae\u01b0\u0005|?\u0002\u01af\u01ae\u0003\u0002",
    "\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b09\u0003\u0002",
    "\u0002\u0002\u01b1\u01b3\u0005\u00aaV\u0002\u01b2\u01b1\u0003\u0002",
    "\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002",
    "\u0002\u0002\u01b4\u01b5\u0007\u000e\u0002\u0002\u01b5\u01b6\u0005z",
    ">\u0002\u01b6;\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007\u000e\u0002",
    "\u0002\u01b8\u01bc\u0007(\u0002\u0002\u01b9\u01bb\u0005> \u0002\u01ba",
    "\u01b9\u0003\u0002\u0002\u0002\u01bb\u01be\u0003\u0002\u0002\u0002\u01bc",
    "\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd",
    "\u01bf\u0003\u0002\u0002\u0002\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf",
    "\u01c0\u0007)\u0002\u0002\u01c0=\u0003\u0002\u0002\u0002\u01c1\u01c3",
    "\u0005\u00aaV\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c2\u01c3",
    "\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5",
    "\u0005z>\u0002\u01c5?\u0003\u0002\u0002\u0002\u01c6\u01c8\u0005\u00aa",
    "V\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003\u0002",
    "\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007\u000e",
    "\u0002\u0002\u01ca\u01cb\u0005x=\u0002\u01cbA\u0003\u0002\u0002\u0002",
    "\u01cc\u01cd\u0007\u000e\u0002\u0002\u01cd\u01d1\u0007(\u0002\u0002",
    "\u01ce\u01d0\u0005D#\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01d0",
    "\u01d3\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d1",
    "\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d4\u0003\u0002\u0002\u0002\u01d3",
    "\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007)\u0002\u0002\u01d5",
    "C\u0003\u0002\u0002\u0002\u01d6\u01d8\u0005\u00aaV\u0002\u01d7\u01d6",
    "\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01d9",
    "\u0003\u0002\u0002\u0002\u01d9\u01da\u0005x=\u0002\u01daE\u0003\u0002",
    "\u0002\u0002\u01db\u01dd\u0005\u00aaV\u0002\u01dc\u01db\u0003\u0002",
    "\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0007\u000f\u0002\u0002\u01df\u01e0\u0005z",
    ">\u0002\u01e0G\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007\u000f\u0002",
    "\u0002\u01e2\u01e6\u0007(\u0002\u0002\u01e3\u01e5\u0005J&\u0002\u01e4",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6",
    "\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7",
    "\u01e9\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9",
    "\u01ea\u0007)\u0002\u0002\u01eaI\u0003\u0002\u0002\u0002\u01eb\u01ed",
    "\u0005\u00aaV\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed",
    "\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01ef",
    "\u0005z>\u0002\u01efK\u0003\u0002\u0002\u0002\u01f0\u01f2\u0005\u00aa",
    "V\u0002\u01f1\u01f0\u0003\u0002\u0002\u0002\u01f1\u01f2\u0003\u0002",
    "\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007\u000f",
    "\u0002\u0002\u01f4\u01f5\u0005x=\u0002\u01f5M\u0003\u0002\u0002\u0002",
    "\u01f6\u01f7\u0007\u000f\u0002\u0002\u01f7\u01fb\u0007(\u0002\u0002",
    "\u01f8\u01fa\u0005P)\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01fa",
    "\u01fd\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fb",
    "\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fe\u0003\u0002\u0002\u0002\u01fd",
    "\u01fb\u0003\u0002\u0002\u0002\u01fe\u01ff\u0007)\u0002\u0002\u01ff",
    "O\u0003\u0002\u0002\u0002\u0200\u0202\u0005\u00aaV\u0002\u0201\u0200",
    "\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0203",
    "\u0003\u0002\u0002\u0002\u0203\u0204\u0005x=\u0002\u0204Q\u0003\u0002",
    "\u0002\u0002\u0205\u0207\u0005\u00aaV\u0002\u0206\u0205\u0003\u0002",
    "\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002",
    "\u0002\u0002\u0208\u0209\u0007\u0010\u0002\u0002\u0209\u020b\u0005~",
    "@\u0002\u020a\u020c\u0005|?\u0002\u020b\u020a\u0003\u0002\u0002\u0002",
    "\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002",
    "\u020d\u020e\u0005\u0084C\u0002\u020eS\u0003\u0002\u0002\u0002\u020f",
    "\u0211\u0005\u00aaV\u0002\u0210\u020f\u0003\u0002\u0002\u0002\u0210",
    "\u0211\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212",
    "\u0213\u0007\u0010\u0002\u0002\u0213\u0215\u0005~@\u0002\u0214\u0216",
    "\u0005|?\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0215\u0216\u0003",
    "\u0002\u0002\u0002\u0216U\u0003\u0002\u0002\u0002\u0217\u021b\u0005",
    "X-\u0002\u0218\u021b\u0005Z.\u0002\u0219\u021b\u0005\\/\u0002\u021a",
    "\u0217\u0003\u0002\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a",
    "\u0219\u0003\u0002\u0002\u0002\u021bW\u0003\u0002\u0002\u0002\u021c",
    "\u021f\u0005\u00a8U\u0002\u021d\u0220\u0005`1\u0002\u021e\u0220\u0005",
    "b2\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f\u021e\u0003\u0002",
    "\u0002\u0002\u0220Y\u0003\u0002\u0002\u0002\u0221\u0222\u0005\u00a8",
    "U\u0002\u0222\u0223\u0005^0\u0002\u0223[\u0003\u0002\u0002\u0002\u0224",
    "\u0225\u0005\u00a8U\u0002\u0225]\u0003\u0002\u0002\u0002\u0226\u0227",
    "\u0007$\u0002\u0002\u0227\u022c\u0005f4\u0002\u0228\u0229\u0007+\u0002",
    "\u0002\u0229\u022b\u0005f4\u0002\u022a\u0228\u0003\u0002\u0002\u0002",
    "\u022b\u022e\u0003\u0002\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002",
    "\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022f\u0003\u0002\u0002\u0002",
    "\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0230\u0007%\u0002\u0002",
    "\u0230_\u0003\u0002\u0002\u0002\u0231\u023a\u0007$\u0002\u0002\u0232",
    "\u0237\u0005d3\u0002\u0233\u0234\u0007+\u0002\u0002\u0234\u0236\u0005",
    "d3\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0236\u0239\u0003\u0002",
    "\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002",
    "\u0002\u0002\u0238\u023b\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002",
    "\u0002\u0002\u023a\u0232\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002",
    "\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u023d\u0007%",
    "\u0002\u0002\u023da\u0003\u0002\u0002\u0002\u023e\u024a\u0007(\u0002",
    "\u0002\u023f\u0244\u0005d3\u0002\u0240\u0241\u0007+\u0002\u0002\u0241",
    "\u0243\u0005d3\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u0246",
    "\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002\u0244\u0245",
    "\u0003\u0002\u0002\u0002\u0245\u0248\u0003\u0002\u0002\u0002\u0246\u0244",
    "\u0003\u0002\u0002\u0002\u0247\u0249\u0007+\u0002\u0002\u0248\u0247",
    "\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002\u0249\u024b",
    "\u0003\u0002\u0002\u0002\u024a\u023f\u0003\u0002\u0002\u0002\u024a\u024b",
    "\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024d",
    "\u0007)\u0002\u0002\u024dc\u0003\u0002\u0002\u0002\u024e\u0250\u0005",
    "\u00aaV\u0002\u024f\u024e\u0003\u0002\u0002\u0002\u024f\u0250\u0003",
    "\u0002\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u0253\u0005",
    "\u00a8U\u0002\u0252\u0254\u0007,\u0002\u0002\u0253\u0252\u0003\u0002",
    "\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0255\u0003\u0002",
    "\u0002\u0002\u0255\u0256\u0007.\u0002\u0002\u0256\u0257\u0005f4\u0002",
    "\u0257e\u0003\u0002\u0002\u0002\u0258\u0259\b4\u0001\u0002\u0259\u0269",
    "\u0005l7\u0002\u025a\u025b\u0007$\u0002\u0002\u025b\u0260\u0005f4\u0002",
    "\u025c\u025d\u0007+\u0002\u0002\u025d\u025f\u0005f4\u0002\u025e\u025c",
    "\u0003\u0002\u0002\u0002\u025f\u0262\u0003\u0002\u0002\u0002\u0260\u025e",
    "\u0003\u0002\u0002\u0002\u0260\u0261\u0003\u0002\u0002\u0002\u0261\u0263",
    "\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0263\u0264",
    "\u0007%\u0002\u0002\u0264\u0269\u0003\u0002\u0002\u0002\u0265\u0266",
    "\u00073\u0002\u0002\u0266\u0269\u0005f4\u0005\u0267\u0269\u0005n8\u0002",
    "\u0268\u0258\u0003\u0002\u0002\u0002\u0268\u025a\u0003\u0002\u0002\u0002",
    "\u0268\u0265\u0003\u0002\u0002\u0002\u0268\u0267\u0003\u0002\u0002\u0002",
    "\u0269\u0276\u0003\u0002\u0002\u0002\u026a\u026b\f\t\u0002\u0002\u026b",
    "\u0275\u0005h5\u0002\u026c\u026d\f\u0007\u0002\u0002\u026d\u0275\u0007",
    ",\u0002\u0002\u026e\u026f\f\u0006\u0002\u0002\u026f\u0270\u0007&\u0002",
    "\u0002\u0270\u0275\u0007\'\u0002\u0002\u0271\u0272\f\u0004\u0002\u0002",
    "\u0272\u0273\u00070\u0002\u0002\u0273\u0275\u0005\u00a8U\u0002\u0274",
    "\u026a\u0003\u0002\u0002\u0002\u0274\u026c\u0003\u0002\u0002\u0002\u0274",
    "\u026e\u0003\u0002\u0002\u0002\u0274\u0271\u0003\u0002\u0002\u0002\u0275",
    "\u0278\u0003\u0002\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276",
    "\u0277\u0003\u0002\u0002\u0002\u0277g\u0003\u0002\u0002\u0002\u0278",
    "\u0276\u0003\u0002\u0002\u0002\u0279\u027a\u0007E\u0002\u0002\u027a",
    "\u027f\u0005f4\u0002\u027b\u027c\u0007+\u0002\u0002\u027c\u027e\u0005",
    "f4\u0002\u027d\u027b\u0003\u0002\u0002\u0002\u027e\u0281\u0003\u0002",
    "\u0002\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002",
    "\u0002\u0002\u0280\u0282\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002",
    "\u0002\u0002\u0282\u0283\u0007G\u0002\u0002\u0283i\u0003\u0002\u0002",
    "\u0002\u0284\u0289\u0005\u00a8U\u0002\u0285\u0286\u0007/\u0002\u0002",
    "\u0286\u0288\u0005\u00a8U\u0002\u0287\u0285\u0003\u0002\u0002\u0002",
    "\u0288\u028b\u0003\u0002\u0002\u0002\u0289\u0287\u0003\u0002\u0002\u0002",
    "\u0289\u028a\u0003\u0002\u0002\u0002\u028ak\u0003\u0002\u0002\u0002",
    "\u028b\u0289\u0003\u0002\u0002\u0002\u028c\u028e\u0007/\u0002\u0002",
    "\u028d\u028c\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002",
    "\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0005j6\u0002\u0290",
    "m\u0003\u0002\u0002\u0002\u0291\u0295\u0005p9\u0002\u0292\u0295\u0005",
    "r:\u0002\u0293\u0295\u0005v<\u0002\u0294\u0291\u0003\u0002\u0002\u0002",
    "\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0293\u0003\u0002\u0002\u0002",
    "\u0295o\u0003\u0002\u0002\u0002\u0296\u0298\u0005\u00aaV\u0002\u0297",
    "\u0296\u0003\u0002\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298",
    "\u0299\u0003\u0002\u0002\u0002\u0299\u029a\u0007\u001f\u0002\u0002\u029a",
    "\u029b\u0005V,\u0002\u029bq\u0003\u0002\u0002\u0002\u029c\u029e\u0005",
    "\u00aaV\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029d\u029e\u0003",
    "\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a0\u0007",
    " \u0002\u0002\u02a0\u02a1\u0005\u00a8U\u0002\u02a1\u02a2\u0007(\u0002",
    "\u0002\u02a2\u02a3\u0005t;\u0002\u02a3\u02a4\u0007)\u0002\u0002\u02a4",
    "s\u0003\u0002\u0002\u0002\u02a5\u02ac\u0005V,\u0002\u02a6\u02a8\u0007",
    "+\u0002\u0002\u02a7\u02a6\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003",
    "\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02ab\u0005",
    "V,\u0002\u02aa\u02a7\u0003\u0002\u0002\u0002\u02ab\u02ae\u0003\u0002",
    "\u0002\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ac\u02ad\u0003\u0002",
    "\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002\u02ae\u02ac\u0003\u0002",
    "\u0002\u0002\u02af\u02b1\u0007+\u0002\u0002\u02b0\u02af\u0003\u0002",
    "\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b3\u0003\u0002",
    "\u0002\u0002\u02b2\u02a5\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002",
    "\u0002\u0002\u02b3u\u0003\u0002\u0002\u0002\u02b4\u02b6\u0005\u00aa",
    "V\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002",
    "\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007!",
    "\u0002\u0002\u02b8\u02b9\u0005\u00a8U\u0002\u02b9\u02ba\u00078\u0002",
    "\u0002\u02ba\u02bb\u0005f4\u0002\u02bbw\u0003\u0002\u0002\u0002\u02bc",
    "\u02bd\u0005\u00a8U\u0002\u02bd\u02bf\u0005~@\u0002\u02be\u02c0\u0005",
    "|?\u0002\u02bf\u02be\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002",
    "\u0002\u0002\u02c0y\u0003\u0002\u0002\u0002\u02c1\u02c2\u0005\u00a8",
    "U\u0002\u02c2\u02c4\u0005~@\u0002\u02c3\u02c5\u0005|?\u0002\u02c4\u02c3",
    "\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5\u02c6",
    "\u0003\u0002\u0002\u0002\u02c6\u02c7\u0005\u0084C\u0002\u02c7{\u0003",
    "\u0002\u0002\u0002\u02c8\u02c9\u00074\u0002\u0002\u02c9\u02ca\u0005",
    "f4\u0002\u02ca}\u0003\u0002\u0002\u0002\u02cb\u02cd\u0007$\u0002\u0002",
    "\u02cc\u02ce\u0005\u0080A\u0002\u02cd\u02cc\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002",
    "\u02cf\u02d0\u0007%\u0002\u0002\u02d0\u007f\u0003\u0002\u0002\u0002",
    "\u02d1\u02d6\u0005\u0082B\u0002\u02d2\u02d3\u0007+\u0002\u0002\u02d3",
    "\u02d5\u0005\u0082B\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d5",
    "\u02d8\u0003\u0002\u0002\u0002\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6",
    "\u02d7\u0003\u0002\u0002\u0002\u02d7\u0081\u0003\u0002\u0002\u0002\u02d8",
    "\u02d6\u0003\u0002\u0002\u0002\u02d9\u02db\u0005\u00a8U\u0002\u02da",
    "\u02dc\u0007,\u0002\u0002\u02db\u02da\u0003\u0002\u0002\u0002\u02db",
    "\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002\u02dd",
    "\u02de\u0007.\u0002\u0002\u02de\u02df\u0005f4\u0002\u02df\u0083\u0003",
    "\u0002\u0002\u0002\u02e0\u02e4\u0007(\u0002\u0002\u02e1\u02e3\u0005",
    "\u0086D\u0002\u02e2\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e6\u0003",
    "\u0002\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003",
    "\u0002\u0002\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003",
    "\u0002\u0002\u0002\u02e7\u02eb\u0007)\u0002\u0002\u02e8\u02e9\u0007",
    "5\u0002\u0002\u02e9\u02eb\u0005\u0086D\u0002\u02ea\u02e0\u0003\u0002",
    "\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb\u0085\u0003\u0002",
    "\u0002\u0002\u02ec\u02fd\u0005\u0088E\u0002\u02ed\u02ee\u0005\u008c",
    "G\u0002\u02ee\u02ef\t\u0002\u0002\u0002\u02ef\u02f0\u0005\u008cG\u0002",
    "\u02f0\u02fd\u0003\u0002\u0002\u0002\u02f1\u02fd\u0005\u0096L\u0002",
    "\u02f2\u02fd\u0005\u009eP\u0002\u02f3\u02f4\u0007\u000e\u0002\u0002",
    "\u02f4\u02fd\u0005\u008cG\u0002\u02f5\u02f6\u0007\"\u0002\u0002\u02f6",
    "\u02fd\u0005\u008cG\u0002\u02f7\u02f8\u0007\u001e\u0002\u0002\u02f8",
    "\u02fd\u0005\u008cG\u0002\u02f9\u02fa\u0007\u001d\u0002\u0002\u02fa",
    "\u02fd\u0005\u008cG\u0002\u02fb\u02fd\u0005\u008cG\u0002\u02fc\u02ec",
    "\u0003\u0002\u0002\u0002\u02fc\u02ed\u0003\u0002\u0002\u0002\u02fc\u02f1",
    "\u0003\u0002\u0002\u0002\u02fc\u02f2\u0003\u0002\u0002\u0002\u02fc\u02f3",
    "\u0003\u0002\u0002\u0002\u02fc\u02f5\u0003\u0002\u0002\u0002\u02fc\u02f7",
    "\u0003\u0002\u0002\u0002\u02fc\u02f9\u0003\u0002\u0002\u0002\u02fc\u02fb",
    "\u0003\u0002\u0002\u0002\u02fd\u0087\u0003\u0002\u0002\u0002\u02fe\u02ff",
    "\u0007\u001c\u0002\u0002\u02ff\u0300\u0005\u008aF\u0002\u0300\u0301",
    "\u00078\u0002\u0002\u0301\u0302\u0005\u008cG\u0002\u0302\u0089\u0003",
    "\u0002\u0002\u0002\u0303\u0306\u0005\u00a8U\u0002\u0304\u0305\u0007",
    ".\u0002\u0002\u0305\u0307\u0005f4\u0002\u0306\u0304\u0003\u0002\u0002",
    "\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307\u031e\u0003\u0002\u0002",
    "\u0002\u0308\u0309\u0007(\u0002\u0002\u0309\u030a\u0005\u00a0Q\u0002",
    "\u030a\u030b\u0007)\u0002\u0002\u030b\u031e\u0003\u0002\u0002\u0002",
    "\u030c\u030d\u0007$\u0002\u0002\u030d\u0313\u0005\u00a0Q\u0002\u030e",
    "\u030f\u0007+\u0002\u0002\u030f\u0310\u0007*\u0002\u0002\u0310\u0311",
    "\u0007*\u0002\u0002\u0311\u0312\u0007*\u0002\u0002\u0312\u0314\u0005",
    "\u00a0Q\u0002\u0313\u030e\u0003\u0002\u0002\u0002\u0313\u0314\u0003",
    "\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0316\u0007",
    ")\u0002\u0002\u0316\u031e\u0003\u0002\u0002\u0002\u0317\u0318\u0007",
    "$\u0002\u0002\u0318\u0319\u0007+\u0002\u0002\u0319\u031a\u0007*\u0002",
    "\u0002\u031a\u031b\u0007*\u0002\u0002\u031b\u031c\u0007*\u0002\u0002",
    "\u031c\u031e\u0005\u00a0Q\u0002\u031d\u0303\u0003\u0002\u0002\u0002",
    "\u031d\u0308\u0003\u0002\u0002\u0002\u031d\u030c\u0003\u0002\u0002\u0002",
    "\u031d\u0317\u0003\u0002\u0002\u0002\u031e\u008b\u0003\u0002\u0002\u0002",
    "\u031f\u0320\bG\u0001\u0002\u0320\u0321\u0007$\u0002\u0002\u0321\u0322",
    "\u0005\u008cG\u0002\u0322\u0323\u0007%\u0002\u0002\u0323\u032b\u0003",
    "\u0002\u0002\u0002\u0324\u0325\t\u0003\u0002\u0002\u0325\u032b\u0005",
    "\u008cG\r\u0326\u032b\u0005\u0096L\u0002\u0327\u0328\u0007\u000f\u0002",
    "\u0002\u0328\u032b\u0005\u008cG\u0004\u0329\u032b\u0005\u008eH\u0002",
    "\u032a\u031f\u0003\u0002\u0002\u0002\u032a\u0324\u0003\u0002\u0002\u0002",
    "\u032a\u0326\u0003\u0002\u0002\u0002\u032a\u0327\u0003\u0002\u0002\u0002",
    "\u032a\u0329\u0003\u0002\u0002\u0002\u032b\u0357\u0003\u0002\u0002\u0002",
    "\u032c\u032d\f\f\u0002\u0002\u032d\u032e\u0007I\u0002\u0002\u032e\u0356",
    "\u0005\u008cG\r\u032f\u0330\f\u000b\u0002\u0002\u0330\u0331\t\u0004",
    "\u0002\u0002\u0331\u0356\u0005\u008cG\f\u0332\u0333\f\n\u0002\u0002",
    "\u0333\u0334\t\u0005\u0002\u0002\u0334\u0356\u0005\u008cG\u000b\u0335",
    "\u0336\f\t\u0002\u0002\u0336\u0337\t\u0006\u0002\u0002\u0337\u0356\u0005",
    "\u008cG\n\u0338\u0339\f\b\u0002\u0002\u0339\u033a\t\u0007\u0002\u0002",
    "\u033a\u0356\u0005\u008cG\t\u033b\u033c\f\u0007\u0002\u0002\u033c\u033d",
    "\u0007\u0018\u0002\u0002\u033d\u0356\u0005\u008cG\b\u033e\u033f\f\u0006",
    "\u0002\u0002\u033f\u0340\u0007\u0019\u0002\u0002\u0340\u0356\u0005\u008c",
    "G\u0007\u0341\u0342\f\u0011\u0002\u0002\u0342\u0343\u0007*\u0002\u0002",
    "\u0343\u0356\u0005\u00a8U\u0002\u0344\u0345\f\u0010\u0002\u0002\u0345",
    "\u0346\u0007&\u0002\u0002\u0346\u0347\u0005\u008cG\u0002\u0347\u0348",
    "\u0007\'\u0002\u0002\u0348\u0356\u0003\u0002\u0002\u0002\u0349\u034a",
    "\f\u000f\u0002\u0002\u034a\u034c\u0007$\u0002\u0002\u034b\u034d\u0005",
    "\u00a2R\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034c\u034d\u0003",
    "\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u0356\u0007",
    "%\u0002\u0002\u034f\u0350\f\u000e\u0002\u0002\u0350\u0352\u0007$\u0002",
    "\u0002\u0351\u0353\u0005\u00a4S\u0002\u0352\u0351\u0003\u0002\u0002",
    "\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002",
    "\u0002\u0354\u0356\u0007%\u0002\u0002\u0355\u032c\u0003\u0002\u0002",
    "\u0002\u0355\u032f\u0003\u0002\u0002\u0002\u0355\u0332\u0003\u0002\u0002",
    "\u0002\u0355\u0335\u0003\u0002\u0002\u0002\u0355\u0338\u0003\u0002\u0002",
    "\u0002\u0355\u033b\u0003\u0002\u0002\u0002\u0355\u033e\u0003\u0002\u0002",
    "\u0002\u0355\u0341\u0003\u0002\u0002\u0002\u0355\u0344\u0003\u0002\u0002",
    "\u0002\u0355\u0349\u0003\u0002\u0002\u0002\u0355\u034f\u0003\u0002\u0002",
    "\u0002\u0356\u0359\u0003\u0002\u0002\u0002\u0357\u0355\u0003\u0002\u0002",
    "\u0002\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u008d\u0003\u0002\u0002",
    "\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u035a\u035b\u0007$\u0002",
    "\u0002\u035b\u036d\u0007%\u0002\u0002\u035c\u036d\u0005\u0090I\u0002",
    "\u035d\u035e\u0005l7\u0002\u035e\u035f\u0007$\u0002\u0002\u035f\u0360",
    "\u0005\u00a2R\u0002\u0360\u0361\u0007%\u0002\u0002\u0361\u036d\u0003",
    "\u0002\u0002\u0002\u0362\u0363\u0007&\u0002\u0002\u0363\u0364\u0005",
    "\u00a2R\u0002\u0364\u0365\u0007\'\u0002\u0002\u0365\u036d\u0003\u0002",
    "\u0002\u0002\u0366\u036d\u0007K\u0002\u0002\u0367\u036d\u0007L\u0002",
    "\u0002\u0368\u036d\u0007M\u0002\u0002\u0369\u036d\u0007\u001a\u0002",
    "\u0002\u036a\u036d\u0007\u001b\u0002\u0002\u036b\u036d\u0005\u00a8U",
    "\u0002\u036c\u035a\u0003\u0002\u0002\u0002\u036c\u035c\u0003\u0002\u0002",
    "\u0002\u036c\u035d\u0003\u0002\u0002\u0002\u036c\u0362\u0003\u0002\u0002",
    "\u0002\u036c\u0366\u0003\u0002\u0002\u0002\u036c\u0367\u0003\u0002\u0002",
    "\u0002\u036c\u0368\u0003\u0002\u0002\u0002\u036c\u0369\u0003\u0002\u0002",
    "\u0002\u036c\u036a\u0003\u0002\u0002\u0002\u036c\u036b\u0003\u0002\u0002",
    "\u0002\u036d\u008f\u0003\u0002\u0002\u0002\u036e\u036f\u0005l7\u0002",
    "\u036f\u0371\u0007(\u0002\u0002\u0370\u0372\u0005\u0092J\u0002\u0371",
    "\u0370\u0003\u0002\u0002\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372",
    "\u0373\u0003\u0002\u0002\u0002\u0373\u0374\u0007)\u0002\u0002\u0374",
    "\u0091\u0003\u0002\u0002\u0002\u0375\u037a\u0005\u0094K\u0002\u0376",
    "\u0377\u0007+\u0002\u0002\u0377\u0379\u0005\u0094K\u0002\u0378\u0376",
    "\u0003\u0002\u0002\u0002\u0379\u037c\u0003\u0002\u0002\u0002\u037a\u0378",
    "\u0003\u0002\u0002\u0002\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u037e",
    "\u0003\u0002\u0002\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037d\u037f",
    "\u0007+\u0002\u0002\u037e\u037d\u0003\u0002\u0002\u0002\u037e\u037f",
    "\u0003\u0002\u0002\u0002\u037f\u0093\u0003\u0002\u0002\u0002\u0380\u0381",
    "\u0005\u00a8U\u0002\u0381\u0382\u0007.\u0002\u0002\u0382\u0383\u0005",
    "\u008cG\u0002\u0383\u0095\u0003\u0002\u0002\u0002\u0384\u0386\u0005",
    "\u0098M\u0002\u0385\u0387\u0005\u009aN\u0002\u0386\u0385\u0003\u0002",
    "\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0389\u0003\u0002",
    "\u0002\u0002\u0388\u038a\u0005\u009cO\u0002\u0389\u0388\u0003\u0002",
    "\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002\u038a\u0097\u0003\u0002",
    "\u0002\u0002\u038b\u038c\u0007\u0016\u0002\u0002\u038c\u038d\u0005\u008c",
    "G\u0002\u038d\u038e\u0005\u0084C\u0002\u038e\u0394\u0003\u0002\u0002",
    "\u0002\u038f\u0390\u0007\u0016\u0002\u0002\u0390\u0391\u0005\u0088E",
    "\u0002\u0391\u0392\u0005\u0084C\u0002\u0392\u0394\u0003\u0002\u0002",
    "\u0002\u0393\u038b\u0003\u0002\u0002\u0002\u0393\u038f\u0003\u0002\u0002",
    "\u0002\u0394\u0099\u0003\u0002\u0002\u0002\u0395\u0396\u0007\u0017\u0002",
    "\u0002\u0396\u0398\u0005\u0098M\u0002\u0397\u0395\u0003\u0002\u0002",
    "\u0002\u0398\u0399\u0003\u0002\u0002\u0002\u0399\u0397\u0003\u0002\u0002",
    "\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u009b\u0003\u0002\u0002",
    "\u0002\u039b\u039c\u0007\u0017\u0002\u0002\u039c\u039d\u0005\u0084C",
    "\u0002\u039d\u009d\u0003\u0002\u0002\u0002\u039e\u039f\u0007\u0011\u0002",
    "\u0002\u039f\u03a0\u0005\u008aF\u0002\u03a0\u03a1\u0007\u0012\u0002",
    "\u0002\u03a1\u03a2\u0005\u008cG\u0002\u03a2\u03a3\u0005\u0084C\u0002",
    "\u03a3\u03aa\u0003\u0002\u0002\u0002\u03a4\u03a5\u0007\u0011\u0002\u0002",
    "\u03a5\u03a6\u0005\u008cG\u0002\u03a6\u03a7\u0007\u0015\u0002\u0002",
    "\u03a7\u03a8\u0005\u0084C\u0002\u03a8\u03aa\u0003\u0002\u0002\u0002",
    "\u03a9\u039e\u0003\u0002\u0002\u0002\u03a9\u03a4\u0003\u0002\u0002\u0002",
    "\u03aa\u009f\u0003\u0002\u0002\u0002\u03ab\u03b0\u0005\u00a8U\u0002",
    "\u03ac\u03ad\u0007+\u0002\u0002\u03ad\u03af\u0005\u00a8U\u0002\u03ae",
    "\u03ac\u0003\u0002\u0002\u0002\u03af\u03b2\u0003\u0002\u0002\u0002\u03b0",
    "\u03ae\u0003\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1",
    "\u00a1\u0003\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002\u0002\u03b3",
    "\u03b8\u0005\u008cG\u0002\u03b4\u03b5\u0007+\u0002\u0002\u03b5\u03b7",
    "\u0005\u008cG\u0002\u03b6\u03b4\u0003\u0002\u0002\u0002\u03b7\u03ba",
    "\u0003\u0002\u0002\u0002\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b8\u03b9",
    "\u0003\u0002\u0002\u0002\u03b9\u00a3\u0003\u0002\u0002\u0002\u03ba\u03b8",
    "\u0003\u0002\u0002\u0002\u03bb\u03c0\u0005\u00a6T\u0002\u03bc\u03bd",
    "\u0007+\u0002\u0002\u03bd\u03bf\u0005\u00a6T\u0002\u03be\u03bc\u0003",
    "\u0002\u0002\u0002\u03bf\u03c2\u0003\u0002\u0002\u0002\u03c0\u03be\u0003",
    "\u0002\u0002\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1\u00a5\u0003",
    "\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c3\u03c4\u0005",
    "\u00a8U\u0002\u03c4\u03c5\u0007.\u0002\u0002\u03c5\u03c6\u0005\u008c",
    "G\u0002\u03c6\u00a7\u0003\u0002\u0002\u0002\u03c7\u03ca\u0007J\u0002",
    "\u0002\u03c8\u03ca\u0005\u00acW\u0002\u03c9\u03c7\u0003\u0002\u0002",
    "\u0002\u03c9\u03c8\u0003\u0002\u0002\u0002\u03ca\u00a9\u0003\u0002\u0002",
    "\u0002\u03cb\u03cd\t\b\u0002\u0002\u03cc\u03cb\u0003\u0002\u0002\u0002",
    "\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002",
    "\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u00ab\u0003\u0002\u0002\u0002",
    "\u03d0\u03d1\t\t\u0002\u0002\u03d1\u00ad\u0003\u0002\u0002\u0002p\u00af",
    "\u00b4\u00bc\u00bf\u00c5\u00c9\u00d2\u00da\u00dd\u00e5\u00e9\u00f5\u00fa",
    "\u00ff\u0106\u010c\u0112\u011b\u012d\u013c\u013f\u0149\u014f\u0154\u015e",
    "\u0164\u0169\u016e\u0172\u0179\u017f\u0183\u0186\u0194\u019a\u01a0\u01a5",
    "\u01aa\u01af\u01b2\u01bc\u01c2\u01c7\u01d1\u01d7\u01dc\u01e6\u01ec\u01f1",
    "\u01fb\u0201\u0206\u020b\u0210\u0215\u021a\u021f\u022c\u0237\u023a\u0244",
    "\u0248\u024a\u024f\u0253\u0260\u0268\u0274\u0276\u027f\u0289\u028d\u0294",
    "\u0297\u029d\u02a7\u02ac\u02b0\u02b2\u02b5\u02bf\u02c4\u02cd\u02d6\u02db",
    "\u02e4\u02ea\u02fc\u0306\u0313\u031d\u032a\u034c\u0352\u0355\u0357\u036c",
    "\u0371\u037a\u037e\u0386\u0389\u0393\u0399\u03a9\u03b0\u03b8\u03c0\u03c9",
    "\u03ce"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'contract'", "'interface'", "'import'", "'implements'", 
                     "'impl'", "'extension'", "'requires'", "'extends'", 
                     "'error'", "'event'", "'instantiate'", "'exec'", "'query'", 
                     "'migrate'", "'for'", "'in'", "'from'", "'state'", 
                     "'times'", "'if'", "'else'", "'and'", "'or'", "'true'", 
                     "'false'", "'let'", "'fail'", "'return'", "'struct'", 
                     "'enum'", "'type'", "'emit'", "'as'", "'('", "')'", 
                     "'['", "']'", "'{'", "'}'", "'.'", "','", "'?'", "'!'", 
                     "':'", "'::'", "'$'", "'#'", "'@'", "'&'", "'->'", 
                     "'=>'", "'''", "'\"'", "'='", "'=='", "'!='", "'+'", 
                     "'+='", "'-'", "'-='", "'*'", "'*='", "'/'", "'/='", 
                     "'%'", "'%='", "'<'", "'<='", "'>'", "'>='", "'**'" ];

var symbolicNames = [ null, "CONTRACT", "INTERFACE", "IMPORT", "IMPLEMENTS", 
                      "IMPL", "EXTENSION", "REQUIRES", "EXTENDS", "ERROR", 
                      "EVENT", "INSTANTIATE", "EXEC", "QUERY", "MIGRATE", 
                      "FOR", "IN", "FROM", "STATE", "TIMES", "IF", "ELSE", 
                      "AND", "OR", "TRUE", "FALSE", "LET", "FAIL", "RETURN", 
                      "STRUCT", "ENUM", "TYPE", "EMIT", "AS", "LPAREN", 
                      "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", 
                      "DOT", "COMMA", "QUEST", "EXCLAM", "COLON", "D_COLON", 
                      "DOLLAR", "HASH", "AT", "AMP", "ARROW", "FAT_ARROW", 
                      "S_QUOTE", "D_QUOTE", "EQ", "EQEQ", "NEQ", "PLUS", 
                      "PLUS_EQ", "MINUS", "MINUS_EQ", "MUL", "MUL_EQ", "DIV", 
                      "DIV_EQ", "MOD", "MOD_EQ", "LT", "LT_EQ", "GT", "GT_EQ", 
                      "POW", "Ident", "StringLiteral", "IntegerLiteral", 
                      "DecimalLiteral", "CWSPEC_LINE_COMMENT", "CWSPEC_BLOCK_COMMENT", 
                      "LINE_COMMENT", "BLOCK_COMMENT", "WS" ];

var ruleNames =  [ "sourceFile", "topLevelStmt", "contractDefn", "interfaceList", 
                   "interfaceVal", "interfaceDefn", "importStmt", "importList", 
                   "importItem", "contractBody", "interfaceBody", "contractItem", 
                   "interfaceItem", "errorDefn", "errorDefnBlock", "errorDefnBlock_item", 
                   "eventDefn", "eventDefnBlock", "eventDefnBlock_item", 
                   "stateDefn", "stateDefnBlock", "stateDefnBlock_item", 
                   "itemDefn", "mapDefn", "mapDefnKeys", "mapDefnKey", "instantiateDefn", 
                   "instantiateDecl", "execDefn", "execDefnBlock", "execDefnBlock_item", 
                   "execDecl", "execDeclBlock", "execDeclBlock_item", "queryDefn", 
                   "queryDefnBlock", "queryDefnBlock_item", "queryDecl", 
                   "queryDeclBlock", "queryDeclBlock_item", "migrateDefn", 
                   "migrateDecl", "enumVariant", "enumVariant_struct", "enumVariant_tuple", 
                   "enumVariant_unit", "tupleMembers", "parenStructMembers", 
                   "curlyStructMembers", "structMember", "typeExpr", "typeParam", 
                   "pathList", "typePath", "typeDefn", "structDefn", "enumDefn", 
                   "enumVariantList", "typeAliasDefn", "namedFnDecl", "namedFnDefn", 
                   "fnType", "fnArgs", "fnArgList", "fnArg", "fnBody", "stmt", 
                   "letStmt_", "letLHS", "expr", "val", "structVal_", "structValMembers", 
                   "structValMember", "ifExpr_", "ifClause_", "elseIfClauses", 
                   "elseClause", "forStmt_", "identList", "exprList", "namedExprList", 
                   "namedExpr", "ident", "cwspec", "reservedKeyword" ];

function CWScriptParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CWScriptParser.prototype = Object.create(antlr4.Parser.prototype);
CWScriptParser.prototype.constructor = CWScriptParser;

Object.defineProperty(CWScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CWScriptParser.EOF = antlr4.Token.EOF;
CWScriptParser.CONTRACT = 1;
CWScriptParser.INTERFACE = 2;
CWScriptParser.IMPORT = 3;
CWScriptParser.IMPLEMENTS = 4;
CWScriptParser.IMPL = 5;
CWScriptParser.EXTENSION = 6;
CWScriptParser.REQUIRES = 7;
CWScriptParser.EXTENDS = 8;
CWScriptParser.ERROR = 9;
CWScriptParser.EVENT = 10;
CWScriptParser.INSTANTIATE = 11;
CWScriptParser.EXEC = 12;
CWScriptParser.QUERY = 13;
CWScriptParser.MIGRATE = 14;
CWScriptParser.FOR = 15;
CWScriptParser.IN = 16;
CWScriptParser.FROM = 17;
CWScriptParser.STATE = 18;
CWScriptParser.TIMES = 19;
CWScriptParser.IF = 20;
CWScriptParser.ELSE = 21;
CWScriptParser.AND = 22;
CWScriptParser.OR = 23;
CWScriptParser.TRUE = 24;
CWScriptParser.FALSE = 25;
CWScriptParser.LET = 26;
CWScriptParser.FAIL = 27;
CWScriptParser.RETURN = 28;
CWScriptParser.STRUCT = 29;
CWScriptParser.ENUM = 30;
CWScriptParser.TYPE = 31;
CWScriptParser.EMIT = 32;
CWScriptParser.AS = 33;
CWScriptParser.LPAREN = 34;
CWScriptParser.RPAREN = 35;
CWScriptParser.LBRACK = 36;
CWScriptParser.RBRACK = 37;
CWScriptParser.LBRACE = 38;
CWScriptParser.RBRACE = 39;
CWScriptParser.DOT = 40;
CWScriptParser.COMMA = 41;
CWScriptParser.QUEST = 42;
CWScriptParser.EXCLAM = 43;
CWScriptParser.COLON = 44;
CWScriptParser.D_COLON = 45;
CWScriptParser.DOLLAR = 46;
CWScriptParser.HASH = 47;
CWScriptParser.AT = 48;
CWScriptParser.AMP = 49;
CWScriptParser.ARROW = 50;
CWScriptParser.FAT_ARROW = 51;
CWScriptParser.S_QUOTE = 52;
CWScriptParser.D_QUOTE = 53;
CWScriptParser.EQ = 54;
CWScriptParser.EQEQ = 55;
CWScriptParser.NEQ = 56;
CWScriptParser.PLUS = 57;
CWScriptParser.PLUS_EQ = 58;
CWScriptParser.MINUS = 59;
CWScriptParser.MINUS_EQ = 60;
CWScriptParser.MUL = 61;
CWScriptParser.MUL_EQ = 62;
CWScriptParser.DIV = 63;
CWScriptParser.DIV_EQ = 64;
CWScriptParser.MOD = 65;
CWScriptParser.MOD_EQ = 66;
CWScriptParser.LT = 67;
CWScriptParser.LT_EQ = 68;
CWScriptParser.GT = 69;
CWScriptParser.GT_EQ = 70;
CWScriptParser.POW = 71;
CWScriptParser.Ident = 72;
CWScriptParser.StringLiteral = 73;
CWScriptParser.IntegerLiteral = 74;
CWScriptParser.DecimalLiteral = 75;
CWScriptParser.CWSPEC_LINE_COMMENT = 76;
CWScriptParser.CWSPEC_BLOCK_COMMENT = 77;
CWScriptParser.LINE_COMMENT = 78;
CWScriptParser.BLOCK_COMMENT = 79;
CWScriptParser.WS = 80;

CWScriptParser.RULE_sourceFile = 0;
CWScriptParser.RULE_topLevelStmt = 1;
CWScriptParser.RULE_contractDefn = 2;
CWScriptParser.RULE_interfaceList = 3;
CWScriptParser.RULE_interfaceVal = 4;
CWScriptParser.RULE_interfaceDefn = 5;
CWScriptParser.RULE_importStmt = 6;
CWScriptParser.RULE_importList = 7;
CWScriptParser.RULE_importItem = 8;
CWScriptParser.RULE_contractBody = 9;
CWScriptParser.RULE_interfaceBody = 10;
CWScriptParser.RULE_contractItem = 11;
CWScriptParser.RULE_interfaceItem = 12;
CWScriptParser.RULE_errorDefn = 13;
CWScriptParser.RULE_errorDefnBlock = 14;
CWScriptParser.RULE_errorDefnBlock_item = 15;
CWScriptParser.RULE_eventDefn = 16;
CWScriptParser.RULE_eventDefnBlock = 17;
CWScriptParser.RULE_eventDefnBlock_item = 18;
CWScriptParser.RULE_stateDefn = 19;
CWScriptParser.RULE_stateDefnBlock = 20;
CWScriptParser.RULE_stateDefnBlock_item = 21;
CWScriptParser.RULE_itemDefn = 22;
CWScriptParser.RULE_mapDefn = 23;
CWScriptParser.RULE_mapDefnKeys = 24;
CWScriptParser.RULE_mapDefnKey = 25;
CWScriptParser.RULE_instantiateDefn = 26;
CWScriptParser.RULE_instantiateDecl = 27;
CWScriptParser.RULE_execDefn = 28;
CWScriptParser.RULE_execDefnBlock = 29;
CWScriptParser.RULE_execDefnBlock_item = 30;
CWScriptParser.RULE_execDecl = 31;
CWScriptParser.RULE_execDeclBlock = 32;
CWScriptParser.RULE_execDeclBlock_item = 33;
CWScriptParser.RULE_queryDefn = 34;
CWScriptParser.RULE_queryDefnBlock = 35;
CWScriptParser.RULE_queryDefnBlock_item = 36;
CWScriptParser.RULE_queryDecl = 37;
CWScriptParser.RULE_queryDeclBlock = 38;
CWScriptParser.RULE_queryDeclBlock_item = 39;
CWScriptParser.RULE_migrateDefn = 40;
CWScriptParser.RULE_migrateDecl = 41;
CWScriptParser.RULE_enumVariant = 42;
CWScriptParser.RULE_enumVariant_struct = 43;
CWScriptParser.RULE_enumVariant_tuple = 44;
CWScriptParser.RULE_enumVariant_unit = 45;
CWScriptParser.RULE_tupleMembers = 46;
CWScriptParser.RULE_parenStructMembers = 47;
CWScriptParser.RULE_curlyStructMembers = 48;
CWScriptParser.RULE_structMember = 49;
CWScriptParser.RULE_typeExpr = 50;
CWScriptParser.RULE_typeParam = 51;
CWScriptParser.RULE_pathList = 52;
CWScriptParser.RULE_typePath = 53;
CWScriptParser.RULE_typeDefn = 54;
CWScriptParser.RULE_structDefn = 55;
CWScriptParser.RULE_enumDefn = 56;
CWScriptParser.RULE_enumVariantList = 57;
CWScriptParser.RULE_typeAliasDefn = 58;
CWScriptParser.RULE_namedFnDecl = 59;
CWScriptParser.RULE_namedFnDefn = 60;
CWScriptParser.RULE_fnType = 61;
CWScriptParser.RULE_fnArgs = 62;
CWScriptParser.RULE_fnArgList = 63;
CWScriptParser.RULE_fnArg = 64;
CWScriptParser.RULE_fnBody = 65;
CWScriptParser.RULE_stmt = 66;
CWScriptParser.RULE_letStmt_ = 67;
CWScriptParser.RULE_letLHS = 68;
CWScriptParser.RULE_expr = 69;
CWScriptParser.RULE_val = 70;
CWScriptParser.RULE_structVal_ = 71;
CWScriptParser.RULE_structValMembers = 72;
CWScriptParser.RULE_structValMember = 73;
CWScriptParser.RULE_ifExpr_ = 74;
CWScriptParser.RULE_ifClause_ = 75;
CWScriptParser.RULE_elseIfClauses = 76;
CWScriptParser.RULE_elseClause = 77;
CWScriptParser.RULE_forStmt_ = 78;
CWScriptParser.RULE_identList = 79;
CWScriptParser.RULE_exprList = 80;
CWScriptParser.RULE_namedExprList = 81;
CWScriptParser.RULE_namedExpr = 82;
CWScriptParser.RULE_ident = 83;
CWScriptParser.RULE_cwspec = 84;
CWScriptParser.RULE_reservedKeyword = 85;


function SourceFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_sourceFile;
    this.spec = null; // CwspecContext
    return this;
}

SourceFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceFileContext.prototype.constructor = SourceFileContext;

SourceFileContext.prototype.EOF = function() {
    return this.getToken(CWScriptParser.EOF, 0);
};

SourceFileContext.prototype.topLevelStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelStmtContext);
    } else {
        return this.getTypedRuleContext(TopLevelStmtContext,i);
    }
};

SourceFileContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.SourceFileContext = SourceFileContext;

CWScriptParser.prototype.sourceFile = function() {

    var localctx = new SourceFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CWScriptParser.RULE_sourceFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 172;
            localctx.spec = this.cwspec();

        }
        this.state = 178;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT))) !== 0) || _la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 175;
            this.topLevelStmt();
            this.state = 180;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 181;
        this.match(CWScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_topLevelStmt;
    return this;
}

TopLevelStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelStmtContext.prototype.constructor = TopLevelStmtContext;

TopLevelStmtContext.prototype.contractDefn = function() {
    return this.getTypedRuleContext(ContractDefnContext,0);
};

TopLevelStmtContext.prototype.interfaceDefn = function() {
    return this.getTypedRuleContext(InterfaceDefnContext,0);
};

TopLevelStmtContext.prototype.importStmt = function() {
    return this.getTypedRuleContext(ImportStmtContext,0);
};




CWScriptParser.TopLevelStmtContext = TopLevelStmtContext;

CWScriptParser.prototype.topLevelStmt = function() {

    var localctx = new TopLevelStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CWScriptParser.RULE_topLevelStmt);
    try {
        this.state = 186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 183;
            this.contractDefn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 184;
            this.interfaceDefn();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 185;
            this.importStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContractDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_contractDefn;
    this.spec = null; // CwspecContext
    this.name = null; // IdentContext
    this.baseContracts = null; // IdentListContext
    this.interfaces = null; // InterfaceListContext
    return this;
}

ContractDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractDefnContext.prototype.constructor = ContractDefnContext;

ContractDefnContext.prototype.CONTRACT = function() {
    return this.getToken(CWScriptParser.CONTRACT, 0);
};

ContractDefnContext.prototype.contractBody = function() {
    return this.getTypedRuleContext(ContractBodyContext,0);
};

ContractDefnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ContractDefnContext.prototype.EXTENDS = function() {
    return this.getToken(CWScriptParser.EXTENDS, 0);
};

ContractDefnContext.prototype.IMPLEMENTS = function() {
    return this.getToken(CWScriptParser.IMPLEMENTS, 0);
};

ContractDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};

ContractDefnContext.prototype.identList = function() {
    return this.getTypedRuleContext(IdentListContext,0);
};

ContractDefnContext.prototype.interfaceList = function() {
    return this.getTypedRuleContext(InterfaceListContext,0);
};




CWScriptParser.ContractDefnContext = ContractDefnContext;

CWScriptParser.prototype.contractDefn = function() {

    var localctx = new ContractDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CWScriptParser.RULE_contractDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 189;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 188;
            localctx.spec = this.cwspec();
        }

        this.state = 191;
        this.match(CWScriptParser.CONTRACT);

        this.state = 192;
        localctx.name = this.ident();
        this.state = 195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.EXTENDS) {
            this.state = 193;
            this.match(CWScriptParser.EXTENDS);
            this.state = 194;
            localctx.baseContracts = this.identList();
        }

        this.state = 199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.IMPLEMENTS) {
            this.state = 197;
            this.match(CWScriptParser.IMPLEMENTS);

            this.state = 198;
            localctx.interfaces = this.interfaceList();
        }

        this.state = 201;
        this.contractBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_interfaceList;
    return this;
}

InterfaceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceListContext.prototype.constructor = InterfaceListContext;

InterfaceListContext.prototype.interfaceVal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceValContext);
    } else {
        return this.getTypedRuleContext(InterfaceValContext,i);
    }
};

InterfaceListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.InterfaceListContext = InterfaceListContext;

CWScriptParser.prototype.interfaceList = function() {

    var localctx = new InterfaceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CWScriptParser.RULE_interfaceList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 203;
        this.interfaceVal();
        this.state = 208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CWScriptParser.COMMA) {
            this.state = 204;
            this.match(CWScriptParser.COMMA);
            this.state = 205;
            this.interfaceVal();
            this.state = 210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_interfaceVal;
    this.interfaceName = null; // IdentContext
    this.mixins = null; // IdentListContext
    return this;
}

InterfaceValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceValContext.prototype.constructor = InterfaceValContext;

InterfaceValContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

InterfaceValContext.prototype.LBRACK = function() {
    return this.getToken(CWScriptParser.LBRACK, 0);
};

InterfaceValContext.prototype.RBRACK = function() {
    return this.getToken(CWScriptParser.RBRACK, 0);
};

InterfaceValContext.prototype.identList = function() {
    return this.getTypedRuleContext(IdentListContext,0);
};




CWScriptParser.InterfaceValContext = InterfaceValContext;

CWScriptParser.prototype.interfaceVal = function() {

    var localctx = new InterfaceValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CWScriptParser.RULE_interfaceVal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        localctx.interfaceName = this.ident();
        this.state = 216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.LBRACK) {
            this.state = 212;
            this.match(CWScriptParser.LBRACK);
            this.state = 213;
            localctx.mixins = this.identList();
            this.state = 214;
            this.match(CWScriptParser.RBRACK);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_interfaceDefn;
    this.spec = null; // CwspecContext
    this.name = null; // IdentContext
    this.mixinName = null; // IdentContext
    this.baseInterfaces = null; // InterfaceListContext
    return this;
}

InterfaceDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDefnContext.prototype.constructor = InterfaceDefnContext;

InterfaceDefnContext.prototype.INTERFACE = function() {
    return this.getToken(CWScriptParser.INTERFACE, 0);
};

InterfaceDefnContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDefnContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

InterfaceDefnContext.prototype.LBRACK = function() {
    return this.getToken(CWScriptParser.LBRACK, 0);
};

InterfaceDefnContext.prototype.RBRACK = function() {
    return this.getToken(CWScriptParser.RBRACK, 0);
};

InterfaceDefnContext.prototype.EXTENDS = function() {
    return this.getToken(CWScriptParser.EXTENDS, 0);
};

InterfaceDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};

InterfaceDefnContext.prototype.interfaceList = function() {
    return this.getTypedRuleContext(InterfaceListContext,0);
};




CWScriptParser.InterfaceDefnContext = InterfaceDefnContext;

CWScriptParser.prototype.interfaceDefn = function() {

    var localctx = new InterfaceDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CWScriptParser.RULE_interfaceDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 218;
            localctx.spec = this.cwspec();
        }

        this.state = 221;
        this.match(CWScriptParser.INTERFACE);

        this.state = 222;
        localctx.name = this.ident();
        this.state = 227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.LBRACK) {
            this.state = 223;
            this.match(CWScriptParser.LBRACK);
            this.state = 224;
            localctx.mixinName = this.ident();
            this.state = 225;
            this.match(CWScriptParser.RBRACK);
        }

        this.state = 231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.EXTENDS) {
            this.state = 229;
            this.match(CWScriptParser.EXTENDS);
            this.state = 230;
            localctx.baseInterfaces = this.interfaceList();
        }

        this.state = 233;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_importStmt;
    return this;
}

ImportStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStmtContext.prototype.constructor = ImportStmtContext;


 
ImportStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ImportItemsStmtContext(parser, ctx) {
	ImportStmtContext.call(this, parser);
    this.items = null; // ImportListContext;
    this.fileName = null; // Token;
    ImportStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImportItemsStmtContext.prototype = Object.create(ImportStmtContext.prototype);
ImportItemsStmtContext.prototype.constructor = ImportItemsStmtContext;

CWScriptParser.ImportItemsStmtContext = ImportItemsStmtContext;

ImportItemsStmtContext.prototype.IMPORT = function() {
    return this.getToken(CWScriptParser.IMPORT, 0);
};

ImportItemsStmtContext.prototype.FROM = function() {
    return this.getToken(CWScriptParser.FROM, 0);
};

ImportItemsStmtContext.prototype.StringLiteral = function() {
    return this.getToken(CWScriptParser.StringLiteral, 0);
};

ImportItemsStmtContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

ImportItemsStmtContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

ImportItemsStmtContext.prototype.importList = function() {
    return this.getTypedRuleContext(ImportListContext,0);
};

ImportItemsStmtContext.prototype.COMMA = function() {
    return this.getToken(CWScriptParser.COMMA, 0);
};

function ImportAllStmtContext(parser, ctx) {
	ImportStmtContext.call(this, parser);
    this.fileName = null; // Token;
    ImportStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImportAllStmtContext.prototype = Object.create(ImportStmtContext.prototype);
ImportAllStmtContext.prototype.constructor = ImportAllStmtContext;

CWScriptParser.ImportAllStmtContext = ImportAllStmtContext;

ImportAllStmtContext.prototype.IMPORT = function() {
    return this.getToken(CWScriptParser.IMPORT, 0);
};

ImportAllStmtContext.prototype.MUL = function() {
    return this.getToken(CWScriptParser.MUL, 0);
};

ImportAllStmtContext.prototype.FROM = function() {
    return this.getToken(CWScriptParser.FROM, 0);
};

ImportAllStmtContext.prototype.StringLiteral = function() {
    return this.getToken(CWScriptParser.StringLiteral, 0);
};


CWScriptParser.ImportStmtContext = ImportStmtContext;

CWScriptParser.prototype.importStmt = function() {

    var localctx = new ImportStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CWScriptParser.RULE_importStmt);
    var _la = 0; // Token type
    try {
        this.state = 253;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ImportAllStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 235;
            this.match(CWScriptParser.IMPORT);
            this.state = 236;
            this.match(CWScriptParser.MUL);
            this.state = 237;
            this.match(CWScriptParser.FROM);

            this.state = 238;
            localctx.fileName = this.match(CWScriptParser.StringLiteral);
            break;

        case 2:
            localctx = new ImportItemsStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 239;
            this.match(CWScriptParser.IMPORT);
            this.state = 248;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CWScriptParser.LPAREN:
                this.state = 240;
                this.match(CWScriptParser.LPAREN);

                this.state = 241;
                localctx.items = this.importList();
                this.state = 243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CWScriptParser.COMMA) {
                    this.state = 242;
                    this.match(CWScriptParser.COMMA);
                }

                this.state = 245;
                this.match(CWScriptParser.RPAREN);
                break;
            case CWScriptParser.CONTRACT:
            case CWScriptParser.INTERFACE:
            case CWScriptParser.IMPORT:
            case CWScriptParser.IMPLEMENTS:
            case CWScriptParser.EXTENDS:
            case CWScriptParser.ERROR:
            case CWScriptParser.EVENT:
            case CWScriptParser.INSTANTIATE:
            case CWScriptParser.EXEC:
            case CWScriptParser.QUERY:
            case CWScriptParser.MIGRATE:
            case CWScriptParser.FOR:
            case CWScriptParser.IN:
            case CWScriptParser.FROM:
            case CWScriptParser.STATE:
            case CWScriptParser.TIMES:
            case CWScriptParser.IF:
            case CWScriptParser.ELSE:
            case CWScriptParser.AND:
            case CWScriptParser.OR:
            case CWScriptParser.TRUE:
            case CWScriptParser.FALSE:
            case CWScriptParser.LET:
            case CWScriptParser.RETURN:
            case CWScriptParser.STRUCT:
            case CWScriptParser.ENUM:
            case CWScriptParser.TYPE:
            case CWScriptParser.EMIT:
            case CWScriptParser.Ident:
                this.state = 247;
                localctx.items = this.importList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 250;
            this.match(CWScriptParser.FROM);

            this.state = 251;
            localctx.fileName = this.match(CWScriptParser.StringLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_importList;
    this._importItem = null; // ImportItemContext
    this.importItems = []; // of ImportItemContexts
    return this;
}

ImportListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportListContext.prototype.constructor = ImportListContext;

ImportListContext.prototype.importItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportItemContext);
    } else {
        return this.getTypedRuleContext(ImportItemContext,i);
    }
};

ImportListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.ImportListContext = ImportListContext;

CWScriptParser.prototype.importList = function() {

    var localctx = new ImportListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CWScriptParser.RULE_importList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 255;
        localctx._importItem = this.importItem();
        localctx.importItems.push(localctx._importItem);
        this.state = 260;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 256;
                this.match(CWScriptParser.COMMA);

                this.state = 257;
                localctx._importItem = this.importItem();
                localctx.importItems.push(localctx._importItem); 
            }
            this.state = 262;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_importItem;
    this.symbol = null; // IdentContext
    this.alias = null; // IdentContext
    return this;
}

ImportItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportItemContext.prototype.constructor = ImportItemContext;

ImportItemContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

ImportItemContext.prototype.AS = function() {
    return this.getToken(CWScriptParser.AS, 0);
};




CWScriptParser.ImportItemContext = ImportItemContext;

CWScriptParser.prototype.importItem = function() {

    var localctx = new ImportItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CWScriptParser.RULE_importItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 263;
        localctx.symbol = this.ident();
        this.state = 266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.AS) {
            this.state = 264;
            this.match(CWScriptParser.AS);
            this.state = 265;
            localctx.alias = this.ident();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContractBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_contractBody;
    this.items = null; // ContractItemContext
    return this;
}

ContractBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractBodyContext.prototype.constructor = ContractBodyContext;

ContractBodyContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

ContractBodyContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

ContractBodyContext.prototype.contractItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractItemContext);
    } else {
        return this.getTypedRuleContext(ContractItemContext,i);
    }
};




CWScriptParser.ContractBodyContext = ContractBodyContext;

CWScriptParser.prototype.contractBody = function() {

    var localctx = new ContractBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CWScriptParser.RULE_contractBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(CWScriptParser.LBRACE);
        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE))) !== 0) || _la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 269;
            localctx.items = this.contractItem();
            this.state = 274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 275;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_interfaceBody;
    this.items = null; // InterfaceItemContext
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

InterfaceBodyContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

InterfaceBodyContext.prototype.interfaceItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceItemContext);
    } else {
        return this.getTypedRuleContext(InterfaceItemContext,i);
    }
};




CWScriptParser.InterfaceBodyContext = InterfaceBodyContext;

CWScriptParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CWScriptParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 277;
        this.match(CWScriptParser.LBRACE);
        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE))) !== 0) || _la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 278;
            localctx.items = this.interfaceItem();
            this.state = 283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 284;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContractItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_contractItem;
    return this;
}

ContractItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractItemContext.prototype.constructor = ContractItemContext;

ContractItemContext.prototype.typeDefn = function() {
    return this.getTypedRuleContext(TypeDefnContext,0);
};

ContractItemContext.prototype.errorDefn = function() {
    return this.getTypedRuleContext(ErrorDefnContext,0);
};

ContractItemContext.prototype.errorDefnBlock = function() {
    return this.getTypedRuleContext(ErrorDefnBlockContext,0);
};

ContractItemContext.prototype.eventDefn = function() {
    return this.getTypedRuleContext(EventDefnContext,0);
};

ContractItemContext.prototype.eventDefnBlock = function() {
    return this.getTypedRuleContext(EventDefnBlockContext,0);
};

ContractItemContext.prototype.stateDefn = function() {
    return this.getTypedRuleContext(StateDefnContext,0);
};

ContractItemContext.prototype.stateDefnBlock = function() {
    return this.getTypedRuleContext(StateDefnBlockContext,0);
};

ContractItemContext.prototype.instantiateDefn = function() {
    return this.getTypedRuleContext(InstantiateDefnContext,0);
};

ContractItemContext.prototype.execDefn = function() {
    return this.getTypedRuleContext(ExecDefnContext,0);
};

ContractItemContext.prototype.execDefnBlock = function() {
    return this.getTypedRuleContext(ExecDefnBlockContext,0);
};

ContractItemContext.prototype.queryDefn = function() {
    return this.getTypedRuleContext(QueryDefnContext,0);
};

ContractItemContext.prototype.queryDefnBlock = function() {
    return this.getTypedRuleContext(QueryDefnBlockContext,0);
};

ContractItemContext.prototype.migrateDefn = function() {
    return this.getTypedRuleContext(MigrateDefnContext,0);
};




CWScriptParser.ContractItemContext = ContractItemContext;

CWScriptParser.prototype.contractItem = function() {

    var localctx = new ContractItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CWScriptParser.RULE_contractItem);
    try {
        this.state = 299;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 286;
            this.typeDefn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 287;
            this.errorDefn();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 288;
            this.errorDefnBlock();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 289;
            this.eventDefn();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 290;
            this.eventDefnBlock();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 291;
            this.stateDefn();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 292;
            this.stateDefnBlock();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 293;
            this.instantiateDefn();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 294;
            this.execDefn();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 295;
            this.execDefnBlock();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 296;
            this.queryDefn();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 297;
            this.queryDefnBlock();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 298;
            this.migrateDefn();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_interfaceItem;
    return this;
}

InterfaceItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceItemContext.prototype.constructor = InterfaceItemContext;

InterfaceItemContext.prototype.typeDefn = function() {
    return this.getTypedRuleContext(TypeDefnContext,0);
};

InterfaceItemContext.prototype.errorDefn = function() {
    return this.getTypedRuleContext(ErrorDefnContext,0);
};

InterfaceItemContext.prototype.errorDefnBlock = function() {
    return this.getTypedRuleContext(ErrorDefnBlockContext,0);
};

InterfaceItemContext.prototype.eventDefn = function() {
    return this.getTypedRuleContext(EventDefnContext,0);
};

InterfaceItemContext.prototype.eventDefnBlock = function() {
    return this.getTypedRuleContext(EventDefnBlockContext,0);
};

InterfaceItemContext.prototype.stateDefn = function() {
    return this.getTypedRuleContext(StateDefnContext,0);
};

InterfaceItemContext.prototype.stateDefnBlock = function() {
    return this.getTypedRuleContext(StateDefnBlockContext,0);
};

InterfaceItemContext.prototype.instantiateDecl = function() {
    return this.getTypedRuleContext(InstantiateDeclContext,0);
};

InterfaceItemContext.prototype.execDecl = function() {
    return this.getTypedRuleContext(ExecDeclContext,0);
};

InterfaceItemContext.prototype.execDeclBlock = function() {
    return this.getTypedRuleContext(ExecDeclBlockContext,0);
};

InterfaceItemContext.prototype.queryDecl = function() {
    return this.getTypedRuleContext(QueryDeclContext,0);
};

InterfaceItemContext.prototype.queryDeclBlock = function() {
    return this.getTypedRuleContext(QueryDeclBlockContext,0);
};

InterfaceItemContext.prototype.migrateDecl = function() {
    return this.getTypedRuleContext(MigrateDeclContext,0);
};




CWScriptParser.InterfaceItemContext = InterfaceItemContext;

CWScriptParser.prototype.interfaceItem = function() {

    var localctx = new InterfaceItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CWScriptParser.RULE_interfaceItem);
    try {
        this.state = 314;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 301;
            this.typeDefn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 302;
            this.errorDefn();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 303;
            this.errorDefnBlock();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 304;
            this.eventDefn();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 305;
            this.eventDefnBlock();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 306;
            this.stateDefn();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 307;
            this.stateDefnBlock();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 308;
            this.instantiateDecl();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 309;
            this.execDecl();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 310;
            this.execDeclBlock();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 311;
            this.queryDecl();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 312;
            this.queryDeclBlock();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 313;
            this.migrateDecl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_errorDefn;
    this.spec = null; // CwspecContext
    return this;
}

ErrorDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorDefnContext.prototype.constructor = ErrorDefnContext;

ErrorDefnContext.prototype.ERROR = function() {
    return this.getToken(CWScriptParser.ERROR, 0);
};

ErrorDefnContext.prototype.enumVariant = function() {
    return this.getTypedRuleContext(EnumVariantContext,0);
};

ErrorDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.ErrorDefnContext = ErrorDefnContext;

CWScriptParser.prototype.errorDefn = function() {

    var localctx = new ErrorDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CWScriptParser.RULE_errorDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 316;
            localctx.spec = this.cwspec();
        }

        this.state = 319;
        this.match(CWScriptParser.ERROR);
        this.state = 320;
        this.enumVariant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorDefnBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_errorDefnBlock;
    return this;
}

ErrorDefnBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorDefnBlockContext.prototype.constructor = ErrorDefnBlockContext;

ErrorDefnBlockContext.prototype.ERROR = function() {
    return this.getToken(CWScriptParser.ERROR, 0);
};

ErrorDefnBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

ErrorDefnBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

ErrorDefnBlockContext.prototype.errorDefnBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorDefnBlock_itemContext);
    } else {
        return this.getTypedRuleContext(ErrorDefnBlock_itemContext,i);
    }
};




CWScriptParser.ErrorDefnBlockContext = ErrorDefnBlockContext;

CWScriptParser.prototype.errorDefnBlock = function() {

    var localctx = new ErrorDefnBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CWScriptParser.RULE_errorDefnBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.match(CWScriptParser.ERROR);
        this.state = 323;
        this.match(CWScriptParser.LBRACE);
        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 324;
            this.errorDefnBlock_item();
            this.state = 329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 330;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorDefnBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_errorDefnBlock_item;
    this.spec = null; // CwspecContext
    return this;
}

ErrorDefnBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorDefnBlock_itemContext.prototype.constructor = ErrorDefnBlock_itemContext;

ErrorDefnBlock_itemContext.prototype.enumVariant = function() {
    return this.getTypedRuleContext(EnumVariantContext,0);
};

ErrorDefnBlock_itemContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.ErrorDefnBlock_itemContext = ErrorDefnBlock_itemContext;

CWScriptParser.prototype.errorDefnBlock_item = function() {

    var localctx = new ErrorDefnBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CWScriptParser.RULE_errorDefnBlock_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 332;
            localctx.spec = this.cwspec();
        }

        this.state = 335;
        this.enumVariant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_eventDefn;
    this.spec = null; // CwspecContext
    return this;
}

EventDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefnContext.prototype.constructor = EventDefnContext;

EventDefnContext.prototype.EVENT = function() {
    return this.getToken(CWScriptParser.EVENT, 0);
};

EventDefnContext.prototype.enumVariant = function() {
    return this.getTypedRuleContext(EnumVariantContext,0);
};

EventDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.EventDefnContext = EventDefnContext;

CWScriptParser.prototype.eventDefn = function() {

    var localctx = new EventDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CWScriptParser.RULE_eventDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 337;
            localctx.spec = this.cwspec();
        }

        this.state = 340;
        this.match(CWScriptParser.EVENT);
        this.state = 341;
        this.enumVariant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDefnBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_eventDefnBlock;
    return this;
}

EventDefnBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefnBlockContext.prototype.constructor = EventDefnBlockContext;

EventDefnBlockContext.prototype.EVENT = function() {
    return this.getToken(CWScriptParser.EVENT, 0);
};

EventDefnBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

EventDefnBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

EventDefnBlockContext.prototype.eventDefnBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventDefnBlock_itemContext);
    } else {
        return this.getTypedRuleContext(EventDefnBlock_itemContext,i);
    }
};




CWScriptParser.EventDefnBlockContext = EventDefnBlockContext;

CWScriptParser.prototype.eventDefnBlock = function() {

    var localctx = new EventDefnBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CWScriptParser.RULE_eventDefnBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(CWScriptParser.EVENT);
        this.state = 344;
        this.match(CWScriptParser.LBRACE);
        this.state = 348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 345;
            this.eventDefnBlock_item();
            this.state = 350;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 351;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDefnBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_eventDefnBlock_item;
    this.spec = null; // CwspecContext
    return this;
}

EventDefnBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefnBlock_itemContext.prototype.constructor = EventDefnBlock_itemContext;

EventDefnBlock_itemContext.prototype.enumVariant = function() {
    return this.getTypedRuleContext(EnumVariantContext,0);
};

EventDefnBlock_itemContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.EventDefnBlock_itemContext = EventDefnBlock_itemContext;

CWScriptParser.prototype.eventDefnBlock_item = function() {

    var localctx = new EventDefnBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CWScriptParser.RULE_eventDefnBlock_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 353;
            localctx.spec = this.cwspec();
        }

        this.state = 356;
        this.enumVariant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_stateDefn;
    return this;
}

StateDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateDefnContext.prototype.constructor = StateDefnContext;


 
StateDefnContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StateMapDefnContext(parser, ctx) {
	StateDefnContext.call(this, parser);
    this.spec = null; // CwspecContext;
    this.map = null; // MapDefnContext;
    StateDefnContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StateMapDefnContext.prototype = Object.create(StateDefnContext.prototype);
StateMapDefnContext.prototype.constructor = StateMapDefnContext;

CWScriptParser.StateMapDefnContext = StateMapDefnContext;

StateMapDefnContext.prototype.STATE = function() {
    return this.getToken(CWScriptParser.STATE, 0);
};

StateMapDefnContext.prototype.mapDefn = function() {
    return this.getTypedRuleContext(MapDefnContext,0);
};

StateMapDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};

function StateItemDefnContext(parser, ctx) {
	StateDefnContext.call(this, parser);
    this.spec = null; // CwspecContext;
    this.item = null; // ItemDefnContext;
    StateDefnContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StateItemDefnContext.prototype = Object.create(StateDefnContext.prototype);
StateItemDefnContext.prototype.constructor = StateItemDefnContext;

CWScriptParser.StateItemDefnContext = StateItemDefnContext;

StateItemDefnContext.prototype.STATE = function() {
    return this.getToken(CWScriptParser.STATE, 0);
};

StateItemDefnContext.prototype.itemDefn = function() {
    return this.getTypedRuleContext(ItemDefnContext,0);
};

StateItemDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};


CWScriptParser.StateDefnContext = StateDefnContext;

CWScriptParser.prototype.stateDefn = function() {

    var localctx = new StateDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CWScriptParser.RULE_stateDefn);
    var _la = 0; // Token type
    try {
        this.state = 368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StateItemDefnContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
                this.state = 358;
                localctx.spec = this.cwspec();
            }

            this.state = 361;
            this.match(CWScriptParser.STATE);

            this.state = 362;
            localctx.item = this.itemDefn();
            break;

        case 2:
            localctx = new StateMapDefnContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
                this.state = 363;
                localctx.spec = this.cwspec();
            }

            this.state = 366;
            this.match(CWScriptParser.STATE);
            this.state = 367;
            localctx.map = this.mapDefn();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateDefnBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_stateDefnBlock;
    return this;
}

StateDefnBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateDefnBlockContext.prototype.constructor = StateDefnBlockContext;

StateDefnBlockContext.prototype.STATE = function() {
    return this.getToken(CWScriptParser.STATE, 0);
};

StateDefnBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

StateDefnBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

StateDefnBlockContext.prototype.stateDefnBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateDefnBlock_itemContext);
    } else {
        return this.getTypedRuleContext(StateDefnBlock_itemContext,i);
    }
};




CWScriptParser.StateDefnBlockContext = StateDefnBlockContext;

CWScriptParser.prototype.stateDefnBlock = function() {

    var localctx = new StateDefnBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CWScriptParser.RULE_stateDefnBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(CWScriptParser.STATE);
        this.state = 371;
        this.match(CWScriptParser.LBRACE);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 372;
            this.stateDefnBlock_item();
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 378;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateDefnBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_stateDefnBlock_item;
    return this;
}

StateDefnBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateDefnBlock_itemContext.prototype.constructor = StateDefnBlock_itemContext;


 
StateDefnBlock_itemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StateBlockItemDefnContext(parser, ctx) {
	StateDefnBlock_itemContext.call(this, parser);
    this.spec = null; // CwspecContext;
    this.item = null; // ItemDefnContext;
    StateDefnBlock_itemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StateBlockItemDefnContext.prototype = Object.create(StateDefnBlock_itemContext.prototype);
StateBlockItemDefnContext.prototype.constructor = StateBlockItemDefnContext;

CWScriptParser.StateBlockItemDefnContext = StateBlockItemDefnContext;

StateBlockItemDefnContext.prototype.itemDefn = function() {
    return this.getTypedRuleContext(ItemDefnContext,0);
};

StateBlockItemDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};

function StateBlockMapDefnContext(parser, ctx) {
	StateDefnBlock_itemContext.call(this, parser);
    this.spec = null; // CwspecContext;
    this.map = null; // MapDefnContext;
    StateDefnBlock_itemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StateBlockMapDefnContext.prototype = Object.create(StateDefnBlock_itemContext.prototype);
StateBlockMapDefnContext.prototype.constructor = StateBlockMapDefnContext;

CWScriptParser.StateBlockMapDefnContext = StateBlockMapDefnContext;

StateBlockMapDefnContext.prototype.mapDefn = function() {
    return this.getTypedRuleContext(MapDefnContext,0);
};

StateBlockMapDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};


CWScriptParser.StateDefnBlock_itemContext = StateDefnBlock_itemContext;

CWScriptParser.prototype.stateDefnBlock_item = function() {

    var localctx = new StateDefnBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CWScriptParser.RULE_stateDefnBlock_item);
    var _la = 0; // Token type
    try {
        this.state = 388;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StateBlockItemDefnContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
                this.state = 380;
                localctx.spec = this.cwspec();
            }

            this.state = 383;
            localctx.item = this.itemDefn();
            break;

        case 2:
            localctx = new StateBlockMapDefnContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
                this.state = 384;
                localctx.spec = this.cwspec();
            }

            this.state = 387;
            localctx.map = this.mapDefn();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ItemDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_itemDefn;
    this.key = null; // IdentContext
    this.valueType = null; // TypeExprContext
    return this;
}

ItemDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ItemDefnContext.prototype.constructor = ItemDefnContext;

ItemDefnContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

ItemDefnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ItemDefnContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};




CWScriptParser.ItemDefnContext = ItemDefnContext;

CWScriptParser.prototype.itemDefn = function() {

    var localctx = new ItemDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CWScriptParser.RULE_itemDefn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        localctx.key = this.ident();
        this.state = 391;
        this.match(CWScriptParser.COLON);

        this.state = 392;
        localctx.valueType = this.typeExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_mapDefn;
    this.key = null; // IdentContext
    this.mapKeys = null; // MapDefnKeysContext
    this.valueType = null; // TypeExprContext
    return this;
}

MapDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapDefnContext.prototype.constructor = MapDefnContext;

MapDefnContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

MapDefnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MapDefnContext.prototype.mapDefnKeys = function() {
    return this.getTypedRuleContext(MapDefnKeysContext,0);
};

MapDefnContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};




CWScriptParser.MapDefnContext = MapDefnContext;

CWScriptParser.prototype.mapDefn = function() {

    var localctx = new MapDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CWScriptParser.RULE_mapDefn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        localctx.key = this.ident();

        this.state = 395;
        localctx.mapKeys = this.mapDefnKeys();
        this.state = 396;
        this.match(CWScriptParser.COLON);

        this.state = 397;
        localctx.valueType = this.typeExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapDefnKeysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_mapDefnKeys;
    return this;
}

MapDefnKeysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapDefnKeysContext.prototype.constructor = MapDefnKeysContext;

MapDefnKeysContext.prototype.mapDefnKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MapDefnKeyContext);
    } else {
        return this.getTypedRuleContext(MapDefnKeyContext,i);
    }
};




CWScriptParser.MapDefnKeysContext = MapDefnKeysContext;

CWScriptParser.prototype.mapDefnKeys = function() {

    var localctx = new MapDefnKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CWScriptParser.RULE_mapDefnKeys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 399;
            this.mapDefnKey();
            this.state = 402; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CWScriptParser.LBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapDefnKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_mapDefnKey;
    this.keyName = null; // IdentContext
    this.keyType = null; // TypeExprContext
    return this;
}

MapDefnKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapDefnKeyContext.prototype.constructor = MapDefnKeyContext;

MapDefnKeyContext.prototype.LBRACK = function() {
    return this.getToken(CWScriptParser.LBRACK, 0);
};

MapDefnKeyContext.prototype.RBRACK = function() {
    return this.getToken(CWScriptParser.RBRACK, 0);
};

MapDefnKeyContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

MapDefnKeyContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

MapDefnKeyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




CWScriptParser.MapDefnKeyContext = MapDefnKeyContext;

CWScriptParser.prototype.mapDefnKey = function() {

    var localctx = new MapDefnKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CWScriptParser.RULE_mapDefnKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        this.match(CWScriptParser.LBRACK);
        this.state = 408;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        if(la_===1) {
            this.state = 405;
            localctx.keyName = this.ident();
            this.state = 406;
            this.match(CWScriptParser.COLON);

        }

        this.state = 410;
        localctx.keyType = this.typeExpr(0);
        this.state = 411;
        this.match(CWScriptParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstantiateDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_instantiateDefn;
    this.spec = null; // CwspecContext
    return this;
}

InstantiateDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstantiateDefnContext.prototype.constructor = InstantiateDefnContext;

InstantiateDefnContext.prototype.INSTANTIATE = function() {
    return this.getToken(CWScriptParser.INSTANTIATE, 0);
};

InstantiateDefnContext.prototype.fnArgs = function() {
    return this.getTypedRuleContext(FnArgsContext,0);
};

InstantiateDefnContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};

InstantiateDefnContext.prototype.fnType = function() {
    return this.getTypedRuleContext(FnTypeContext,0);
};

InstantiateDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.InstantiateDefnContext = InstantiateDefnContext;

CWScriptParser.prototype.instantiateDefn = function() {

    var localctx = new InstantiateDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CWScriptParser.RULE_instantiateDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 413;
            localctx.spec = this.cwspec();
        }

        this.state = 416;
        this.match(CWScriptParser.INSTANTIATE);
        this.state = 417;
        this.fnArgs();
        this.state = 419;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.ARROW) {
            this.state = 418;
            this.fnType();
        }

        this.state = 421;
        this.fnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstantiateDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_instantiateDecl;
    this.spec = null; // CwspecContext
    return this;
}

InstantiateDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstantiateDeclContext.prototype.constructor = InstantiateDeclContext;

InstantiateDeclContext.prototype.INSTANTIATE = function() {
    return this.getToken(CWScriptParser.INSTANTIATE, 0);
};

InstantiateDeclContext.prototype.fnArgs = function() {
    return this.getTypedRuleContext(FnArgsContext,0);
};

InstantiateDeclContext.prototype.fnType = function() {
    return this.getTypedRuleContext(FnTypeContext,0);
};

InstantiateDeclContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.InstantiateDeclContext = InstantiateDeclContext;

CWScriptParser.prototype.instantiateDecl = function() {

    var localctx = new InstantiateDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CWScriptParser.RULE_instantiateDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 423;
            localctx.spec = this.cwspec();
        }

        this.state = 426;
        this.match(CWScriptParser.INSTANTIATE);
        this.state = 427;
        this.fnArgs();
        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.ARROW) {
            this.state = 428;
            this.fnType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_execDefn;
    this.spec = null; // CwspecContext
    return this;
}

ExecDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecDefnContext.prototype.constructor = ExecDefnContext;

ExecDefnContext.prototype.EXEC = function() {
    return this.getToken(CWScriptParser.EXEC, 0);
};

ExecDefnContext.prototype.namedFnDefn = function() {
    return this.getTypedRuleContext(NamedFnDefnContext,0);
};

ExecDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.ExecDefnContext = ExecDefnContext;

CWScriptParser.prototype.execDefn = function() {

    var localctx = new ExecDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CWScriptParser.RULE_execDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 431;
            localctx.spec = this.cwspec();
        }

        this.state = 434;
        this.match(CWScriptParser.EXEC);
        this.state = 435;
        this.namedFnDefn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecDefnBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_execDefnBlock;
    return this;
}

ExecDefnBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecDefnBlockContext.prototype.constructor = ExecDefnBlockContext;

ExecDefnBlockContext.prototype.EXEC = function() {
    return this.getToken(CWScriptParser.EXEC, 0);
};

ExecDefnBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

ExecDefnBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

ExecDefnBlockContext.prototype.execDefnBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExecDefnBlock_itemContext);
    } else {
        return this.getTypedRuleContext(ExecDefnBlock_itemContext,i);
    }
};




CWScriptParser.ExecDefnBlockContext = ExecDefnBlockContext;

CWScriptParser.prototype.execDefnBlock = function() {

    var localctx = new ExecDefnBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CWScriptParser.RULE_execDefnBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        this.match(CWScriptParser.EXEC);
        this.state = 438;
        this.match(CWScriptParser.LBRACE);
        this.state = 442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 439;
            this.execDefnBlock_item();
            this.state = 444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 445;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecDefnBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_execDefnBlock_item;
    this.spec = null; // CwspecContext
    return this;
}

ExecDefnBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecDefnBlock_itemContext.prototype.constructor = ExecDefnBlock_itemContext;

ExecDefnBlock_itemContext.prototype.namedFnDefn = function() {
    return this.getTypedRuleContext(NamedFnDefnContext,0);
};

ExecDefnBlock_itemContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.ExecDefnBlock_itemContext = ExecDefnBlock_itemContext;

CWScriptParser.prototype.execDefnBlock_item = function() {

    var localctx = new ExecDefnBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CWScriptParser.RULE_execDefnBlock_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 447;
            localctx.spec = this.cwspec();
        }

        this.state = 450;
        this.namedFnDefn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_execDecl;
    this.spec = null; // CwspecContext
    return this;
}

ExecDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecDeclContext.prototype.constructor = ExecDeclContext;

ExecDeclContext.prototype.EXEC = function() {
    return this.getToken(CWScriptParser.EXEC, 0);
};

ExecDeclContext.prototype.namedFnDecl = function() {
    return this.getTypedRuleContext(NamedFnDeclContext,0);
};

ExecDeclContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.ExecDeclContext = ExecDeclContext;

CWScriptParser.prototype.execDecl = function() {

    var localctx = new ExecDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CWScriptParser.RULE_execDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 452;
            localctx.spec = this.cwspec();
        }

        this.state = 455;
        this.match(CWScriptParser.EXEC);
        this.state = 456;
        this.namedFnDecl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecDeclBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_execDeclBlock;
    return this;
}

ExecDeclBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecDeclBlockContext.prototype.constructor = ExecDeclBlockContext;

ExecDeclBlockContext.prototype.EXEC = function() {
    return this.getToken(CWScriptParser.EXEC, 0);
};

ExecDeclBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

ExecDeclBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

ExecDeclBlockContext.prototype.execDeclBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExecDeclBlock_itemContext);
    } else {
        return this.getTypedRuleContext(ExecDeclBlock_itemContext,i);
    }
};




CWScriptParser.ExecDeclBlockContext = ExecDeclBlockContext;

CWScriptParser.prototype.execDeclBlock = function() {

    var localctx = new ExecDeclBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CWScriptParser.RULE_execDeclBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 458;
        this.match(CWScriptParser.EXEC);
        this.state = 459;
        this.match(CWScriptParser.LBRACE);
        this.state = 463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 460;
            this.execDeclBlock_item();
            this.state = 465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 466;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecDeclBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_execDeclBlock_item;
    this.spec = null; // CwspecContext
    return this;
}

ExecDeclBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecDeclBlock_itemContext.prototype.constructor = ExecDeclBlock_itemContext;

ExecDeclBlock_itemContext.prototype.namedFnDecl = function() {
    return this.getTypedRuleContext(NamedFnDeclContext,0);
};

ExecDeclBlock_itemContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.ExecDeclBlock_itemContext = ExecDeclBlock_itemContext;

CWScriptParser.prototype.execDeclBlock_item = function() {

    var localctx = new ExecDeclBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CWScriptParser.RULE_execDeclBlock_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 468;
            localctx.spec = this.cwspec();
        }

        this.state = 471;
        this.namedFnDecl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_queryDefn;
    this.spec = null; // CwspecContext
    return this;
}

QueryDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryDefnContext.prototype.constructor = QueryDefnContext;

QueryDefnContext.prototype.QUERY = function() {
    return this.getToken(CWScriptParser.QUERY, 0);
};

QueryDefnContext.prototype.namedFnDefn = function() {
    return this.getTypedRuleContext(NamedFnDefnContext,0);
};

QueryDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.QueryDefnContext = QueryDefnContext;

CWScriptParser.prototype.queryDefn = function() {

    var localctx = new QueryDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CWScriptParser.RULE_queryDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 473;
            localctx.spec = this.cwspec();
        }

        this.state = 476;
        this.match(CWScriptParser.QUERY);
        this.state = 477;
        this.namedFnDefn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryDefnBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_queryDefnBlock;
    return this;
}

QueryDefnBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryDefnBlockContext.prototype.constructor = QueryDefnBlockContext;

QueryDefnBlockContext.prototype.QUERY = function() {
    return this.getToken(CWScriptParser.QUERY, 0);
};

QueryDefnBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

QueryDefnBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

QueryDefnBlockContext.prototype.queryDefnBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryDefnBlock_itemContext);
    } else {
        return this.getTypedRuleContext(QueryDefnBlock_itemContext,i);
    }
};




CWScriptParser.QueryDefnBlockContext = QueryDefnBlockContext;

CWScriptParser.prototype.queryDefnBlock = function() {

    var localctx = new QueryDefnBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CWScriptParser.RULE_queryDefnBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.match(CWScriptParser.QUERY);
        this.state = 480;
        this.match(CWScriptParser.LBRACE);
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 481;
            this.queryDefnBlock_item();
            this.state = 486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 487;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryDefnBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_queryDefnBlock_item;
    this.spec = null; // CwspecContext
    return this;
}

QueryDefnBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryDefnBlock_itemContext.prototype.constructor = QueryDefnBlock_itemContext;

QueryDefnBlock_itemContext.prototype.namedFnDefn = function() {
    return this.getTypedRuleContext(NamedFnDefnContext,0);
};

QueryDefnBlock_itemContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.QueryDefnBlock_itemContext = QueryDefnBlock_itemContext;

CWScriptParser.prototype.queryDefnBlock_item = function() {

    var localctx = new QueryDefnBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CWScriptParser.RULE_queryDefnBlock_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 489;
            localctx.spec = this.cwspec();
        }

        this.state = 492;
        this.namedFnDefn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_queryDecl;
    this.spec = null; // CwspecContext
    return this;
}

QueryDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryDeclContext.prototype.constructor = QueryDeclContext;

QueryDeclContext.prototype.QUERY = function() {
    return this.getToken(CWScriptParser.QUERY, 0);
};

QueryDeclContext.prototype.namedFnDecl = function() {
    return this.getTypedRuleContext(NamedFnDeclContext,0);
};

QueryDeclContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.QueryDeclContext = QueryDeclContext;

CWScriptParser.prototype.queryDecl = function() {

    var localctx = new QueryDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CWScriptParser.RULE_queryDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 494;
            localctx.spec = this.cwspec();
        }

        this.state = 497;
        this.match(CWScriptParser.QUERY);
        this.state = 498;
        this.namedFnDecl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryDeclBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_queryDeclBlock;
    return this;
}

QueryDeclBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryDeclBlockContext.prototype.constructor = QueryDeclBlockContext;

QueryDeclBlockContext.prototype.QUERY = function() {
    return this.getToken(CWScriptParser.QUERY, 0);
};

QueryDeclBlockContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

QueryDeclBlockContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

QueryDeclBlockContext.prototype.queryDeclBlock_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryDeclBlock_itemContext);
    } else {
        return this.getTypedRuleContext(QueryDeclBlock_itemContext,i);
    }
};




CWScriptParser.QueryDeclBlockContext = QueryDeclBlockContext;

CWScriptParser.prototype.queryDeclBlock = function() {

    var localctx = new QueryDeclBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CWScriptParser.RULE_queryDeclBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.match(CWScriptParser.QUERY);
        this.state = 501;
        this.match(CWScriptParser.LBRACE);
        this.state = 505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 502;
            this.queryDeclBlock_item();
            this.state = 507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 508;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryDeclBlock_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_queryDeclBlock_item;
    this.spec = null; // CwspecContext
    return this;
}

QueryDeclBlock_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryDeclBlock_itemContext.prototype.constructor = QueryDeclBlock_itemContext;

QueryDeclBlock_itemContext.prototype.namedFnDecl = function() {
    return this.getTypedRuleContext(NamedFnDeclContext,0);
};

QueryDeclBlock_itemContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.QueryDeclBlock_itemContext = QueryDeclBlock_itemContext;

CWScriptParser.prototype.queryDeclBlock_item = function() {

    var localctx = new QueryDeclBlock_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CWScriptParser.RULE_queryDeclBlock_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 510;
            localctx.spec = this.cwspec();
        }

        this.state = 513;
        this.namedFnDecl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MigrateDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_migrateDefn;
    this.spec = null; // CwspecContext
    return this;
}

MigrateDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MigrateDefnContext.prototype.constructor = MigrateDefnContext;

MigrateDefnContext.prototype.MIGRATE = function() {
    return this.getToken(CWScriptParser.MIGRATE, 0);
};

MigrateDefnContext.prototype.fnArgs = function() {
    return this.getTypedRuleContext(FnArgsContext,0);
};

MigrateDefnContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};

MigrateDefnContext.prototype.fnType = function() {
    return this.getTypedRuleContext(FnTypeContext,0);
};

MigrateDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.MigrateDefnContext = MigrateDefnContext;

CWScriptParser.prototype.migrateDefn = function() {

    var localctx = new MigrateDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CWScriptParser.RULE_migrateDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 515;
            localctx.spec = this.cwspec();
        }

        this.state = 518;
        this.match(CWScriptParser.MIGRATE);
        this.state = 519;
        this.fnArgs();
        this.state = 521;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.ARROW) {
            this.state = 520;
            this.fnType();
        }

        this.state = 523;
        this.fnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MigrateDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_migrateDecl;
    this.spec = null; // CwspecContext
    return this;
}

MigrateDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MigrateDeclContext.prototype.constructor = MigrateDeclContext;

MigrateDeclContext.prototype.MIGRATE = function() {
    return this.getToken(CWScriptParser.MIGRATE, 0);
};

MigrateDeclContext.prototype.fnArgs = function() {
    return this.getTypedRuleContext(FnArgsContext,0);
};

MigrateDeclContext.prototype.fnType = function() {
    return this.getTypedRuleContext(FnTypeContext,0);
};

MigrateDeclContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.MigrateDeclContext = MigrateDeclContext;

CWScriptParser.prototype.migrateDecl = function() {

    var localctx = new MigrateDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CWScriptParser.RULE_migrateDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 525;
            localctx.spec = this.cwspec();
        }

        this.state = 528;
        this.match(CWScriptParser.MIGRATE);
        this.state = 529;
        this.fnArgs();
        this.state = 531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.ARROW) {
            this.state = 530;
            this.fnType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumVariantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_enumVariant;
    return this;
}

EnumVariantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumVariantContext.prototype.constructor = EnumVariantContext;

EnumVariantContext.prototype.enumVariant_struct = function() {
    return this.getTypedRuleContext(EnumVariant_structContext,0);
};

EnumVariantContext.prototype.enumVariant_tuple = function() {
    return this.getTypedRuleContext(EnumVariant_tupleContext,0);
};

EnumVariantContext.prototype.enumVariant_unit = function() {
    return this.getTypedRuleContext(EnumVariant_unitContext,0);
};




CWScriptParser.EnumVariantContext = EnumVariantContext;

CWScriptParser.prototype.enumVariant = function() {

    var localctx = new EnumVariantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CWScriptParser.RULE_enumVariant);
    try {
        this.state = 536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 533;
            this.enumVariant_struct();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 534;
            this.enumVariant_tuple();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 535;
            this.enumVariant_unit();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumVariant_structContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_enumVariant_struct;
    this.name = null; // IdentContext
    return this;
}

EnumVariant_structContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumVariant_structContext.prototype.constructor = EnumVariant_structContext;

EnumVariant_structContext.prototype.parenStructMembers = function() {
    return this.getTypedRuleContext(ParenStructMembersContext,0);
};

EnumVariant_structContext.prototype.curlyStructMembers = function() {
    return this.getTypedRuleContext(CurlyStructMembersContext,0);
};

EnumVariant_structContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




CWScriptParser.EnumVariant_structContext = EnumVariant_structContext;

CWScriptParser.prototype.enumVariant_struct = function() {

    var localctx = new EnumVariant_structContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CWScriptParser.RULE_enumVariant_struct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 538;
        localctx.name = this.ident();
        this.state = 541;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CWScriptParser.LPAREN:
            this.state = 539;
            this.parenStructMembers();
            break;
        case CWScriptParser.LBRACE:
            this.state = 540;
            this.curlyStructMembers();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumVariant_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_enumVariant_tuple;
    this.name = null; // IdentContext
    this.members = null; // TupleMembersContext
    return this;
}

EnumVariant_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumVariant_tupleContext.prototype.constructor = EnumVariant_tupleContext;

EnumVariant_tupleContext.prototype.tupleMembers = function() {
    return this.getTypedRuleContext(TupleMembersContext,0);
};

EnumVariant_tupleContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




CWScriptParser.EnumVariant_tupleContext = EnumVariant_tupleContext;

CWScriptParser.prototype.enumVariant_tuple = function() {

    var localctx = new EnumVariant_tupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CWScriptParser.RULE_enumVariant_tuple);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        localctx.name = this.ident();
        this.state = 544;
        localctx.members = this.tupleMembers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumVariant_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_enumVariant_unit;
    this.name = null; // IdentContext
    return this;
}

EnumVariant_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumVariant_unitContext.prototype.constructor = EnumVariant_unitContext;

EnumVariant_unitContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




CWScriptParser.EnumVariant_unitContext = EnumVariant_unitContext;

CWScriptParser.prototype.enumVariant_unit = function() {

    var localctx = new EnumVariant_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CWScriptParser.RULE_enumVariant_unit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        localctx.name = this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleMembersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_tupleMembers;
    return this;
}

TupleMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleMembersContext.prototype.constructor = TupleMembersContext;

TupleMembersContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

TupleMembersContext.prototype.typeExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeExprContext);
    } else {
        return this.getTypedRuleContext(TypeExprContext,i);
    }
};

TupleMembersContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

TupleMembersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.TupleMembersContext = TupleMembersContext;

CWScriptParser.prototype.tupleMembers = function() {

    var localctx = new TupleMembersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CWScriptParser.RULE_tupleMembers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.match(CWScriptParser.LPAREN);
        this.state = 549;
        this.typeExpr(0);
        this.state = 554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CWScriptParser.COMMA) {
            this.state = 550;
            this.match(CWScriptParser.COMMA);
            this.state = 551;
            this.typeExpr(0);
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 557;
        this.match(CWScriptParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParenStructMembersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_parenStructMembers;
    return this;
}

ParenStructMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenStructMembersContext.prototype.constructor = ParenStructMembersContext;

ParenStructMembersContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

ParenStructMembersContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

ParenStructMembersContext.prototype.structMember = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructMemberContext);
    } else {
        return this.getTypedRuleContext(StructMemberContext,i);
    }
};

ParenStructMembersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.ParenStructMembersContext = ParenStructMembersContext;

CWScriptParser.prototype.parenStructMembers = function() {

    var localctx = new ParenStructMembersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CWScriptParser.RULE_parenStructMembers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(CWScriptParser.LPAREN);
        this.state = 568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 560;
            this.structMember();
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CWScriptParser.COMMA) {
                this.state = 561;
                this.match(CWScriptParser.COMMA);
                this.state = 562;
                this.structMember();
                this.state = 567;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 570;
        this.match(CWScriptParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CurlyStructMembersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_curlyStructMembers;
    return this;
}

CurlyStructMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CurlyStructMembersContext.prototype.constructor = CurlyStructMembersContext;

CurlyStructMembersContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

CurlyStructMembersContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

CurlyStructMembersContext.prototype.structMember = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructMemberContext);
    } else {
        return this.getTypedRuleContext(StructMemberContext,i);
    }
};

CurlyStructMembersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.CurlyStructMembersContext = CurlyStructMembersContext;

CWScriptParser.prototype.curlyStructMembers = function() {

    var localctx = new CurlyStructMembersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CWScriptParser.RULE_curlyStructMembers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(CWScriptParser.LBRACE);
        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) !== 0)) {
            this.state = 573;
            this.structMember();
            this.state = 578;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 574;
                    this.match(CWScriptParser.COMMA);
                    this.state = 575;
                    this.structMember(); 
                }
                this.state = 580;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            this.state = 582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.COMMA) {
                this.state = 581;
                this.match(CWScriptParser.COMMA);
            }

        }

        this.state = 586;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructMemberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_structMember;
    this.spec = null; // CwspecContext
    this.name = null; // IdentContext
    this.option = null; // Token
    this.valueType = null; // TypeExprContext
    return this;
}

StructMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructMemberContext.prototype.constructor = StructMemberContext;

StructMemberContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

StructMemberContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

StructMemberContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

StructMemberContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};

StructMemberContext.prototype.QUEST = function() {
    return this.getToken(CWScriptParser.QUEST, 0);
};




CWScriptParser.StructMemberContext = StructMemberContext;

CWScriptParser.prototype.structMember = function() {

    var localctx = new StructMemberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CWScriptParser.RULE_structMember);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 588;
            localctx.spec = this.cwspec();
        }

        this.state = 591;
        localctx.name = this.ident();
        this.state = 593;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.QUEST) {
            this.state = 592;
            localctx.option = this.match(CWScriptParser.QUEST);
        }

        this.state = 595;
        this.match(CWScriptParser.COLON);

        this.state = 596;
        localctx.valueType = this.typeExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_typeExpr;
    return this;
}

TypeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeExprContext.prototype.constructor = TypeExprContext;


 
TypeExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RefTypeExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RefTypeExprContext.prototype = Object.create(TypeExprContext.prototype);
RefTypeExprContext.prototype.constructor = RefTypeExprContext;

CWScriptParser.RefTypeExprContext = RefTypeExprContext;

RefTypeExprContext.prototype.AMP = function() {
    return this.getToken(CWScriptParser.AMP, 0);
};

RefTypeExprContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

function ParamzdTypeExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParamzdTypeExprContext.prototype = Object.create(TypeExprContext.prototype);
ParamzdTypeExprContext.prototype.constructor = ParamzdTypeExprContext;

CWScriptParser.ParamzdTypeExprContext = ParamzdTypeExprContext;

ParamzdTypeExprContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

ParamzdTypeExprContext.prototype.typeParam = function() {
    return this.getTypedRuleContext(TypeParamContext,0);
};

function TupleTypeExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    this._typeExpr = null; // TypeExprContext;
    this.members = []; // of TypeExprContexts;
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleTypeExprContext.prototype = Object.create(TypeExprContext.prototype);
TupleTypeExprContext.prototype.constructor = TupleTypeExprContext;

CWScriptParser.TupleTypeExprContext = TupleTypeExprContext;

TupleTypeExprContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

TupleTypeExprContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

TupleTypeExprContext.prototype.typeExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeExprContext);
    } else {
        return this.getTypedRuleContext(TypeExprContext,i);
    }
};

TupleTypeExprContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};


function ShortOptionTypeExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShortOptionTypeExprContext.prototype = Object.create(TypeExprContext.prototype);
ShortOptionTypeExprContext.prototype.constructor = ShortOptionTypeExprContext;

CWScriptParser.ShortOptionTypeExprContext = ShortOptionTypeExprContext;

ShortOptionTypeExprContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

ShortOptionTypeExprContext.prototype.QUEST = function() {
    return this.getToken(CWScriptParser.QUEST, 0);
};

function TypeDefnExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeDefnExprContext.prototype = Object.create(TypeExprContext.prototype);
TypeDefnExprContext.prototype.constructor = TypeDefnExprContext;

CWScriptParser.TypeDefnExprContext = TypeDefnExprContext;

TypeDefnExprContext.prototype.typeDefn = function() {
    return this.getTypedRuleContext(TypeDefnContext,0);
};

function ReflectiveTypeExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReflectiveTypeExprContext.prototype = Object.create(TypeExprContext.prototype);
ReflectiveTypeExprContext.prototype.constructor = ReflectiveTypeExprContext;

CWScriptParser.ReflectiveTypeExprContext = ReflectiveTypeExprContext;

ReflectiveTypeExprContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

ReflectiveTypeExprContext.prototype.DOLLAR = function() {
    return this.getToken(CWScriptParser.DOLLAR, 0);
};

ReflectiveTypeExprContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

function TypePathExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypePathExprContext.prototype = Object.create(TypeExprContext.prototype);
TypePathExprContext.prototype.constructor = TypePathExprContext;

CWScriptParser.TypePathExprContext = TypePathExprContext;

TypePathExprContext.prototype.typePath = function() {
    return this.getTypedRuleContext(TypePathContext,0);
};

function ShortVecTypeExprContext(parser, ctx) {
	TypeExprContext.call(this, parser);
    TypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShortVecTypeExprContext.prototype = Object.create(TypeExprContext.prototype);
ShortVecTypeExprContext.prototype.constructor = ShortVecTypeExprContext;

CWScriptParser.ShortVecTypeExprContext = ShortVecTypeExprContext;

ShortVecTypeExprContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

ShortVecTypeExprContext.prototype.LBRACK = function() {
    return this.getToken(CWScriptParser.LBRACK, 0);
};

ShortVecTypeExprContext.prototype.RBRACK = function() {
    return this.getToken(CWScriptParser.RBRACK, 0);
};


CWScriptParser.prototype.typeExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 100;
    this.enterRecursionRule(localctx, 100, CWScriptParser.RULE_typeExpr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TypePathExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 599;
            this.typePath();
            break;

        case 2:
            localctx = new TupleTypeExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 600;
            this.match(CWScriptParser.LPAREN);

            this.state = 601;
            localctx._typeExpr = this.typeExpr(0);
            localctx.members.push(localctx._typeExpr);
            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CWScriptParser.COMMA) {
                this.state = 602;
                this.match(CWScriptParser.COMMA);
                this.state = 603;
                localctx._typeExpr = this.typeExpr(0);
                localctx.members.push(localctx._typeExpr);
                this.state = 608;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 609;
            this.match(CWScriptParser.RPAREN);
            break;

        case 3:
            localctx = new RefTypeExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 611;
            this.match(CWScriptParser.AMP);
            this.state = 612;
            this.typeExpr(3);
            break;

        case 4:
            localctx = new TypeDefnExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 613;
            this.typeDefn();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 628;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 626;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ParamzdTypeExprContext(this, new TypeExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_typeExpr);
                    this.state = 616;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 617;
                    this.typeParam();
                    break;

                case 2:
                    localctx = new ShortOptionTypeExprContext(this, new TypeExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_typeExpr);
                    this.state = 618;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 619;
                    this.match(CWScriptParser.QUEST);
                    break;

                case 3:
                    localctx = new ShortVecTypeExprContext(this, new TypeExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_typeExpr);
                    this.state = 620;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 621;
                    this.match(CWScriptParser.LBRACK);
                    this.state = 622;
                    this.match(CWScriptParser.RBRACK);
                    break;

                case 4:
                    localctx = new ReflectiveTypeExprContext(this, new TypeExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_typeExpr);
                    this.state = 623;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 624;
                    this.match(CWScriptParser.DOLLAR);
                    this.state = 625;
                    this.ident();
                    break;

                } 
            }
            this.state = 630;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypeParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_typeParam;
    return this;
}

TypeParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParamContext.prototype.constructor = TypeParamContext;

TypeParamContext.prototype.LT = function() {
    return this.getToken(CWScriptParser.LT, 0);
};

TypeParamContext.prototype.typeExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeExprContext);
    } else {
        return this.getTypedRuleContext(TypeExprContext,i);
    }
};

TypeParamContext.prototype.GT = function() {
    return this.getToken(CWScriptParser.GT, 0);
};

TypeParamContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.TypeParamContext = TypeParamContext;

CWScriptParser.prototype.typeParam = function() {

    var localctx = new TypeParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CWScriptParser.RULE_typeParam);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.match(CWScriptParser.LT);
        this.state = 632;
        this.typeExpr(0);
        this.state = 637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CWScriptParser.COMMA) {
            this.state = 633;
            this.match(CWScriptParser.COMMA);
            this.state = 634;
            this.typeExpr(0);
            this.state = 639;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 640;
        this.match(CWScriptParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PathListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_pathList;
    return this;
}

PathListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathListContext.prototype.constructor = PathListContext;

PathListContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

PathListContext.prototype.D_COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.D_COLON);
    } else {
        return this.getToken(CWScriptParser.D_COLON, i);
    }
};





CWScriptParser.PathListContext = PathListContext;

CWScriptParser.prototype.pathList = function() {

    var localctx = new PathListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CWScriptParser.RULE_pathList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.ident();
        this.state = 647;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 643;
                this.match(CWScriptParser.D_COLON);
                this.state = 644;
                this.ident(); 
            }
            this.state = 649;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_typePath;
    this.root = null; // Token
    return this;
}

TypePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypePathContext.prototype.constructor = TypePathContext;

TypePathContext.prototype.pathList = function() {
    return this.getTypedRuleContext(PathListContext,0);
};

TypePathContext.prototype.D_COLON = function() {
    return this.getToken(CWScriptParser.D_COLON, 0);
};




CWScriptParser.TypePathContext = TypePathContext;

CWScriptParser.prototype.typePath = function() {

    var localctx = new TypePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CWScriptParser.RULE_typePath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.D_COLON) {
            this.state = 650;
            localctx.root = this.match(CWScriptParser.D_COLON);
        }

        this.state = 653;
        this.pathList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_typeDefn;
    return this;
}

TypeDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefnContext.prototype.constructor = TypeDefnContext;

TypeDefnContext.prototype.structDefn = function() {
    return this.getTypedRuleContext(StructDefnContext,0);
};

TypeDefnContext.prototype.enumDefn = function() {
    return this.getTypedRuleContext(EnumDefnContext,0);
};

TypeDefnContext.prototype.typeAliasDefn = function() {
    return this.getTypedRuleContext(TypeAliasDefnContext,0);
};




CWScriptParser.TypeDefnContext = TypeDefnContext;

CWScriptParser.prototype.typeDefn = function() {

    var localctx = new TypeDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CWScriptParser.RULE_typeDefn);
    try {
        this.state = 658;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 655;
            this.structDefn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 656;
            this.enumDefn();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 657;
            this.typeAliasDefn();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_structDefn;
    this.spec = null; // CwspecContext
    return this;
}

StructDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefnContext.prototype.constructor = StructDefnContext;

StructDefnContext.prototype.STRUCT = function() {
    return this.getToken(CWScriptParser.STRUCT, 0);
};

StructDefnContext.prototype.enumVariant = function() {
    return this.getTypedRuleContext(EnumVariantContext,0);
};

StructDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.StructDefnContext = StructDefnContext;

CWScriptParser.prototype.structDefn = function() {

    var localctx = new StructDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CWScriptParser.RULE_structDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 660;
            localctx.spec = this.cwspec();
        }

        this.state = 663;
        this.match(CWScriptParser.STRUCT);
        this.state = 664;
        this.enumVariant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_enumDefn;
    this.spec = null; // CwspecContext
    this.name = null; // IdentContext
    return this;
}

EnumDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefnContext.prototype.constructor = EnumDefnContext;

EnumDefnContext.prototype.ENUM = function() {
    return this.getToken(CWScriptParser.ENUM, 0);
};

EnumDefnContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

EnumDefnContext.prototype.enumVariantList = function() {
    return this.getTypedRuleContext(EnumVariantListContext,0);
};

EnumDefnContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

EnumDefnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EnumDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.EnumDefnContext = EnumDefnContext;

CWScriptParser.prototype.enumDefn = function() {

    var localctx = new EnumDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CWScriptParser.RULE_enumDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 666;
            localctx.spec = this.cwspec();
        }

        this.state = 669;
        this.match(CWScriptParser.ENUM);

        this.state = 670;
        localctx.name = this.ident();
        this.state = 671;
        this.match(CWScriptParser.LBRACE);
        this.state = 672;
        this.enumVariantList();
        this.state = 673;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumVariantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_enumVariantList;
    return this;
}

EnumVariantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumVariantListContext.prototype.constructor = EnumVariantListContext;

EnumVariantListContext.prototype.enumVariant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumVariantContext);
    } else {
        return this.getTypedRuleContext(EnumVariantContext,i);
    }
};

EnumVariantListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.EnumVariantListContext = EnumVariantListContext;

CWScriptParser.prototype.enumVariantList = function() {

    var localctx = new EnumVariantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CWScriptParser.RULE_enumVariantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || _la===CWScriptParser.Ident) {
            this.state = 675;
            this.enumVariant();
            this.state = 682;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 677;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CWScriptParser.COMMA) {
                        this.state = 676;
                        this.match(CWScriptParser.COMMA);
                    }

                    this.state = 679;
                    this.enumVariant(); 
                }
                this.state = 684;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
            }

            this.state = 686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.COMMA) {
                this.state = 685;
                this.match(CWScriptParser.COMMA);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAliasDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_typeAliasDefn;
    this.spec = null; // CwspecContext
    this.name = null; // IdentContext
    this.typeValue = null; // TypeExprContext
    return this;
}

TypeAliasDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAliasDefnContext.prototype.constructor = TypeAliasDefnContext;

TypeAliasDefnContext.prototype.TYPE = function() {
    return this.getToken(CWScriptParser.TYPE, 0);
};

TypeAliasDefnContext.prototype.EQ = function() {
    return this.getToken(CWScriptParser.EQ, 0);
};

TypeAliasDefnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

TypeAliasDefnContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

TypeAliasDefnContext.prototype.cwspec = function() {
    return this.getTypedRuleContext(CwspecContext,0);
};




CWScriptParser.TypeAliasDefnContext = TypeAliasDefnContext;

CWScriptParser.prototype.typeAliasDefn = function() {

    var localctx = new TypeAliasDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CWScriptParser.RULE_typeAliasDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT) {
            this.state = 690;
            localctx.spec = this.cwspec();
        }

        this.state = 693;
        this.match(CWScriptParser.TYPE);

        this.state = 694;
        localctx.name = this.ident();
        this.state = 695;
        this.match(CWScriptParser.EQ);

        this.state = 696;
        localctx.typeValue = this.typeExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedFnDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_namedFnDecl;
    this.fnName = null; // IdentContext
    return this;
}

NamedFnDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedFnDeclContext.prototype.constructor = NamedFnDeclContext;

NamedFnDeclContext.prototype.fnArgs = function() {
    return this.getTypedRuleContext(FnArgsContext,0);
};

NamedFnDeclContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedFnDeclContext.prototype.fnType = function() {
    return this.getTypedRuleContext(FnTypeContext,0);
};




CWScriptParser.NamedFnDeclContext = NamedFnDeclContext;

CWScriptParser.prototype.namedFnDecl = function() {

    var localctx = new NamedFnDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CWScriptParser.RULE_namedFnDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        localctx.fnName = this.ident();
        this.state = 699;
        this.fnArgs();
        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.ARROW) {
            this.state = 700;
            this.fnType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedFnDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_namedFnDefn;
    this.fnName = null; // IdentContext
    return this;
}

NamedFnDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedFnDefnContext.prototype.constructor = NamedFnDefnContext;

NamedFnDefnContext.prototype.fnArgs = function() {
    return this.getTypedRuleContext(FnArgsContext,0);
};

NamedFnDefnContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};

NamedFnDefnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedFnDefnContext.prototype.fnType = function() {
    return this.getTypedRuleContext(FnTypeContext,0);
};




CWScriptParser.NamedFnDefnContext = NamedFnDefnContext;

CWScriptParser.prototype.namedFnDefn = function() {

    var localctx = new NamedFnDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CWScriptParser.RULE_namedFnDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        localctx.fnName = this.ident();
        this.state = 704;
        this.fnArgs();
        this.state = 706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.ARROW) {
            this.state = 705;
            this.fnType();
        }

        this.state = 708;
        this.fnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_fnType;
    this.retType = null; // TypeExprContext
    return this;
}

FnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FnTypeContext.prototype.constructor = FnTypeContext;

FnTypeContext.prototype.ARROW = function() {
    return this.getToken(CWScriptParser.ARROW, 0);
};

FnTypeContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};




CWScriptParser.FnTypeContext = FnTypeContext;

CWScriptParser.prototype.fnType = function() {

    var localctx = new FnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CWScriptParser.RULE_fnType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this.match(CWScriptParser.ARROW);
        this.state = 711;
        localctx.retType = this.typeExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FnArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_fnArgs;
    return this;
}

FnArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FnArgsContext.prototype.constructor = FnArgsContext;

FnArgsContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

FnArgsContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

FnArgsContext.prototype.fnArgList = function() {
    return this.getTypedRuleContext(FnArgListContext,0);
};




CWScriptParser.FnArgsContext = FnArgsContext;

CWScriptParser.prototype.fnArgs = function() {

    var localctx = new FnArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CWScriptParser.RULE_fnArgs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(CWScriptParser.LPAREN);
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || _la===CWScriptParser.Ident) {
            this.state = 714;
            this.fnArgList();
        }

        this.state = 717;
        this.match(CWScriptParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FnArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_fnArgList;
    return this;
}

FnArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FnArgListContext.prototype.constructor = FnArgListContext;

FnArgListContext.prototype.fnArg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FnArgContext);
    } else {
        return this.getTypedRuleContext(FnArgContext,i);
    }
};

FnArgListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.FnArgListContext = FnArgListContext;

CWScriptParser.prototype.fnArgList = function() {

    var localctx = new FnArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CWScriptParser.RULE_fnArgList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.fnArg();
        this.state = 724;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CWScriptParser.COMMA) {
            this.state = 720;
            this.match(CWScriptParser.COMMA);
            this.state = 721;
            this.fnArg();
            this.state = 726;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FnArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_fnArg;
    this.argName = null; // IdentContext
    this.option = null; // Token
    this.argType = null; // TypeExprContext
    return this;
}

FnArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FnArgContext.prototype.constructor = FnArgContext;

FnArgContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

FnArgContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

FnArgContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

FnArgContext.prototype.QUEST = function() {
    return this.getToken(CWScriptParser.QUEST, 0);
};




CWScriptParser.FnArgContext = FnArgContext;

CWScriptParser.prototype.fnArg = function() {

    var localctx = new FnArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CWScriptParser.RULE_fnArg);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 727;
        localctx.argName = this.ident();
        this.state = 729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.QUEST) {
            this.state = 728;
            localctx.option = this.match(CWScriptParser.QUEST);
        }

        this.state = 731;
        this.match(CWScriptParser.COLON);

        this.state = 732;
        localctx.argType = this.typeExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FnBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_fnBody;
    return this;
}

FnBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FnBodyContext.prototype.constructor = FnBodyContext;


 
FnBodyContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NormalFnBodyContext(parser, ctx) {
	FnBodyContext.call(this, parser);
    FnBodyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NormalFnBodyContext.prototype = Object.create(FnBodyContext.prototype);
NormalFnBodyContext.prototype.constructor = NormalFnBodyContext;

CWScriptParser.NormalFnBodyContext = NormalFnBodyContext;

NormalFnBodyContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

NormalFnBodyContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

NormalFnBodyContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

function ArrowFnBodyContext(parser, ctx) {
	FnBodyContext.call(this, parser);
    FnBodyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowFnBodyContext.prototype = Object.create(FnBodyContext.prototype);
ArrowFnBodyContext.prototype.constructor = ArrowFnBodyContext;

CWScriptParser.ArrowFnBodyContext = ArrowFnBodyContext;

ArrowFnBodyContext.prototype.FAT_ARROW = function() {
    return this.getToken(CWScriptParser.FAT_ARROW, 0);
};

ArrowFnBodyContext.prototype.stmt = function() {
    return this.getTypedRuleContext(StmtContext,0);
};


CWScriptParser.FnBodyContext = FnBodyContext;

CWScriptParser.prototype.fnBody = function() {

    var localctx = new FnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CWScriptParser.RULE_fnBody);
    var _la = 0; // Token type
    try {
        this.state = 744;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CWScriptParser.LBRACE:
            localctx = new NormalFnBodyContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 734;
            this.match(CWScriptParser.LBRACE);
            this.state = 738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.FAIL) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CWScriptParser.EMIT - 32)) | (1 << (CWScriptParser.LPAREN - 32)) | (1 << (CWScriptParser.LBRACK - 32)) | (1 << (CWScriptParser.EXCLAM - 32)) | (1 << (CWScriptParser.D_COLON - 32)) | (1 << (CWScriptParser.PLUS - 32)) | (1 << (CWScriptParser.MINUS - 32)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.StringLiteral - 72)) | (1 << (CWScriptParser.IntegerLiteral - 72)) | (1 << (CWScriptParser.DecimalLiteral - 72)))) !== 0)) {
                this.state = 735;
                this.stmt();
                this.state = 740;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 741;
            this.match(CWScriptParser.RBRACE);
            break;
        case CWScriptParser.FAT_ARROW:
            localctx = new ArrowFnBodyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 742;
            this.match(CWScriptParser.FAT_ARROW);
            this.state = 743;
            this.stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;


 
StmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FailStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FailStmtContext.prototype = Object.create(StmtContext.prototype);
FailStmtContext.prototype.constructor = FailStmtContext;

CWScriptParser.FailStmtContext = FailStmtContext;

FailStmtContext.prototype.FAIL = function() {
    return this.getToken(CWScriptParser.FAIL, 0);
};

FailStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function IfStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStmtContext.prototype = Object.create(StmtContext.prototype);
IfStmtContext.prototype.constructor = IfStmtContext;

CWScriptParser.IfStmtContext = IfStmtContext;

IfStmtContext.prototype.ifExpr_ = function() {
    return this.getTypedRuleContext(IfExpr_Context,0);
};

function EmitStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EmitStmtContext.prototype = Object.create(StmtContext.prototype);
EmitStmtContext.prototype.constructor = EmitStmtContext;

CWScriptParser.EmitStmtContext = EmitStmtContext;

EmitStmtContext.prototype.EMIT = function() {
    return this.getToken(CWScriptParser.EMIT, 0);
};

EmitStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function ExprStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprStmtContext.prototype = Object.create(StmtContext.prototype);
ExprStmtContext.prototype.constructor = ExprStmtContext;

CWScriptParser.ExprStmtContext = ExprStmtContext;

ExprStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function AssignStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    this.assignOp = null; // Token;
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignStmtContext.prototype = Object.create(StmtContext.prototype);
AssignStmtContext.prototype.constructor = AssignStmtContext;

CWScriptParser.AssignStmtContext = AssignStmtContext;

AssignStmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

AssignStmtContext.prototype.EQ = function() {
    return this.getToken(CWScriptParser.EQ, 0);
};

AssignStmtContext.prototype.PLUS_EQ = function() {
    return this.getToken(CWScriptParser.PLUS_EQ, 0);
};

AssignStmtContext.prototype.MINUS_EQ = function() {
    return this.getToken(CWScriptParser.MINUS_EQ, 0);
};

AssignStmtContext.prototype.MUL_EQ = function() {
    return this.getToken(CWScriptParser.MUL_EQ, 0);
};

AssignStmtContext.prototype.DIV_EQ = function() {
    return this.getToken(CWScriptParser.DIV_EQ, 0);
};

AssignStmtContext.prototype.MOD_EQ = function() {
    return this.getToken(CWScriptParser.MOD_EQ, 0);
};

function ExecStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecStmtContext.prototype = Object.create(StmtContext.prototype);
ExecStmtContext.prototype.constructor = ExecStmtContext;

CWScriptParser.ExecStmtContext = ExecStmtContext;

ExecStmtContext.prototype.EXEC = function() {
    return this.getToken(CWScriptParser.EXEC, 0);
};

ExecStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function ForStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForStmtContext.prototype = Object.create(StmtContext.prototype);
ForStmtContext.prototype.constructor = ForStmtContext;

CWScriptParser.ForStmtContext = ForStmtContext;

ForStmtContext.prototype.forStmt_ = function() {
    return this.getTypedRuleContext(ForStmt_Context,0);
};

function ReturnStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStmtContext.prototype = Object.create(StmtContext.prototype);
ReturnStmtContext.prototype.constructor = ReturnStmtContext;

CWScriptParser.ReturnStmtContext = ReturnStmtContext;

ReturnStmtContext.prototype.RETURN = function() {
    return this.getToken(CWScriptParser.RETURN, 0);
};

ReturnStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function LetStmtContext(parser, ctx) {
	StmtContext.call(this, parser);
    StmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LetStmtContext.prototype = Object.create(StmtContext.prototype);
LetStmtContext.prototype.constructor = LetStmtContext;

CWScriptParser.LetStmtContext = LetStmtContext;

LetStmtContext.prototype.letStmt_ = function() {
    return this.getTypedRuleContext(LetStmt_Context,0);
};


CWScriptParser.StmtContext = StmtContext;

CWScriptParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CWScriptParser.RULE_stmt);
    var _la = 0; // Token type
    try {
        this.state = 762;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LetStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 746;
            this.letStmt_();
            break;

        case 2:
            localctx = new AssignStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 747;
            this.expr(0);
            this.state = 748;
            localctx.assignOp = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CWScriptParser.EQ - 54)) | (1 << (CWScriptParser.PLUS_EQ - 54)) | (1 << (CWScriptParser.MINUS_EQ - 54)) | (1 << (CWScriptParser.MUL_EQ - 54)) | (1 << (CWScriptParser.DIV_EQ - 54)) | (1 << (CWScriptParser.MOD_EQ - 54)))) !== 0))) {
                localctx.assignOp = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 749;
            this.expr(0);
            break;

        case 3:
            localctx = new IfStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 751;
            this.ifExpr_();
            break;

        case 4:
            localctx = new ForStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 752;
            this.forStmt_();
            break;

        case 5:
            localctx = new ExecStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 753;
            this.match(CWScriptParser.EXEC);
            this.state = 754;
            this.expr(0);
            break;

        case 6:
            localctx = new EmitStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 755;
            this.match(CWScriptParser.EMIT);
            this.state = 756;
            this.expr(0);
            break;

        case 7:
            localctx = new ReturnStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 757;
            this.match(CWScriptParser.RETURN);
            this.state = 758;
            this.expr(0);
            break;

        case 8:
            localctx = new FailStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 759;
            this.match(CWScriptParser.FAIL);
            this.state = 760;
            this.expr(0);
            break;

        case 9:
            localctx = new ExprStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 761;
            this.expr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LetStmt_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_letStmt_;
    return this;
}

LetStmt_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetStmt_Context.prototype.constructor = LetStmt_Context;

LetStmt_Context.prototype.LET = function() {
    return this.getToken(CWScriptParser.LET, 0);
};

LetStmt_Context.prototype.letLHS = function() {
    return this.getTypedRuleContext(LetLHSContext,0);
};

LetStmt_Context.prototype.EQ = function() {
    return this.getToken(CWScriptParser.EQ, 0);
};

LetStmt_Context.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};




CWScriptParser.LetStmt_Context = LetStmt_Context;

CWScriptParser.prototype.letStmt_ = function() {

    var localctx = new LetStmt_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CWScriptParser.RULE_letStmt_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 764;
        this.match(CWScriptParser.LET);
        this.state = 765;
        this.letLHS();
        this.state = 766;
        this.match(CWScriptParser.EQ);
        this.state = 767;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LetLHSContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_letLHS;
    return this;
}

LetLHSContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetLHSContext.prototype.constructor = LetLHSContext;


 
LetLHSContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StructUnpackLHSContext(parser, ctx) {
	LetLHSContext.call(this, parser);
    LetLHSContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StructUnpackLHSContext.prototype = Object.create(LetLHSContext.prototype);
StructUnpackLHSContext.prototype.constructor = StructUnpackLHSContext;

CWScriptParser.StructUnpackLHSContext = StructUnpackLHSContext;

StructUnpackLHSContext.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

StructUnpackLHSContext.prototype.identList = function() {
    return this.getTypedRuleContext(IdentListContext,0);
};

StructUnpackLHSContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

function TupleUnpackLHSBackContext(parser, ctx) {
	LetLHSContext.call(this, parser);
    this.back = null; // IdentListContext;
    LetLHSContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleUnpackLHSBackContext.prototype = Object.create(LetLHSContext.prototype);
TupleUnpackLHSBackContext.prototype.constructor = TupleUnpackLHSBackContext;

CWScriptParser.TupleUnpackLHSBackContext = TupleUnpackLHSBackContext;

TupleUnpackLHSBackContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

TupleUnpackLHSBackContext.prototype.COMMA = function() {
    return this.getToken(CWScriptParser.COMMA, 0);
};

TupleUnpackLHSBackContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.DOT);
    } else {
        return this.getToken(CWScriptParser.DOT, i);
    }
};


TupleUnpackLHSBackContext.prototype.identList = function() {
    return this.getTypedRuleContext(IdentListContext,0);
};

function IdentLHSContext(parser, ctx) {
	LetLHSContext.call(this, parser);
    this.varType = null; // TypeExprContext;
    LetLHSContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentLHSContext.prototype = Object.create(LetLHSContext.prototype);
IdentLHSContext.prototype.constructor = IdentLHSContext;

CWScriptParser.IdentLHSContext = IdentLHSContext;

IdentLHSContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

IdentLHSContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

IdentLHSContext.prototype.typeExpr = function() {
    return this.getTypedRuleContext(TypeExprContext,0);
};

function TupleUnpackLHSFrontBackContext(parser, ctx) {
	LetLHSContext.call(this, parser);
    this.front = null; // IdentListContext;
    this.back = null; // IdentListContext;
    LetLHSContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleUnpackLHSFrontBackContext.prototype = Object.create(LetLHSContext.prototype);
TupleUnpackLHSFrontBackContext.prototype.constructor = TupleUnpackLHSFrontBackContext;

CWScriptParser.TupleUnpackLHSFrontBackContext = TupleUnpackLHSFrontBackContext;

TupleUnpackLHSFrontBackContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

TupleUnpackLHSFrontBackContext.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

TupleUnpackLHSFrontBackContext.prototype.identList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentListContext);
    } else {
        return this.getTypedRuleContext(IdentListContext,i);
    }
};

TupleUnpackLHSFrontBackContext.prototype.COMMA = function() {
    return this.getToken(CWScriptParser.COMMA, 0);
};

TupleUnpackLHSFrontBackContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.DOT);
    } else {
        return this.getToken(CWScriptParser.DOT, i);
    }
};



CWScriptParser.LetLHSContext = LetLHSContext;

CWScriptParser.prototype.letLHS = function() {

    var localctx = new LetLHSContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CWScriptParser.RULE_letLHS);
    var _la = 0; // Token type
    try {
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IdentLHSContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 769;
            this.ident();
            this.state = 772;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.COLON) {
                this.state = 770;
                this.match(CWScriptParser.COLON);
                this.state = 771;
                localctx.varType = this.typeExpr(0);
            }

            break;

        case 2:
            localctx = new StructUnpackLHSContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 774;
            this.match(CWScriptParser.LBRACE);
            this.state = 775;
            this.identList();
            this.state = 776;
            this.match(CWScriptParser.RBRACE);
            break;

        case 3:
            localctx = new TupleUnpackLHSFrontBackContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 778;
            this.match(CWScriptParser.LPAREN);

            this.state = 779;
            localctx.front = this.identList();
            this.state = 785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CWScriptParser.COMMA) {
                this.state = 780;
                this.match(CWScriptParser.COMMA);
                this.state = 781;
                this.match(CWScriptParser.DOT);
                this.state = 782;
                this.match(CWScriptParser.DOT);
                this.state = 783;
                this.match(CWScriptParser.DOT);
                this.state = 784;
                localctx.back = this.identList();
            }

            this.state = 787;
            this.match(CWScriptParser.RBRACE);
            break;

        case 4:
            localctx = new TupleUnpackLHSBackContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 789;
            this.match(CWScriptParser.LPAREN);
            this.state = 790;
            this.match(CWScriptParser.COMMA);
            this.state = 791;
            this.match(CWScriptParser.DOT);
            this.state = 792;
            this.match(CWScriptParser.DOT);
            this.state = 793;
            this.match(CWScriptParser.DOT);
            this.state = 794;
            localctx.back = this.identList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;


 
ExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AndExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExprContext.prototype = Object.create(ExprContext.prototype);
AndExprContext.prototype.constructor = AndExprContext;

CWScriptParser.AndExprContext = AndExprContext;

AndExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

AndExprContext.prototype.AND = function() {
    return this.getToken(CWScriptParser.AND, 0);
};

function MultDivModExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultDivModExprContext.prototype = Object.create(ExprContext.prototype);
MultDivModExprContext.prototype.constructor = MultDivModExprContext;

CWScriptParser.MultDivModExprContext = MultDivModExprContext;

MultDivModExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

MultDivModExprContext.prototype.MUL = function() {
    return this.getToken(CWScriptParser.MUL, 0);
};

MultDivModExprContext.prototype.DIV = function() {
    return this.getToken(CWScriptParser.DIV, 0);
};

MultDivModExprContext.prototype.MOD = function() {
    return this.getToken(CWScriptParser.MOD, 0);
};

function QueryExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryExprContext.prototype = Object.create(ExprContext.prototype);
QueryExprContext.prototype.constructor = QueryExprContext;

CWScriptParser.QueryExprContext = QueryExprContext;

QueryExprContext.prototype.QUERY = function() {
    return this.getToken(CWScriptParser.QUERY, 0);
};

QueryExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function PosArgsFnCallExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PosArgsFnCallExprContext.prototype = Object.create(ExprContext.prototype);
PosArgsFnCallExprContext.prototype.constructor = PosArgsFnCallExprContext;

CWScriptParser.PosArgsFnCallExprContext = PosArgsFnCallExprContext;

PosArgsFnCallExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

PosArgsFnCallExprContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

PosArgsFnCallExprContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

PosArgsFnCallExprContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

function ValExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValExprContext.prototype = Object.create(ExprContext.prototype);
ValExprContext.prototype.constructor = ValExprContext;

CWScriptParser.ValExprContext = ValExprContext;

ValExprContext.prototype.val = function() {
    return this.getTypedRuleContext(ValContext,0);
};

function CompExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CompExprContext.prototype = Object.create(ExprContext.prototype);
CompExprContext.prototype.constructor = CompExprContext;

CWScriptParser.CompExprContext = CompExprContext;

CompExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

CompExprContext.prototype.LT = function() {
    return this.getToken(CWScriptParser.LT, 0);
};

CompExprContext.prototype.GT = function() {
    return this.getToken(CWScriptParser.GT, 0);
};

CompExprContext.prototype.LT_EQ = function() {
    return this.getToken(CWScriptParser.LT_EQ, 0);
};

CompExprContext.prototype.GT_EQ = function() {
    return this.getToken(CWScriptParser.GT_EQ, 0);
};

function ExpExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpExprContext.prototype = Object.create(ExprContext.prototype);
ExpExprContext.prototype.constructor = ExpExprContext;

CWScriptParser.ExpExprContext = ExpExprContext;

ExpExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExpExprContext.prototype.POW = function() {
    return this.getToken(CWScriptParser.POW, 0);
};

function UnaryExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExprContext.prototype = Object.create(ExprContext.prototype);
UnaryExprContext.prototype.constructor = UnaryExprContext;

CWScriptParser.UnaryExprContext = UnaryExprContext;

UnaryExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UnaryExprContext.prototype.PLUS = function() {
    return this.getToken(CWScriptParser.PLUS, 0);
};

UnaryExprContext.prototype.MINUS = function() {
    return this.getToken(CWScriptParser.MINUS, 0);
};

UnaryExprContext.prototype.EXCLAM = function() {
    return this.getToken(CWScriptParser.EXCLAM, 0);
};

function OrExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExprContext.prototype = Object.create(ExprContext.prototype);
OrExprContext.prototype.constructor = OrExprContext;

CWScriptParser.OrExprContext = OrExprContext;

OrExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

OrExprContext.prototype.OR = function() {
    return this.getToken(CWScriptParser.OR, 0);
};

function IfExpContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfExpContext.prototype = Object.create(ExprContext.prototype);
IfExpContext.prototype.constructor = IfExpContext;

CWScriptParser.IfExpContext = IfExpContext;

IfExpContext.prototype.ifExpr_ = function() {
    return this.getTypedRuleContext(IfExpr_Context,0);
};

function EqExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqExprContext.prototype = Object.create(ExprContext.prototype);
EqExprContext.prototype.constructor = EqExprContext;

CWScriptParser.EqExprContext = EqExprContext;

EqExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

EqExprContext.prototype.EQEQ = function() {
    return this.getToken(CWScriptParser.EQEQ, 0);
};

EqExprContext.prototype.NEQ = function() {
    return this.getToken(CWScriptParser.NEQ, 0);
};

function NamedArgsFnCallExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedArgsFnCallExprContext.prototype = Object.create(ExprContext.prototype);
NamedArgsFnCallExprContext.prototype.constructor = NamedArgsFnCallExprContext;

CWScriptParser.NamedArgsFnCallExprContext = NamedArgsFnCallExprContext;

NamedArgsFnCallExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

NamedArgsFnCallExprContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

NamedArgsFnCallExprContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

NamedArgsFnCallExprContext.prototype.namedExprList = function() {
    return this.getTypedRuleContext(NamedExprListContext,0);
};

function TableLookupExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableLookupExprContext.prototype = Object.create(ExprContext.prototype);
TableLookupExprContext.prototype.constructor = TableLookupExprContext;

CWScriptParser.TableLookupExprContext = TableLookupExprContext;

TableLookupExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

TableLookupExprContext.prototype.LBRACK = function() {
    return this.getToken(CWScriptParser.LBRACK, 0);
};

TableLookupExprContext.prototype.RBRACK = function() {
    return this.getToken(CWScriptParser.RBRACK, 0);
};

function MemberAccessExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberAccessExprContext.prototype = Object.create(ExprContext.prototype);
MemberAccessExprContext.prototype.constructor = MemberAccessExprContext;

CWScriptParser.MemberAccessExprContext = MemberAccessExprContext;

MemberAccessExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

MemberAccessExprContext.prototype.DOT = function() {
    return this.getToken(CWScriptParser.DOT, 0);
};

MemberAccessExprContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

function AddSubExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddSubExprContext.prototype = Object.create(ExprContext.prototype);
AddSubExprContext.prototype.constructor = AddSubExprContext;

CWScriptParser.AddSubExprContext = AddSubExprContext;

AddSubExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

AddSubExprContext.prototype.PLUS = function() {
    return this.getToken(CWScriptParser.PLUS, 0);
};

AddSubExprContext.prototype.MINUS = function() {
    return this.getToken(CWScriptParser.MINUS, 0);
};

function GroupedExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupedExprContext.prototype = Object.create(ExprContext.prototype);
GroupedExprContext.prototype.constructor = GroupedExprContext;

CWScriptParser.GroupedExprContext = GroupedExprContext;

GroupedExprContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

GroupedExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

GroupedExprContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};


CWScriptParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 138;
    this.enterRecursionRule(localctx, 138, CWScriptParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GroupedExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 798;
            this.match(CWScriptParser.LPAREN);
            this.state = 799;
            this.expr(0);
            this.state = 800;
            this.match(CWScriptParser.RPAREN);
            break;

        case 2:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 802;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (CWScriptParser.EXCLAM - 43)) | (1 << (CWScriptParser.PLUS - 43)) | (1 << (CWScriptParser.MINUS - 43)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 803;
            this.expr(11);
            break;

        case 3:
            localctx = new IfExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 804;
            this.ifExpr_();
            break;

        case 4:
            localctx = new QueryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 805;
            this.match(CWScriptParser.QUERY);
            this.state = 806;
            this.expr(2);
            break;

        case 5:
            localctx = new ValExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 807;
            this.val();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 853;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 851;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 810;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 811;
                    this.match(CWScriptParser.POW);
                    this.state = 812;
                    this.expr(11);
                    break;

                case 2:
                    localctx = new MultDivModExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 813;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 814;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (CWScriptParser.MUL - 61)) | (1 << (CWScriptParser.DIV - 61)) | (1 << (CWScriptParser.MOD - 61)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 815;
                    this.expr(10);
                    break;

                case 3:
                    localctx = new AddSubExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 816;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 817;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===CWScriptParser.PLUS || _la===CWScriptParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 818;
                    this.expr(9);
                    break;

                case 4:
                    localctx = new CompExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 819;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 820;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CWScriptParser.LT - 67)) | (1 << (CWScriptParser.LT_EQ - 67)) | (1 << (CWScriptParser.GT - 67)) | (1 << (CWScriptParser.GT_EQ - 67)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 821;
                    this.expr(8);
                    break;

                case 5:
                    localctx = new EqExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 822;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 823;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===CWScriptParser.EQEQ || _la===CWScriptParser.NEQ)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 824;
                    this.expr(7);
                    break;

                case 6:
                    localctx = new AndExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 825;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 826;
                    this.match(CWScriptParser.AND);
                    this.state = 827;
                    this.expr(6);
                    break;

                case 7:
                    localctx = new OrExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 828;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 829;
                    this.match(CWScriptParser.OR);
                    this.state = 830;
                    this.expr(5);
                    break;

                case 8:
                    localctx = new MemberAccessExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 831;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 832;
                    this.match(CWScriptParser.DOT);
                    this.state = 833;
                    this.ident();
                    break;

                case 9:
                    localctx = new TableLookupExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 834;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 835;
                    this.match(CWScriptParser.LBRACK);
                    this.state = 836;
                    this.expr(0);
                    this.state = 837;
                    this.match(CWScriptParser.RBRACK);
                    break;

                case 10:
                    localctx = new PosArgsFnCallExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 839;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 840;
                    this.match(CWScriptParser.LPAREN);
                    this.state = 842;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CWScriptParser.EMIT - 32)) | (1 << (CWScriptParser.LPAREN - 32)) | (1 << (CWScriptParser.LBRACK - 32)) | (1 << (CWScriptParser.EXCLAM - 32)) | (1 << (CWScriptParser.D_COLON - 32)) | (1 << (CWScriptParser.PLUS - 32)) | (1 << (CWScriptParser.MINUS - 32)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.StringLiteral - 72)) | (1 << (CWScriptParser.IntegerLiteral - 72)) | (1 << (CWScriptParser.DecimalLiteral - 72)))) !== 0)) {
                        this.state = 841;
                        this.exprList();
                    }

                    this.state = 844;
                    this.match(CWScriptParser.RPAREN);
                    break;

                case 11:
                    localctx = new NamedArgsFnCallExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, CWScriptParser.RULE_expr);
                    this.state = 845;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 846;
                    this.match(CWScriptParser.LPAREN);
                    this.state = 848;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || _la===CWScriptParser.Ident) {
                        this.state = 847;
                        this.namedExprList();
                    }

                    this.state = 850;
                    this.match(CWScriptParser.RPAREN);
                    break;

                } 
            }
            this.state = 855;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_val;
    return this;
}

ValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValContext.prototype.constructor = ValContext;


 
ValContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TrueValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TrueValContext.prototype = Object.create(ValContext.prototype);
TrueValContext.prototype.constructor = TrueValContext;

CWScriptParser.TrueValContext = TrueValContext;

TrueValContext.prototype.TRUE = function() {
    return this.getToken(CWScriptParser.TRUE, 0);
};

function StructValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StructValContext.prototype = Object.create(ValContext.prototype);
StructValContext.prototype.constructor = StructValContext;

CWScriptParser.StructValContext = StructValContext;

StructValContext.prototype.structVal_ = function() {
    return this.getTypedRuleContext(StructVal_Context,0);
};

function TupleValContext(parser, ctx) {
	ValContext.call(this, parser);
    this.tupleType = null; // TypePathContext;
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleValContext.prototype = Object.create(ValContext.prototype);
TupleValContext.prototype.constructor = TupleValContext;

CWScriptParser.TupleValContext = TupleValContext;

TupleValContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

TupleValContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

TupleValContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

TupleValContext.prototype.typePath = function() {
    return this.getTypedRuleContext(TypePathContext,0);
};

function VecValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VecValContext.prototype = Object.create(ValContext.prototype);
VecValContext.prototype.constructor = VecValContext;

CWScriptParser.VecValContext = VecValContext;

VecValContext.prototype.LBRACK = function() {
    return this.getToken(CWScriptParser.LBRACK, 0);
};

VecValContext.prototype.exprList = function() {
    return this.getTypedRuleContext(ExprListContext,0);
};

VecValContext.prototype.RBRACK = function() {
    return this.getToken(CWScriptParser.RBRACK, 0);
};

function FalseValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FalseValContext.prototype = Object.create(ValContext.prototype);
FalseValContext.prototype.constructor = FalseValContext;

CWScriptParser.FalseValContext = FalseValContext;

FalseValContext.prototype.FALSE = function() {
    return this.getToken(CWScriptParser.FALSE, 0);
};

function IdentValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentValContext.prototype = Object.create(ValContext.prototype);
IdentValContext.prototype.constructor = IdentValContext;

CWScriptParser.IdentValContext = IdentValContext;

IdentValContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

function UnitValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnitValContext.prototype = Object.create(ValContext.prototype);
UnitValContext.prototype.constructor = UnitValContext;

CWScriptParser.UnitValContext = UnitValContext;

UnitValContext.prototype.LPAREN = function() {
    return this.getToken(CWScriptParser.LPAREN, 0);
};

UnitValContext.prototype.RPAREN = function() {
    return this.getToken(CWScriptParser.RPAREN, 0);
};

function StringValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringValContext.prototype = Object.create(ValContext.prototype);
StringValContext.prototype.constructor = StringValContext;

CWScriptParser.StringValContext = StringValContext;

StringValContext.prototype.StringLiteral = function() {
    return this.getToken(CWScriptParser.StringLiteral, 0);
};

function IntegerValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerValContext.prototype = Object.create(ValContext.prototype);
IntegerValContext.prototype.constructor = IntegerValContext;

CWScriptParser.IntegerValContext = IntegerValContext;

IntegerValContext.prototype.IntegerLiteral = function() {
    return this.getToken(CWScriptParser.IntegerLiteral, 0);
};

function DecimalValContext(parser, ctx) {
	ValContext.call(this, parser);
    ValContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalValContext.prototype = Object.create(ValContext.prototype);
DecimalValContext.prototype.constructor = DecimalValContext;

CWScriptParser.DecimalValContext = DecimalValContext;

DecimalValContext.prototype.DecimalLiteral = function() {
    return this.getToken(CWScriptParser.DecimalLiteral, 0);
};


CWScriptParser.ValContext = ValContext;

CWScriptParser.prototype.val = function() {

    var localctx = new ValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CWScriptParser.RULE_val);
    try {
        this.state = 874;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnitValContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 856;
            this.match(CWScriptParser.LPAREN);
            this.state = 857;
            this.match(CWScriptParser.RPAREN);
            break;

        case 2:
            localctx = new StructValContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 858;
            this.structVal_();
            break;

        case 3:
            localctx = new TupleValContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 859;
            localctx.tupleType = this.typePath();
            this.state = 860;
            this.match(CWScriptParser.LPAREN);
            this.state = 861;
            this.exprList();
            this.state = 862;
            this.match(CWScriptParser.RPAREN);
            break;

        case 4:
            localctx = new VecValContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 864;
            this.match(CWScriptParser.LBRACK);
            this.state = 865;
            this.exprList();
            this.state = 866;
            this.match(CWScriptParser.RBRACK);
            break;

        case 5:
            localctx = new StringValContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 868;
            this.match(CWScriptParser.StringLiteral);
            break;

        case 6:
            localctx = new IntegerValContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 869;
            this.match(CWScriptParser.IntegerLiteral);
            break;

        case 7:
            localctx = new DecimalValContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 870;
            this.match(CWScriptParser.DecimalLiteral);
            break;

        case 8:
            localctx = new TrueValContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 871;
            this.match(CWScriptParser.TRUE);
            break;

        case 9:
            localctx = new FalseValContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 872;
            this.match(CWScriptParser.FALSE);
            break;

        case 10:
            localctx = new IdentValContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 873;
            this.ident();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructVal_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_structVal_;
    this.structType = null; // TypePathContext
    this.members = null; // StructValMembersContext
    return this;
}

StructVal_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructVal_Context.prototype.constructor = StructVal_Context;

StructVal_Context.prototype.LBRACE = function() {
    return this.getToken(CWScriptParser.LBRACE, 0);
};

StructVal_Context.prototype.RBRACE = function() {
    return this.getToken(CWScriptParser.RBRACE, 0);
};

StructVal_Context.prototype.typePath = function() {
    return this.getTypedRuleContext(TypePathContext,0);
};

StructVal_Context.prototype.structValMembers = function() {
    return this.getTypedRuleContext(StructValMembersContext,0);
};




CWScriptParser.StructVal_Context = StructVal_Context;

CWScriptParser.prototype.structVal_ = function() {

    var localctx = new StructVal_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CWScriptParser.RULE_structVal_);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        localctx.structType = this.typePath();
        this.state = 877;
        this.match(CWScriptParser.LBRACE);
        this.state = 879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0) || _la===CWScriptParser.Ident) {
            this.state = 878;
            localctx.members = this.structValMembers();
        }

        this.state = 881;
        this.match(CWScriptParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructValMembersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_structValMembers;
    return this;
}

StructValMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructValMembersContext.prototype.constructor = StructValMembersContext;

StructValMembersContext.prototype.structValMember = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructValMemberContext);
    } else {
        return this.getTypedRuleContext(StructValMemberContext,i);
    }
};

StructValMembersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.StructValMembersContext = StructValMembersContext;

CWScriptParser.prototype.structValMembers = function() {

    var localctx = new StructValMembersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CWScriptParser.RULE_structValMembers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 883;
        this.structValMember();
        this.state = 888;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 884;
                this.match(CWScriptParser.COMMA);
                this.state = 885;
                this.structValMember(); 
            }
            this.state = 890;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CWScriptParser.COMMA) {
            this.state = 891;
            this.match(CWScriptParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructValMemberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_structValMember;
    this.name = null; // IdentContext
    this.value = null; // ExprContext
    return this;
}

StructValMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructValMemberContext.prototype.constructor = StructValMemberContext;

StructValMemberContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

StructValMemberContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

StructValMemberContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};




CWScriptParser.StructValMemberContext = StructValMemberContext;

CWScriptParser.prototype.structValMember = function() {

    var localctx = new StructValMemberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CWScriptParser.RULE_structValMember);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 894;
        localctx.name = this.ident();
        this.state = 895;
        this.match(CWScriptParser.COLON);
        this.state = 896;
        localctx.value = this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExpr_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_ifExpr_;
    return this;
}

IfExpr_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExpr_Context.prototype.constructor = IfExpr_Context;

IfExpr_Context.prototype.ifClause_ = function() {
    return this.getTypedRuleContext(IfClause_Context,0);
};

IfExpr_Context.prototype.elseIfClauses = function() {
    return this.getTypedRuleContext(ElseIfClausesContext,0);
};

IfExpr_Context.prototype.elseClause = function() {
    return this.getTypedRuleContext(ElseClauseContext,0);
};




CWScriptParser.IfExpr_Context = IfExpr_Context;

CWScriptParser.prototype.ifExpr_ = function() {

    var localctx = new IfExpr_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CWScriptParser.RULE_ifExpr_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.ifClause_();
        this.state = 900;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        if(la_===1) {
            this.state = 899;
            this.elseIfClauses();

        }
        this.state = 903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 902;
            this.elseClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfClause_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_ifClause_;
    return this;
}

IfClause_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfClause_Context.prototype.constructor = IfClause_Context;


 
IfClause_Context.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IfLetClauseContext(parser, ctx) {
	IfClause_Context.call(this, parser);
    IfClause_Context.prototype.copyFrom.call(this, ctx);
    return this;
}

IfLetClauseContext.prototype = Object.create(IfClause_Context.prototype);
IfLetClauseContext.prototype.constructor = IfLetClauseContext;

CWScriptParser.IfLetClauseContext = IfLetClauseContext;

IfLetClauseContext.prototype.IF = function() {
    return this.getToken(CWScriptParser.IF, 0);
};

IfLetClauseContext.prototype.letStmt_ = function() {
    return this.getTypedRuleContext(LetStmt_Context,0);
};

IfLetClauseContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};

function IfClauseContext(parser, ctx) {
	IfClause_Context.call(this, parser);
    this.predicate = null; // ExprContext;
    IfClause_Context.prototype.copyFrom.call(this, ctx);
    return this;
}

IfClauseContext.prototype = Object.create(IfClause_Context.prototype);
IfClauseContext.prototype.constructor = IfClauseContext;

CWScriptParser.IfClauseContext = IfClauseContext;

IfClauseContext.prototype.IF = function() {
    return this.getToken(CWScriptParser.IF, 0);
};

IfClauseContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};

IfClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};


CWScriptParser.IfClause_Context = IfClause_Context;

CWScriptParser.prototype.ifClause_ = function() {

    var localctx = new IfClause_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CWScriptParser.RULE_ifClause_);
    try {
        this.state = 913;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IfClauseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 905;
            this.match(CWScriptParser.IF);

            this.state = 906;
            localctx.predicate = this.expr(0);
            this.state = 907;
            this.fnBody();
            break;

        case 2:
            localctx = new IfLetClauseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 909;
            this.match(CWScriptParser.IF);
            this.state = 910;
            this.letStmt_();
            this.state = 911;
            this.fnBody();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElseIfClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_elseIfClauses;
    return this;
}

ElseIfClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseIfClausesContext.prototype.constructor = ElseIfClausesContext;

ElseIfClausesContext.prototype.ELSE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.ELSE);
    } else {
        return this.getToken(CWScriptParser.ELSE, i);
    }
};


ElseIfClausesContext.prototype.ifClause_ = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfClause_Context);
    } else {
        return this.getTypedRuleContext(IfClause_Context,i);
    }
};




CWScriptParser.ElseIfClausesContext = ElseIfClausesContext;

CWScriptParser.prototype.elseIfClauses = function() {

    var localctx = new ElseIfClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CWScriptParser.RULE_elseIfClauses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 915;
        		this.match(CWScriptParser.ELSE);
        		this.state = 916;
        		this.ifClause_();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 919; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,103, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_elseClause;
    return this;
}

ElseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseClauseContext.prototype.constructor = ElseClauseContext;

ElseClauseContext.prototype.ELSE = function() {
    return this.getToken(CWScriptParser.ELSE, 0);
};

ElseClauseContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};




CWScriptParser.ElseClauseContext = ElseClauseContext;

CWScriptParser.prototype.elseClause = function() {

    var localctx = new ElseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CWScriptParser.RULE_elseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        this.match(CWScriptParser.ELSE);
        this.state = 922;
        this.fnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStmt_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_forStmt_;
    return this;
}

ForStmt_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStmt_Context.prototype.constructor = ForStmt_Context;


 
ForStmt_Context.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ForInStmtContext(parser, ctx) {
	ForStmt_Context.call(this, parser);
    this.item = null; // LetLHSContext;
    this.iterItems = null; // ExprContext;
    ForStmt_Context.prototype.copyFrom.call(this, ctx);
    return this;
}

ForInStmtContext.prototype = Object.create(ForStmt_Context.prototype);
ForInStmtContext.prototype.constructor = ForInStmtContext;

CWScriptParser.ForInStmtContext = ForInStmtContext;

ForInStmtContext.prototype.FOR = function() {
    return this.getToken(CWScriptParser.FOR, 0);
};

ForInStmtContext.prototype.IN = function() {
    return this.getToken(CWScriptParser.IN, 0);
};

ForInStmtContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};

ForInStmtContext.prototype.letLHS = function() {
    return this.getTypedRuleContext(LetLHSContext,0);
};

ForInStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

function ForTimesStmtContext(parser, ctx) {
	ForStmt_Context.call(this, parser);
    ForStmt_Context.prototype.copyFrom.call(this, ctx);
    return this;
}

ForTimesStmtContext.prototype = Object.create(ForStmt_Context.prototype);
ForTimesStmtContext.prototype.constructor = ForTimesStmtContext;

CWScriptParser.ForTimesStmtContext = ForTimesStmtContext;

ForTimesStmtContext.prototype.FOR = function() {
    return this.getToken(CWScriptParser.FOR, 0);
};

ForTimesStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ForTimesStmtContext.prototype.TIMES = function() {
    return this.getToken(CWScriptParser.TIMES, 0);
};

ForTimesStmtContext.prototype.fnBody = function() {
    return this.getTypedRuleContext(FnBodyContext,0);
};


CWScriptParser.ForStmt_Context = ForStmt_Context;

CWScriptParser.prototype.forStmt_ = function() {

    var localctx = new ForStmt_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CWScriptParser.RULE_forStmt_);
    try {
        this.state = 935;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ForInStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 924;
            this.match(CWScriptParser.FOR);
            this.state = 925;
            localctx.item = this.letLHS();
            this.state = 926;
            this.match(CWScriptParser.IN);
            this.state = 927;
            localctx.iterItems = this.expr(0);
            this.state = 928;
            this.fnBody();
            break;

        case 2:
            localctx = new ForTimesStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 930;
            this.match(CWScriptParser.FOR);
            this.state = 931;
            this.expr(0);
            this.state = 932;
            this.match(CWScriptParser.TIMES);
            this.state = 933;
            this.fnBody();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_identList;
    this._ident = null; // IdentContext
    this.symbols = []; // of IdentContexts
    return this;
}

IdentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentListContext.prototype.constructor = IdentListContext;

IdentListContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

IdentListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.IdentListContext = IdentListContext;

CWScriptParser.prototype.identList = function() {

    var localctx = new IdentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CWScriptParser.RULE_identList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        localctx._ident = this.ident();
        localctx.symbols.push(localctx._ident);
        this.state = 942;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 938;
                this.match(CWScriptParser.COMMA);

                this.state = 939;
                localctx._ident = this.ident();
                localctx.symbols.push(localctx._ident); 
            }
            this.state = 944;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_exprList;
    return this;
}

ExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprListContext.prototype.constructor = ExprListContext;

ExprListContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.ExprListContext = ExprListContext;

CWScriptParser.prototype.exprList = function() {

    var localctx = new ExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CWScriptParser.RULE_exprList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.expr(0);
        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CWScriptParser.COMMA) {
            this.state = 946;
            this.match(CWScriptParser.COMMA);
            this.state = 947;
            this.expr(0);
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_namedExprList;
    return this;
}

NamedExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExprListContext.prototype.constructor = NamedExprListContext;

NamedExprListContext.prototype.namedExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExprContext);
    } else {
        return this.getTypedRuleContext(NamedExprContext,i);
    }
};

NamedExprListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.COMMA);
    } else {
        return this.getToken(CWScriptParser.COMMA, i);
    }
};





CWScriptParser.NamedExprListContext = NamedExprListContext;

CWScriptParser.prototype.namedExprList = function() {

    var localctx = new NamedExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CWScriptParser.RULE_namedExprList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        this.namedExpr();
        this.state = 958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CWScriptParser.COMMA) {
            this.state = 954;
            this.match(CWScriptParser.COMMA);
            this.state = 955;
            this.namedExpr();
            this.state = 960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_namedExpr;
    this.name = null; // IdentContext
    this.value = null; // ExprContext
    return this;
}

NamedExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExprContext.prototype.constructor = NamedExprContext;

NamedExprContext.prototype.COLON = function() {
    return this.getToken(CWScriptParser.COLON, 0);
};

NamedExprContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};




CWScriptParser.NamedExprContext = NamedExprContext;

CWScriptParser.prototype.namedExpr = function() {

    var localctx = new NamedExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CWScriptParser.RULE_namedExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        localctx.name = this.ident();
        this.state = 962;
        this.match(CWScriptParser.COLON);
        this.state = 963;
        localctx.value = this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_ident;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.Ident = function() {
    return this.getToken(CWScriptParser.Ident, 0);
};

IdentContext.prototype.reservedKeyword = function() {
    return this.getTypedRuleContext(ReservedKeywordContext,0);
};




CWScriptParser.IdentContext = IdentContext;

CWScriptParser.prototype.ident = function() {

    var localctx = new IdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CWScriptParser.RULE_ident);
    try {
        this.state = 967;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CWScriptParser.Ident:
            this.enterOuterAlt(localctx, 1);
            this.state = 965;
            this.match(CWScriptParser.Ident);
            break;
        case CWScriptParser.CONTRACT:
        case CWScriptParser.INTERFACE:
        case CWScriptParser.IMPORT:
        case CWScriptParser.IMPLEMENTS:
        case CWScriptParser.EXTENDS:
        case CWScriptParser.ERROR:
        case CWScriptParser.EVENT:
        case CWScriptParser.INSTANTIATE:
        case CWScriptParser.EXEC:
        case CWScriptParser.QUERY:
        case CWScriptParser.MIGRATE:
        case CWScriptParser.FOR:
        case CWScriptParser.IN:
        case CWScriptParser.FROM:
        case CWScriptParser.STATE:
        case CWScriptParser.TIMES:
        case CWScriptParser.IF:
        case CWScriptParser.ELSE:
        case CWScriptParser.AND:
        case CWScriptParser.OR:
        case CWScriptParser.TRUE:
        case CWScriptParser.FALSE:
        case CWScriptParser.LET:
        case CWScriptParser.RETURN:
        case CWScriptParser.STRUCT:
        case CWScriptParser.ENUM:
        case CWScriptParser.TYPE:
        case CWScriptParser.EMIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 966;
            this.reservedKeyword();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CwspecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_cwspec;
    return this;
}

CwspecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CwspecContext.prototype.constructor = CwspecContext;

CwspecContext.prototype.CWSPEC_LINE_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.CWSPEC_LINE_COMMENT);
    } else {
        return this.getToken(CWScriptParser.CWSPEC_LINE_COMMENT, i);
    }
};


CwspecContext.prototype.CWSPEC_BLOCK_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CWScriptParser.CWSPEC_BLOCK_COMMENT);
    } else {
        return this.getToken(CWScriptParser.CWSPEC_BLOCK_COMMENT, i);
    }
};





CWScriptParser.CwspecContext = CwspecContext;

CWScriptParser.prototype.cwspec = function() {

    var localctx = new CwspecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CWScriptParser.RULE_cwspec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 970; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 969;
        		_la = this._input.LA(1);
        		if(!(_la===CWScriptParser.CWSPEC_LINE_COMMENT || _la===CWScriptParser.CWSPEC_BLOCK_COMMENT)) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 972; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,109, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReservedKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CWScriptParser.RULE_reservedKeyword;
    return this;
}

ReservedKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedKeywordContext.prototype.constructor = ReservedKeywordContext;

ReservedKeywordContext.prototype.CONTRACT = function() {
    return this.getToken(CWScriptParser.CONTRACT, 0);
};

ReservedKeywordContext.prototype.INTERFACE = function() {
    return this.getToken(CWScriptParser.INTERFACE, 0);
};

ReservedKeywordContext.prototype.IMPORT = function() {
    return this.getToken(CWScriptParser.IMPORT, 0);
};

ReservedKeywordContext.prototype.IMPLEMENTS = function() {
    return this.getToken(CWScriptParser.IMPLEMENTS, 0);
};

ReservedKeywordContext.prototype.EXTENDS = function() {
    return this.getToken(CWScriptParser.EXTENDS, 0);
};

ReservedKeywordContext.prototype.ERROR = function() {
    return this.getToken(CWScriptParser.ERROR, 0);
};

ReservedKeywordContext.prototype.EVENT = function() {
    return this.getToken(CWScriptParser.EVENT, 0);
};

ReservedKeywordContext.prototype.INSTANTIATE = function() {
    return this.getToken(CWScriptParser.INSTANTIATE, 0);
};

ReservedKeywordContext.prototype.EXEC = function() {
    return this.getToken(CWScriptParser.EXEC, 0);
};

ReservedKeywordContext.prototype.QUERY = function() {
    return this.getToken(CWScriptParser.QUERY, 0);
};

ReservedKeywordContext.prototype.MIGRATE = function() {
    return this.getToken(CWScriptParser.MIGRATE, 0);
};

ReservedKeywordContext.prototype.FOR = function() {
    return this.getToken(CWScriptParser.FOR, 0);
};

ReservedKeywordContext.prototype.IN = function() {
    return this.getToken(CWScriptParser.IN, 0);
};

ReservedKeywordContext.prototype.FROM = function() {
    return this.getToken(CWScriptParser.FROM, 0);
};

ReservedKeywordContext.prototype.STATE = function() {
    return this.getToken(CWScriptParser.STATE, 0);
};

ReservedKeywordContext.prototype.TIMES = function() {
    return this.getToken(CWScriptParser.TIMES, 0);
};

ReservedKeywordContext.prototype.IF = function() {
    return this.getToken(CWScriptParser.IF, 0);
};

ReservedKeywordContext.prototype.ELSE = function() {
    return this.getToken(CWScriptParser.ELSE, 0);
};

ReservedKeywordContext.prototype.AND = function() {
    return this.getToken(CWScriptParser.AND, 0);
};

ReservedKeywordContext.prototype.OR = function() {
    return this.getToken(CWScriptParser.OR, 0);
};

ReservedKeywordContext.prototype.TRUE = function() {
    return this.getToken(CWScriptParser.TRUE, 0);
};

ReservedKeywordContext.prototype.FALSE = function() {
    return this.getToken(CWScriptParser.FALSE, 0);
};

ReservedKeywordContext.prototype.LET = function() {
    return this.getToken(CWScriptParser.LET, 0);
};

ReservedKeywordContext.prototype.RETURN = function() {
    return this.getToken(CWScriptParser.RETURN, 0);
};

ReservedKeywordContext.prototype.STRUCT = function() {
    return this.getToken(CWScriptParser.STRUCT, 0);
};

ReservedKeywordContext.prototype.ENUM = function() {
    return this.getToken(CWScriptParser.ENUM, 0);
};

ReservedKeywordContext.prototype.TYPE = function() {
    return this.getToken(CWScriptParser.TYPE, 0);
};

ReservedKeywordContext.prototype.EMIT = function() {
    return this.getToken(CWScriptParser.EMIT, 0);
};




CWScriptParser.ReservedKeywordContext = ReservedKeywordContext;

CWScriptParser.prototype.reservedKeyword = function() {

    var localctx = new ReservedKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CWScriptParser.RULE_reservedKeyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 974;
        _la = this._input.LA(1);
        if(!(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CWScriptParser.CONTRACT - 1)) | (1 << (CWScriptParser.INTERFACE - 1)) | (1 << (CWScriptParser.IMPORT - 1)) | (1 << (CWScriptParser.IMPLEMENTS - 1)) | (1 << (CWScriptParser.EXTENDS - 1)) | (1 << (CWScriptParser.ERROR - 1)) | (1 << (CWScriptParser.EVENT - 1)) | (1 << (CWScriptParser.INSTANTIATE - 1)) | (1 << (CWScriptParser.EXEC - 1)) | (1 << (CWScriptParser.QUERY - 1)) | (1 << (CWScriptParser.MIGRATE - 1)) | (1 << (CWScriptParser.FOR - 1)) | (1 << (CWScriptParser.IN - 1)) | (1 << (CWScriptParser.FROM - 1)) | (1 << (CWScriptParser.STATE - 1)) | (1 << (CWScriptParser.TIMES - 1)) | (1 << (CWScriptParser.IF - 1)) | (1 << (CWScriptParser.ELSE - 1)) | (1 << (CWScriptParser.AND - 1)) | (1 << (CWScriptParser.OR - 1)) | (1 << (CWScriptParser.TRUE - 1)) | (1 << (CWScriptParser.FALSE - 1)) | (1 << (CWScriptParser.LET - 1)) | (1 << (CWScriptParser.RETURN - 1)) | (1 << (CWScriptParser.STRUCT - 1)) | (1 << (CWScriptParser.ENUM - 1)) | (1 << (CWScriptParser.TYPE - 1)) | (1 << (CWScriptParser.EMIT - 1)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CWScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 50:
			return this.typeExpr_sempred(localctx, predIndex);
	case 69:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CWScriptParser.prototype.typeExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 7);
		case 1:
			return this.precpred(this._ctx, 5);
		case 2:
			return this.precpred(this._ctx, 4);
		case 3:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CWScriptParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 10);
		case 5:
			return this.precpred(this._ctx, 9);
		case 6:
			return this.precpred(this._ctx, 8);
		case 7:
			return this.precpred(this._ctx, 7);
		case 8:
			return this.precpred(this._ctx, 6);
		case 9:
			return this.precpred(this._ctx, 5);
		case 10:
			return this.precpred(this._ctx, 4);
		case 11:
			return this.precpred(this._ctx, 15);
		case 12:
			return this.precpred(this._ctx, 14);
		case 13:
			return this.precpred(this._ctx, 13);
		case 14:
			return this.precpred(this._ctx, 12);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CWScriptParser = CWScriptParser;

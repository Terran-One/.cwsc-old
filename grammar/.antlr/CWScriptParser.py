# Generated from /Users/william/t1/cwsc/grammar/CWScriptParser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3R")
        buf.write("\u03d1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\5\2\u00b2\n\2\3\2\7\2\u00b5\n\2\f\2")
        buf.write("\16\2\u00b8\13\2\3\2\3\2\3\3\3\3\3\3\5\3\u00bf\n\3\3\4")
        buf.write("\5\4\u00c2\n\4\3\4\3\4\3\4\3\4\5\4\u00c8\n\4\3\4\3\4\5")
        buf.write("\4\u00cc\n\4\3\4\3\4\3\5\3\5\3\5\7\5\u00d3\n\5\f\5\16")
        buf.write("\5\u00d6\13\5\3\6\3\6\3\6\3\6\3\6\5\6\u00dd\n\6\3\7\5")
        buf.write("\7\u00e0\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00e8\n\7\3\7")
        buf.write("\3\7\5\7\u00ec\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\5\b\u00f5")
        buf.write("\n\b\3\b\3\b\5\b\u00f9\n\b\3\t\3\t\3\t\7\t\u00fe\n\t\f")
        buf.write("\t\16\t\u0101\13\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0113\n\n\3\n\3\n\3\n")
        buf.write("\7\n\u0118\n\n\f\n\16\n\u011b\13\n\3\13\3\13\7\13\u011f")
        buf.write("\n\13\f\13\16\13\u0122\13\13\3\13\3\13\3\f\3\f\7\f\u0128")
        buf.write("\n\f\f\f\16\f\u012b\13\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u013c\n\r\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\5\16\u014b\n\16\3\17\5\17\u014e\n\17\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\7\20\u0156\n\20\f\20\16\20\u0159\13\20\3")
        buf.write("\20\3\20\3\21\5\21\u015e\n\21\3\21\3\21\3\22\5\22\u0163")
        buf.write("\n\22\3\22\3\22\3\22\3\23\3\23\3\23\7\23\u016b\n\23\f")
        buf.write("\23\16\23\u016e\13\23\3\23\3\23\3\24\5\24\u0173\n\24\3")
        buf.write("\24\3\24\3\25\5\25\u0178\n\25\3\25\3\25\3\25\5\25\u017d")
        buf.write("\n\25\3\26\3\26\3\26\7\26\u0182\n\26\f\26\16\26\u0185")
        buf.write("\13\26\3\26\3\26\3\27\5\27\u018a\n\27\3\27\3\27\5\27\u018e")
        buf.write("\n\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32")
        buf.write("\6\32\u019a\n\32\r\32\16\32\u019b\3\33\3\33\3\33\3\33")
        buf.write("\5\33\u01a2\n\33\3\33\3\33\3\33\3\34\5\34\u01a8\n\34\3")
        buf.write("\34\3\34\3\34\5\34\u01ad\n\34\3\34\3\34\3\35\5\35\u01b2")
        buf.write("\n\35\3\35\3\35\3\35\5\35\u01b7\n\35\3\36\5\36\u01ba\n")
        buf.write("\36\3\36\3\36\3\36\3\37\3\37\3\37\7\37\u01c2\n\37\f\37")
        buf.write("\16\37\u01c5\13\37\3\37\3\37\3 \5 \u01ca\n \3 \3 \3!\5")
        buf.write("!\u01cf\n!\3!\3!\3!\3\"\3\"\3\"\7\"\u01d7\n\"\f\"\16\"")
        buf.write("\u01da\13\"\3\"\3\"\3#\5#\u01df\n#\3#\3#\3$\5$\u01e4\n")
        buf.write("$\3$\3$\3$\3%\3%\3%\7%\u01ec\n%\f%\16%\u01ef\13%\3%\3")
        buf.write("%\3&\5&\u01f4\n&\3&\3&\3\'\5\'\u01f9\n\'\3\'\3\'\3\'\3")
        buf.write("(\3(\3(\7(\u0201\n(\f(\16(\u0204\13(\3(\3(\3)\5)\u0209")
        buf.write("\n)\3)\3)\3*\5*\u020e\n*\3*\3*\3*\5*\u0213\n*\3*\3*\3")
        buf.write("+\5+\u0218\n+\3+\3+\3+\5+\u021d\n+\3,\3,\3,\5,\u0222\n")
        buf.write(",\3-\3-\3-\5-\u0227\n-\3.\3.\3.\3/\3/\3\60\3\60\3\60\3")
        buf.write("\60\7\60\u0232\n\60\f\60\16\60\u0235\13\60\3\60\3\60\3")
        buf.write("\61\3\61\3\61\3\61\7\61\u023d\n\61\f\61\16\61\u0240\13")
        buf.write("\61\5\61\u0242\n\61\3\61\3\61\3\62\3\62\3\62\3\62\7\62")
        buf.write("\u024a\n\62\f\62\16\62\u024d\13\62\3\62\5\62\u0250\n\62")
        buf.write("\5\62\u0252\n\62\3\62\3\62\3\63\5\63\u0257\n\63\3\63\3")
        buf.write("\63\5\63\u025b\n\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\7\64\u0266\n\64\f\64\16\64\u0269\13\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u0270\n\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u027c\n\64\f\64")
        buf.write("\16\64\u027f\13\64\3\65\3\65\3\65\3\65\7\65\u0285\n\65")
        buf.write("\f\65\16\65\u0288\13\65\3\65\3\65\3\66\3\66\3\66\7\66")
        buf.write("\u028f\n\66\f\66\16\66\u0292\13\66\3\67\5\67\u0295\n\67")
        buf.write("\3\67\3\67\38\38\38\58\u029c\n8\39\59\u029f\n9\39\39\3")
        buf.write("9\3:\5:\u02a5\n:\3:\3:\3:\3:\3:\3:\3;\3;\5;\u02af\n;\3")
        buf.write(";\7;\u02b2\n;\f;\16;\u02b5\13;\3;\5;\u02b8\n;\5;\u02ba")
        buf.write("\n;\3<\5<\u02bd\n<\3<\3<\3<\3<\3<\3=\3=\3=\5=\u02c7\n")
        buf.write("=\3>\3>\3>\5>\u02cc\n>\3>\3>\3?\3?\3?\3@\3@\5@\u02d5\n")
        buf.write("@\3@\3@\3A\3A\3A\7A\u02dc\nA\fA\16A\u02df\13A\3B\3B\5")
        buf.write("B\u02e3\nB\3B\3B\3B\3C\3C\7C\u02ea\nC\fC\16C\u02ed\13")
        buf.write("C\3C\3C\3C\5C\u02f2\nC\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\5D\u0304\nD\3E\3E\3E\3E\3E\3F\3F\3F\5")
        buf.write("F\u030e\nF\3F\3F\3F\3F\5F\u0314\nF\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\5G\u0323\nG\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\5G\u0345\nG\3G\3G\3G\3G\5G\u034b\n")
        buf.write("G\3G\7G\u034e\nG\fG\16G\u0351\13G\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0364\nH\3I\3I\3I\5")
        buf.write("I\u0369\nI\3I\3I\3J\3J\3J\7J\u0370\nJ\fJ\16J\u0373\13")
        buf.write("J\3J\5J\u0376\nJ\3K\3K\3K\3K\3L\3L\5L\u037e\nL\3L\5L\u0381")
        buf.write("\nL\3M\3M\3M\3M\3M\3M\3M\3M\5M\u038b\nM\3N\3N\6N\u038f")
        buf.write("\nN\rN\16N\u0390\3O\3O\3O\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\5P\u03a1\nP\3Q\3Q\3Q\3Q\3Q\5Q\u03a8\nQ\3R\3R\3R\7")
        buf.write("R\u03ad\nR\fR\16R\u03b0\13R\3S\3S\3S\7S\u03b5\nS\fS\16")
        buf.write("S\u03b8\13S\3T\3T\3T\7T\u03bd\nT\fT\16T\u03c0\13T\3U\3")
        buf.write("U\3U\3U\3V\3V\5V\u03c8\nV\3W\6W\u03cb\nW\rW\16W\u03cc")
        buf.write("\3X\3X\3X\2\5\22f\u008cY\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\2\t\b")
        buf.write("\288<<>>@@BBDD\4\2;;==\5\2??AACC\3\2EH\3\29:\3\2NO\5\2")
        buf.write("\3\6\n\34\36\"\2\u0420\2\u00b1\3\2\2\2\4\u00be\3\2\2\2")
        buf.write("\6\u00c1\3\2\2\2\b\u00cf\3\2\2\2\n\u00d7\3\2\2\2\f\u00df")
        buf.write("\3\2\2\2\16\u00f8\3\2\2\2\20\u00fa\3\2\2\2\22\u0112\3")
        buf.write("\2\2\2\24\u011c\3\2\2\2\26\u0125\3\2\2\2\30\u013b\3\2")
        buf.write("\2\2\32\u014a\3\2\2\2\34\u014d\3\2\2\2\36\u0152\3\2\2")
        buf.write("\2 \u015d\3\2\2\2\"\u0162\3\2\2\2$\u0167\3\2\2\2&\u0172")
        buf.write("\3\2\2\2(\u0177\3\2\2\2*\u017e\3\2\2\2,\u0189\3\2\2\2")
        buf.write(".\u018f\3\2\2\2\60\u0193\3\2\2\2\62\u0199\3\2\2\2\64\u019d")
        buf.write("\3\2\2\2\66\u01a7\3\2\2\28\u01b1\3\2\2\2:\u01b9\3\2\2")
        buf.write("\2<\u01be\3\2\2\2>\u01c9\3\2\2\2@\u01ce\3\2\2\2B\u01d3")
        buf.write("\3\2\2\2D\u01de\3\2\2\2F\u01e3\3\2\2\2H\u01e8\3\2\2\2")
        buf.write("J\u01f3\3\2\2\2L\u01f8\3\2\2\2N\u01fd\3\2\2\2P\u0208\3")
        buf.write("\2\2\2R\u020d\3\2\2\2T\u0217\3\2\2\2V\u0221\3\2\2\2X\u0223")
        buf.write("\3\2\2\2Z\u0228\3\2\2\2\\\u022b\3\2\2\2^\u022d\3\2\2\2")
        buf.write("`\u0238\3\2\2\2b\u0245\3\2\2\2d\u0256\3\2\2\2f\u026f\3")
        buf.write("\2\2\2h\u0280\3\2\2\2j\u028b\3\2\2\2l\u0294\3\2\2\2n\u029b")
        buf.write("\3\2\2\2p\u029e\3\2\2\2r\u02a4\3\2\2\2t\u02b9\3\2\2\2")
        buf.write("v\u02bc\3\2\2\2x\u02c3\3\2\2\2z\u02c8\3\2\2\2|\u02cf\3")
        buf.write("\2\2\2~\u02d2\3\2\2\2\u0080\u02d8\3\2\2\2\u0082\u02e0")
        buf.write("\3\2\2\2\u0084\u02f1\3\2\2\2\u0086\u0303\3\2\2\2\u0088")
        buf.write("\u0305\3\2\2\2\u008a\u0313\3\2\2\2\u008c\u0322\3\2\2\2")
        buf.write("\u008e\u0363\3\2\2\2\u0090\u0365\3\2\2\2\u0092\u036c\3")
        buf.write("\2\2\2\u0094\u0377\3\2\2\2\u0096\u037b\3\2\2\2\u0098\u038a")
        buf.write("\3\2\2\2\u009a\u038e\3\2\2\2\u009c\u0392\3\2\2\2\u009e")
        buf.write("\u03a0\3\2\2\2\u00a0\u03a7\3\2\2\2\u00a2\u03a9\3\2\2\2")
        buf.write("\u00a4\u03b1\3\2\2\2\u00a6\u03b9\3\2\2\2\u00a8\u03c1\3")
        buf.write("\2\2\2\u00aa\u03c7\3\2\2\2\u00ac\u03ca\3\2\2\2\u00ae\u03ce")
        buf.write("\3\2\2\2\u00b0\u00b2\5\u00acW\2\u00b1\u00b0\3\2\2\2\u00b1")
        buf.write("\u00b2\3\2\2\2\u00b2\u00b6\3\2\2\2\u00b3\u00b5\5\4\3\2")
        buf.write("\u00b4\u00b3\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3")
        buf.write("\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b6")
        buf.write("\3\2\2\2\u00b9\u00ba\7\2\2\3\u00ba\3\3\2\2\2\u00bb\u00bf")
        buf.write("\5\6\4\2\u00bc\u00bf\5\f\7\2\u00bd\u00bf\5\16\b\2\u00be")
        buf.write("\u00bb\3\2\2\2\u00be\u00bc\3\2\2\2\u00be\u00bd\3\2\2\2")
        buf.write("\u00bf\5\3\2\2\2\u00c0\u00c2\5\u00acW\2\u00c1\u00c0\3")
        buf.write("\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c4")
        buf.write("\7\3\2\2\u00c4\u00c7\5\u00aaV\2\u00c5\u00c6\7\n\2\2\u00c6")
        buf.write("\u00c8\5\u00a2R\2\u00c7\u00c5\3\2\2\2\u00c7\u00c8\3\2")
        buf.write("\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00ca\7\6\2\2\u00ca\u00cc")
        buf.write("\5\b\5\2\u00cb\u00c9\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc")
        buf.write("\u00cd\3\2\2\2\u00cd\u00ce\5\24\13\2\u00ce\7\3\2\2\2\u00cf")
        buf.write("\u00d4\5\n\6\2\u00d0\u00d1\7+\2\2\u00d1\u00d3\5\n\6\2")
        buf.write("\u00d2\u00d0\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3")
        buf.write("\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\t\3\2\2\2\u00d6\u00d4")
        buf.write("\3\2\2\2\u00d7\u00dc\5\u00aaV\2\u00d8\u00d9\7&\2\2\u00d9")
        buf.write("\u00da\5\u00a2R\2\u00da\u00db\7\'\2\2\u00db\u00dd\3\2")
        buf.write("\2\2\u00dc\u00d8\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\13")
        buf.write("\3\2\2\2\u00de\u00e0\5\u00acW\2\u00df\u00de\3\2\2\2\u00df")
        buf.write("\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2\7\4\2\2")
        buf.write("\u00e2\u00e7\5\u00aaV\2\u00e3\u00e4\7&\2\2\u00e4\u00e5")
        buf.write("\5\u00aaV\2\u00e5\u00e6\7\'\2\2\u00e6\u00e8\3\2\2\2\u00e7")
        buf.write("\u00e3\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00eb\3\2\2\2")
        buf.write("\u00e9\u00ea\7\n\2\2\u00ea\u00ec\5\b\5\2\u00eb\u00e9\3")
        buf.write("\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ee")
        buf.write("\5\26\f\2\u00ee\r\3\2\2\2\u00ef\u00f0\7\5\2\2\u00f0\u00f9")
        buf.write("\7K\2\2\u00f1\u00f4\7\5\2\2\u00f2\u00f5\5\20\t\2\u00f3")
        buf.write("\u00f5\7?\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f3\3\2\2\2")
        buf.write("\u00f5\u00f6\3\2\2\2\u00f6\u00f7\7\23\2\2\u00f7\u00f9")
        buf.write("\7K\2\2\u00f8\u00ef\3\2\2\2\u00f8\u00f1\3\2\2\2\u00f9")
        buf.write("\17\3\2\2\2\u00fa\u00ff\5\22\n\2\u00fb\u00fc\7+\2\2\u00fc")
        buf.write("\u00fe\5\22\n\2\u00fd\u00fb\3\2\2\2\u00fe\u0101\3\2\2")
        buf.write("\2\u00ff\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\21\3")
        buf.write("\2\2\2\u0101\u00ff\3\2\2\2\u0102\u0103\b\n\1\2\u0103\u0104")
        buf.write("\7$\2\2\u0104\u0105\5\20\t\2\u0105\u0106\7%\2\2\u0106")
        buf.write("\u0113\3\2\2\2\u0107\u0113\5l\67\2\u0108\u0109\5l\67\2")
        buf.write("\u0109\u010a\7/\2\2\u010a\u010b\7(\2\2\u010b\u010c\5\20")
        buf.write("\t\2\u010c\u010d\7)\2\2\u010d\u0113\3\2\2\2\u010e\u010f")
        buf.write("\5l\67\2\u010f\u0110\7/\2\2\u0110\u0111\7?\2\2\u0111\u0113")
        buf.write("\3\2\2\2\u0112\u0102\3\2\2\2\u0112\u0107\3\2\2\2\u0112")
        buf.write("\u0108\3\2\2\2\u0112\u010e\3\2\2\2\u0113\u0119\3\2\2\2")
        buf.write("\u0114\u0115\f\3\2\2\u0115\u0116\7#\2\2\u0116\u0118\5")
        buf.write("\u00aaV\2\u0117\u0114\3\2\2\2\u0118\u011b\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\23\3\2\2\2\u011b")
        buf.write("\u0119\3\2\2\2\u011c\u0120\7(\2\2\u011d\u011f\5\30\r\2")
        buf.write("\u011e\u011d\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u011e\3")
        buf.write("\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2\u0122\u0120")
        buf.write("\3\2\2\2\u0123\u0124\7)\2\2\u0124\25\3\2\2\2\u0125\u0129")
        buf.write("\7(\2\2\u0126\u0128\5\32\16\2\u0127\u0126\3\2\2\2\u0128")
        buf.write("\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write("\u012a\u012c\3\2\2\2\u012b\u0129\3\2\2\2\u012c\u012d\7")
        buf.write(")\2\2\u012d\27\3\2\2\2\u012e\u013c\5n8\2\u012f\u013c\5")
        buf.write("\34\17\2\u0130\u013c\5\36\20\2\u0131\u013c\5\"\22\2\u0132")
        buf.write("\u013c\5$\23\2\u0133\u013c\5(\25\2\u0134\u013c\5*\26\2")
        buf.write("\u0135\u013c\5\66\34\2\u0136\u013c\5:\36\2\u0137\u013c")
        buf.write("\5<\37\2\u0138\u013c\5F$\2\u0139\u013c\5H%\2\u013a\u013c")
        buf.write("\5R*\2\u013b\u012e\3\2\2\2\u013b\u012f\3\2\2\2\u013b\u0130")
        buf.write("\3\2\2\2\u013b\u0131\3\2\2\2\u013b\u0132\3\2\2\2\u013b")
        buf.write("\u0133\3\2\2\2\u013b\u0134\3\2\2\2\u013b\u0135\3\2\2\2")
        buf.write("\u013b\u0136\3\2\2\2\u013b\u0137\3\2\2\2\u013b\u0138\3")
        buf.write("\2\2\2\u013b\u0139\3\2\2\2\u013b\u013a\3\2\2\2\u013c\31")
        buf.write("\3\2\2\2\u013d\u014b\5n8\2\u013e\u014b\5\34\17\2\u013f")
        buf.write("\u014b\5\36\20\2\u0140\u014b\5\"\22\2\u0141\u014b\5$\23")
        buf.write("\2\u0142\u014b\5(\25\2\u0143\u014b\5*\26\2\u0144\u014b")
        buf.write("\58\35\2\u0145\u014b\5@!\2\u0146\u014b\5B\"\2\u0147\u014b")
        buf.write("\5L\'\2\u0148\u014b\5N(\2\u0149\u014b\5T+\2\u014a\u013d")
        buf.write("\3\2\2\2\u014a\u013e\3\2\2\2\u014a\u013f\3\2\2\2\u014a")
        buf.write("\u0140\3\2\2\2\u014a\u0141\3\2\2\2\u014a\u0142\3\2\2\2")
        buf.write("\u014a\u0143\3\2\2\2\u014a\u0144\3\2\2\2\u014a\u0145\3")
        buf.write("\2\2\2\u014a\u0146\3\2\2\2\u014a\u0147\3\2\2\2\u014a\u0148")
        buf.write("\3\2\2\2\u014a\u0149\3\2\2\2\u014b\33\3\2\2\2\u014c\u014e")
        buf.write("\5\u00acW\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u014f\3\2\2\2\u014f\u0150\7\13\2\2\u0150\u0151\5V,\2")
        buf.write("\u0151\35\3\2\2\2\u0152\u0153\7\13\2\2\u0153\u0157\7(")
        buf.write("\2\2\u0154\u0156\5 \21\2\u0155\u0154\3\2\2\2\u0156\u0159")
        buf.write("\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u015a\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015b\7)\2\2")
        buf.write("\u015b\37\3\2\2\2\u015c\u015e\5\u00acW\2\u015d\u015c\3")
        buf.write("\2\2\2\u015d\u015e\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0160")
        buf.write("\5V,\2\u0160!\3\2\2\2\u0161\u0163\5\u00acW\2\u0162\u0161")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0165\7\f\2\2\u0165\u0166\5V,\2\u0166#\3\2\2\2\u0167")
        buf.write("\u0168\7\f\2\2\u0168\u016c\7(\2\2\u0169\u016b\5&\24\2")
        buf.write("\u016a\u0169\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a\3")
        buf.write("\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e\u016c")
        buf.write("\3\2\2\2\u016f\u0170\7)\2\2\u0170%\3\2\2\2\u0171\u0173")
        buf.write("\5\u00acW\2\u0172\u0171\3\2\2\2\u0172\u0173\3\2\2\2\u0173")
        buf.write("\u0174\3\2\2\2\u0174\u0175\5V,\2\u0175\'\3\2\2\2\u0176")
        buf.write("\u0178\5\u00acW\2\u0177\u0176\3\2\2\2\u0177\u0178\3\2")
        buf.write("\2\2\u0178\u0179\3\2\2\2\u0179\u017c\7\24\2\2\u017a\u017d")
        buf.write("\5.\30\2\u017b\u017d\5\60\31\2\u017c\u017a\3\2\2\2\u017c")
        buf.write("\u017b\3\2\2\2\u017d)\3\2\2\2\u017e\u017f\7\24\2\2\u017f")
        buf.write("\u0183\7(\2\2\u0180\u0182\5,\27\2\u0181\u0180\3\2\2\2")
        buf.write("\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184\3")
        buf.write("\2\2\2\u0184\u0186\3\2\2\2\u0185\u0183\3\2\2\2\u0186\u0187")
        buf.write("\7)\2\2\u0187+\3\2\2\2\u0188\u018a\5\u00acW\2\u0189\u0188")
        buf.write("\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018d\3\2\2\2\u018b")
        buf.write("\u018e\5.\30\2\u018c\u018e\5\60\31\2\u018d\u018b\3\2\2")
        buf.write("\2\u018d\u018c\3\2\2\2\u018e-\3\2\2\2\u018f\u0190\5\u00aa")
        buf.write("V\2\u0190\u0191\7.\2\2\u0191\u0192\5f\64\2\u0192/\3\2")
        buf.write("\2\2\u0193\u0194\5\u00aaV\2\u0194\u0195\5\62\32\2\u0195")
        buf.write("\u0196\7.\2\2\u0196\u0197\5f\64\2\u0197\61\3\2\2\2\u0198")
        buf.write("\u019a\5\64\33\2\u0199\u0198\3\2\2\2\u019a\u019b\3\2\2")
        buf.write("\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\63\3")
        buf.write("\2\2\2\u019d\u01a1\7&\2\2\u019e\u019f\5\u00aaV\2\u019f")
        buf.write("\u01a0\7.\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019e\3\2\2\2")
        buf.write("\u01a1\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\5")
        buf.write("f\64\2\u01a4\u01a5\7\'\2\2\u01a5\65\3\2\2\2\u01a6\u01a8")
        buf.write("\5\u00acW\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9\u01aa\7\r\2\2\u01aa\u01ac\5~@\2\u01ab")
        buf.write("\u01ad\5|?\2\u01ac\u01ab\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad")
        buf.write("\u01ae\3\2\2\2\u01ae\u01af\5\u0084C\2\u01af\67\3\2\2\2")
        buf.write("\u01b0\u01b2\5\u00acW\2\u01b1\u01b0\3\2\2\2\u01b1\u01b2")
        buf.write("\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4\7\r\2\2\u01b4")
        buf.write("\u01b6\5~@\2\u01b5\u01b7\5|?\2\u01b6\u01b5\3\2\2\2\u01b6")
        buf.write("\u01b7\3\2\2\2\u01b79\3\2\2\2\u01b8\u01ba\5\u00acW\2\u01b9")
        buf.write("\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb\3\2\2\2")
        buf.write("\u01bb\u01bc\7\16\2\2\u01bc\u01bd\5z>\2\u01bd;\3\2\2\2")
        buf.write("\u01be\u01bf\7\16\2\2\u01bf\u01c3\7(\2\2\u01c0\u01c2\5")
        buf.write("> \2\u01c1\u01c0\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3\u01c1")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c6\3\2\2\2\u01c5")
        buf.write("\u01c3\3\2\2\2\u01c6\u01c7\7)\2\2\u01c7=\3\2\2\2\u01c8")
        buf.write("\u01ca\5\u00acW\2\u01c9\u01c8\3\2\2\2\u01c9\u01ca\3\2")
        buf.write("\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cc\5z>\2\u01cc?\3\2")
        buf.write("\2\2\u01cd\u01cf\5\u00acW\2\u01ce\u01cd\3\2\2\2\u01ce")
        buf.write("\u01cf\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\7\16\2")
        buf.write("\2\u01d1\u01d2\5x=\2\u01d2A\3\2\2\2\u01d3\u01d4\7\16\2")
        buf.write("\2\u01d4\u01d8\7(\2\2\u01d5\u01d7\5D#\2\u01d6\u01d5\3")
        buf.write("\2\2\2\u01d7\u01da\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d8\u01d9")
        buf.write("\3\2\2\2\u01d9\u01db\3\2\2\2\u01da\u01d8\3\2\2\2\u01db")
        buf.write("\u01dc\7)\2\2\u01dcC\3\2\2\2\u01dd\u01df\5\u00acW\2\u01de")
        buf.write("\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01e1\5x=\2\u01e1E\3\2\2\2\u01e2\u01e4\5\u00ac")
        buf.write("W\2\u01e3\u01e2\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5")
        buf.write("\3\2\2\2\u01e5\u01e6\7\17\2\2\u01e6\u01e7\5z>\2\u01e7")
        buf.write("G\3\2\2\2\u01e8\u01e9\7\17\2\2\u01e9\u01ed\7(\2\2\u01ea")
        buf.write("\u01ec\5J&\2\u01eb\u01ea\3\2\2\2\u01ec\u01ef\3\2\2\2\u01ed")
        buf.write("\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2")
        buf.write("\u01ef\u01ed\3\2\2\2\u01f0\u01f1\7)\2\2\u01f1I\3\2\2\2")
        buf.write("\u01f2\u01f4\5\u00acW\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\5z>\2\u01f6K")
        buf.write("\3\2\2\2\u01f7\u01f9\5\u00acW\2\u01f8\u01f7\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\7\17\2")
        buf.write("\2\u01fb\u01fc\5x=\2\u01fcM\3\2\2\2\u01fd\u01fe\7\17\2")
        buf.write("\2\u01fe\u0202\7(\2\2\u01ff\u0201\5P)\2\u0200\u01ff\3")
        buf.write("\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203")
        buf.write("\3\2\2\2\u0203\u0205\3\2\2\2\u0204\u0202\3\2\2\2\u0205")
        buf.write("\u0206\7)\2\2\u0206O\3\2\2\2\u0207\u0209\5\u00acW\2\u0208")
        buf.write("\u0207\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020a\3\2\2\2")
        buf.write("\u020a\u020b\5x=\2\u020bQ\3\2\2\2\u020c\u020e\5\u00ac")
        buf.write("W\2\u020d\u020c\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u020f")
        buf.write("\3\2\2\2\u020f\u0210\7\20\2\2\u0210\u0212\5~@\2\u0211")
        buf.write("\u0213\5|?\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0214\3\2\2\2\u0214\u0215\5\u0084C\2\u0215S\3\2\2\2\u0216")
        buf.write("\u0218\5\u00acW\2\u0217\u0216\3\2\2\2\u0217\u0218\3\2")
        buf.write("\2\2\u0218\u0219\3\2\2\2\u0219\u021a\7\20\2\2\u021a\u021c")
        buf.write("\5~@\2\u021b\u021d\5|?\2\u021c\u021b\3\2\2\2\u021c\u021d")
        buf.write("\3\2\2\2\u021dU\3\2\2\2\u021e\u0222\5X-\2\u021f\u0222")
        buf.write("\5Z.\2\u0220\u0222\5\\/\2\u0221\u021e\3\2\2\2\u0221\u021f")
        buf.write("\3\2\2\2\u0221\u0220\3\2\2\2\u0222W\3\2\2\2\u0223\u0226")
        buf.write("\5\u00aaV\2\u0224\u0227\5`\61\2\u0225\u0227\5b\62\2\u0226")
        buf.write("\u0224\3\2\2\2\u0226\u0225\3\2\2\2\u0227Y\3\2\2\2\u0228")
        buf.write("\u0229\5\u00aaV\2\u0229\u022a\5^\60\2\u022a[\3\2\2\2\u022b")
        buf.write("\u022c\5\u00aaV\2\u022c]\3\2\2\2\u022d\u022e\7$\2\2\u022e")
        buf.write("\u0233\5f\64\2\u022f\u0230\7+\2\2\u0230\u0232\5f\64\2")
        buf.write("\u0231\u022f\3\2\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3")
        buf.write("\2\2\2\u0233\u0234\3\2\2\2\u0234\u0236\3\2\2\2\u0235\u0233")
        buf.write("\3\2\2\2\u0236\u0237\7%\2\2\u0237_\3\2\2\2\u0238\u0241")
        buf.write("\7$\2\2\u0239\u023e\5d\63\2\u023a\u023b\7+\2\2\u023b\u023d")
        buf.write("\5d\63\2\u023c\u023a\3\2\2\2\u023d\u0240\3\2\2\2\u023e")
        buf.write("\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0242\3\2\2\2")
        buf.write("\u0240\u023e\3\2\2\2\u0241\u0239\3\2\2\2\u0241\u0242\3")
        buf.write("\2\2\2\u0242\u0243\3\2\2\2\u0243\u0244\7%\2\2\u0244a\3")
        buf.write("\2\2\2\u0245\u0251\7(\2\2\u0246\u024b\5d\63\2\u0247\u0248")
        buf.write("\7+\2\2\u0248\u024a\5d\63\2\u0249\u0247\3\2\2\2\u024a")
        buf.write("\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2")
        buf.write("\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024e\u0250\7")
        buf.write("+\2\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0252")
        buf.write("\3\2\2\2\u0251\u0246\3\2\2\2\u0251\u0252\3\2\2\2\u0252")
        buf.write("\u0253\3\2\2\2\u0253\u0254\7)\2\2\u0254c\3\2\2\2\u0255")
        buf.write("\u0257\5\u00acW\2\u0256\u0255\3\2\2\2\u0256\u0257\3\2")
        buf.write("\2\2\u0257\u0258\3\2\2\2\u0258\u025a\5\u00aaV\2\u0259")
        buf.write("\u025b\7,\2\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2")
        buf.write("\u025b\u025c\3\2\2\2\u025c\u025d\7.\2\2\u025d\u025e\5")
        buf.write("f\64\2\u025ee\3\2\2\2\u025f\u0260\b\64\1\2\u0260\u0270")
        buf.write("\5l\67\2\u0261\u0262\7$\2\2\u0262\u0267\5f\64\2\u0263")
        buf.write("\u0264\7+\2\2\u0264\u0266\5f\64\2\u0265\u0263\3\2\2\2")
        buf.write("\u0266\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3")
        buf.write("\2\2\2\u0268\u026a\3\2\2\2\u0269\u0267\3\2\2\2\u026a\u026b")
        buf.write("\7%\2\2\u026b\u0270\3\2\2\2\u026c\u026d\7\63\2\2\u026d")
        buf.write("\u0270\5f\64\5\u026e\u0270\5n8\2\u026f\u025f\3\2\2\2\u026f")
        buf.write("\u0261\3\2\2\2\u026f\u026c\3\2\2\2\u026f\u026e\3\2\2\2")
        buf.write("\u0270\u027d\3\2\2\2\u0271\u0272\f\t\2\2\u0272\u027c\5")
        buf.write("h\65\2\u0273\u0274\f\7\2\2\u0274\u027c\7,\2\2\u0275\u0276")
        buf.write("\f\6\2\2\u0276\u0277\7&\2\2\u0277\u027c\7\'\2\2\u0278")
        buf.write("\u0279\f\4\2\2\u0279\u027a\7\60\2\2\u027a\u027c\5\u00aa")
        buf.write("V\2\u027b\u0271\3\2\2\2\u027b\u0273\3\2\2\2\u027b\u0275")
        buf.write("\3\2\2\2\u027b\u0278\3\2\2\2\u027c\u027f\3\2\2\2\u027d")
        buf.write("\u027b\3\2\2\2\u027d\u027e\3\2\2\2\u027eg\3\2\2\2\u027f")
        buf.write("\u027d\3\2\2\2\u0280\u0281\7E\2\2\u0281\u0286\5f\64\2")
        buf.write("\u0282\u0283\7+\2\2\u0283\u0285\5f\64\2\u0284\u0282\3")
        buf.write("\2\2\2\u0285\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286\u0287")
        buf.write("\3\2\2\2\u0287\u0289\3\2\2\2\u0288\u0286\3\2\2\2\u0289")
        buf.write("\u028a\7G\2\2\u028ai\3\2\2\2\u028b\u0290\5\u00aaV\2\u028c")
        buf.write("\u028d\7/\2\2\u028d\u028f\5\u00aaV\2\u028e\u028c\3\2\2")
        buf.write("\2\u028f\u0292\3\2\2\2\u0290\u028e\3\2\2\2\u0290\u0291")
        buf.write("\3\2\2\2\u0291k\3\2\2\2\u0292\u0290\3\2\2\2\u0293\u0295")
        buf.write("\7/\2\2\u0294\u0293\3\2\2\2\u0294\u0295\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296\u0297\5j\66\2\u0297m\3\2\2\2\u0298")
        buf.write("\u029c\5p9\2\u0299\u029c\5r:\2\u029a\u029c\5v<\2\u029b")
        buf.write("\u0298\3\2\2\2\u029b\u0299\3\2\2\2\u029b\u029a\3\2\2\2")
        buf.write("\u029co\3\2\2\2\u029d\u029f\5\u00acW\2\u029e\u029d\3\2")
        buf.write("\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a1")
        buf.write("\7\37\2\2\u02a1\u02a2\5V,\2\u02a2q\3\2\2\2\u02a3\u02a5")
        buf.write("\5\u00acW\2\u02a4\u02a3\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5")
        buf.write("\u02a6\3\2\2\2\u02a6\u02a7\7 \2\2\u02a7\u02a8\5\u00aa")
        buf.write("V\2\u02a8\u02a9\7(\2\2\u02a9\u02aa\5t;\2\u02aa\u02ab\7")
        buf.write(")\2\2\u02abs\3\2\2\2\u02ac\u02b3\5V,\2\u02ad\u02af\7+")
        buf.write("\2\2\u02ae\u02ad\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0")
        buf.write("\3\2\2\2\u02b0\u02b2\5V,\2\u02b1\u02ae\3\2\2\2\u02b2\u02b5")
        buf.write("\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4")
        buf.write("\u02b7\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b6\u02b8\7+\2\2")
        buf.write("\u02b7\u02b6\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02ba\3")
        buf.write("\2\2\2\u02b9\u02ac\3\2\2\2\u02b9\u02ba\3\2\2\2\u02bau")
        buf.write("\3\2\2\2\u02bb\u02bd\5\u00acW\2\u02bc\u02bb\3\2\2\2\u02bc")
        buf.write("\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\7!\2\2")
        buf.write("\u02bf\u02c0\5\u00aaV\2\u02c0\u02c1\78\2\2\u02c1\u02c2")
        buf.write("\5f\64\2\u02c2w\3\2\2\2\u02c3\u02c4\5\u00aaV\2\u02c4\u02c6")
        buf.write("\5~@\2\u02c5\u02c7\5|?\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7")
        buf.write("\3\2\2\2\u02c7y\3\2\2\2\u02c8\u02c9\5\u00aaV\2\u02c9\u02cb")
        buf.write("\5~@\2\u02ca\u02cc\5|?\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\5\u0084C\2\u02ce")
        buf.write("{\3\2\2\2\u02cf\u02d0\7\64\2\2\u02d0\u02d1\5f\64\2\u02d1")
        buf.write("}\3\2\2\2\u02d2\u02d4\7$\2\2\u02d3\u02d5\5\u0080A\2\u02d4")
        buf.write("\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2")
        buf.write("\u02d6\u02d7\7%\2\2\u02d7\177\3\2\2\2\u02d8\u02dd\5\u0082")
        buf.write("B\2\u02d9\u02da\7+\2\2\u02da\u02dc\5\u0082B\2\u02db\u02d9")
        buf.write("\3\2\2\2\u02dc\u02df\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd")
        buf.write("\u02de\3\2\2\2\u02de\u0081\3\2\2\2\u02df\u02dd\3\2\2\2")
        buf.write("\u02e0\u02e2\5\u00aaV\2\u02e1\u02e3\7,\2\2\u02e2\u02e1")
        buf.write("\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4")
        buf.write("\u02e5\7.\2\2\u02e5\u02e6\5f\64\2\u02e6\u0083\3\2\2\2")
        buf.write("\u02e7\u02eb\7(\2\2\u02e8\u02ea\5\u0086D\2\u02e9\u02e8")
        buf.write("\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb")
        buf.write("\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2\u02ed\u02eb\3\2\2\2")
        buf.write("\u02ee\u02f2\7)\2\2\u02ef\u02f0\7\65\2\2\u02f0\u02f2\5")
        buf.write("\u0086D\2\u02f1\u02e7\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f2")
        buf.write("\u0085\3\2\2\2\u02f3\u0304\5\u0088E\2\u02f4\u02f5\5\u008c")
        buf.write("G\2\u02f5\u02f6\t\2\2\2\u02f6\u02f7\5\u008cG\2\u02f7\u0304")
        buf.write("\3\2\2\2\u02f8\u0304\5\u0096L\2\u02f9\u0304\5\u009eP\2")
        buf.write("\u02fa\u02fb\7\16\2\2\u02fb\u0304\5\u008cG\2\u02fc\u02fd")
        buf.write("\7\"\2\2\u02fd\u0304\5\u008cG\2\u02fe\u02ff\7\36\2\2\u02ff")
        buf.write("\u0304\5\u008cG\2\u0300\u0301\7\35\2\2\u0301\u0304\5\u008c")
        buf.write("G\2\u0302\u0304\5\u008cG\2\u0303\u02f3\3\2\2\2\u0303\u02f4")
        buf.write("\3\2\2\2\u0303\u02f8\3\2\2\2\u0303\u02f9\3\2\2\2\u0303")
        buf.write("\u02fa\3\2\2\2\u0303\u02fc\3\2\2\2\u0303\u02fe\3\2\2\2")
        buf.write("\u0303\u0300\3\2\2\2\u0303\u0302\3\2\2\2\u0304\u0087\3")
        buf.write("\2\2\2\u0305\u0306\7\34\2\2\u0306\u0307\5\u008aF\2\u0307")
        buf.write("\u0308\78\2\2\u0308\u0309\5\u008cG\2\u0309\u0089\3\2\2")
        buf.write("\2\u030a\u030d\5\u00aaV\2\u030b\u030c\7.\2\2\u030c\u030e")
        buf.write("\5f\64\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e")
        buf.write("\u0314\3\2\2\2\u030f\u0310\7(\2\2\u0310\u0311\5\u00a2")
        buf.write("R\2\u0311\u0312\7)\2\2\u0312\u0314\3\2\2\2\u0313\u030a")
        buf.write("\3\2\2\2\u0313\u030f\3\2\2\2\u0314\u008b\3\2\2\2\u0315")
        buf.write("\u0316\bG\1\2\u0316\u0317\7$\2\2\u0317\u0318\5\u008cG")
        buf.write("\2\u0318\u0319\7%\2\2\u0319\u0323\3\2\2\2\u031a\u031b")
        buf.write("\t\3\2\2\u031b\u0323\5\u008cG\16\u031c\u031d\7-\2\2\u031d")
        buf.write("\u0323\5\u008cG\r\u031e\u0323\5\u0096L\2\u031f\u0320\7")
        buf.write("\17\2\2\u0320\u0323\5\u008cG\4\u0321\u0323\5\u008eH\2")
        buf.write("\u0322\u0315\3\2\2\2\u0322\u031a\3\2\2\2\u0322\u031c\3")
        buf.write("\2\2\2\u0322\u031e\3\2\2\2\u0322\u031f\3\2\2\2\u0322\u0321")
        buf.write("\3\2\2\2\u0323\u034f\3\2\2\2\u0324\u0325\f\f\2\2\u0325")
        buf.write("\u0326\7I\2\2\u0326\u034e\5\u008cG\r\u0327\u0328\f\13")
        buf.write("\2\2\u0328\u0329\t\4\2\2\u0329\u034e\5\u008cG\f\u032a")
        buf.write("\u032b\f\n\2\2\u032b\u032c\t\3\2\2\u032c\u034e\5\u008c")
        buf.write("G\13\u032d\u032e\f\t\2\2\u032e\u032f\t\5\2\2\u032f\u034e")
        buf.write("\5\u008cG\n\u0330\u0331\f\b\2\2\u0331\u0332\t\6\2\2\u0332")
        buf.write("\u034e\5\u008cG\t\u0333\u0334\f\7\2\2\u0334\u0335\7\30")
        buf.write("\2\2\u0335\u034e\5\u008cG\b\u0336\u0337\f\6\2\2\u0337")
        buf.write("\u0338\7\31\2\2\u0338\u034e\5\u008cG\7\u0339\u033a\f\22")
        buf.write("\2\2\u033a\u033b\7*\2\2\u033b\u034e\5\u00aaV\2\u033c\u033d")
        buf.write("\f\21\2\2\u033d\u033e\7&\2\2\u033e\u033f\5\u008cG\2\u033f")
        buf.write("\u0340\7\'\2\2\u0340\u034e\3\2\2\2\u0341\u0342\f\20\2")
        buf.write("\2\u0342\u0344\7$\2\2\u0343\u0345\5\u00a4S\2\u0344\u0343")
        buf.write("\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u034e\7%\2\2\u0347\u0348\f\17\2\2\u0348\u034a\7$\2\2")
        buf.write("\u0349\u034b\5\u00a6T\2\u034a\u0349\3\2\2\2\u034a\u034b")
        buf.write("\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034e\7%\2\2\u034d")
        buf.write("\u0324\3\2\2\2\u034d\u0327\3\2\2\2\u034d\u032a\3\2\2\2")
        buf.write("\u034d\u032d\3\2\2\2\u034d\u0330\3\2\2\2\u034d\u0333\3")
        buf.write("\2\2\2\u034d\u0336\3\2\2\2\u034d\u0339\3\2\2\2\u034d\u033c")
        buf.write("\3\2\2\2\u034d\u0341\3\2\2\2\u034d\u0347\3\2\2\2\u034e")
        buf.write("\u0351\3\2\2\2\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2")
        buf.write("\u0350\u008d\3\2\2\2\u0351\u034f\3\2\2\2\u0352\u0353\7")
        buf.write("$\2\2\u0353\u0364\7%\2\2\u0354\u0364\5\u0090I\2\u0355")
        buf.write("\u0356\7$\2\2\u0356\u0357\5\u00a4S\2\u0357\u0358\7%\2")
        buf.write("\2\u0358\u0364\3\2\2\2\u0359\u035a\7&\2\2\u035a\u035b")
        buf.write("\5\u00a4S\2\u035b\u035c\7\'\2\2\u035c\u0364\3\2\2\2\u035d")
        buf.write("\u0364\7K\2\2\u035e\u0364\7L\2\2\u035f\u0364\7M\2\2\u0360")
        buf.write("\u0364\7\32\2\2\u0361\u0364\7\33\2\2\u0362\u0364\5\u00aa")
        buf.write("V\2\u0363\u0352\3\2\2\2\u0363\u0354\3\2\2\2\u0363\u0355")
        buf.write("\3\2\2\2\u0363\u0359\3\2\2\2\u0363\u035d\3\2\2\2\u0363")
        buf.write("\u035e\3\2\2\2\u0363\u035f\3\2\2\2\u0363\u0360\3\2\2\2")
        buf.write("\u0363\u0361\3\2\2\2\u0363\u0362\3\2\2\2\u0364\u008f\3")
        buf.write("\2\2\2\u0365\u0366\5l\67\2\u0366\u0368\7(\2\2\u0367\u0369")
        buf.write("\5\u0092J\2\u0368\u0367\3\2\2\2\u0368\u0369\3\2\2\2\u0369")
        buf.write("\u036a\3\2\2\2\u036a\u036b\7)\2\2\u036b\u0091\3\2\2\2")
        buf.write("\u036c\u0371\5\u0094K\2\u036d\u036e\7+\2\2\u036e\u0370")
        buf.write("\5\u0094K\2\u036f\u036d\3\2\2\2\u0370\u0373\3\2\2\2\u0371")
        buf.write("\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0375\3\2\2\2")
        buf.write("\u0373\u0371\3\2\2\2\u0374\u0376\7+\2\2\u0375\u0374\3")
        buf.write("\2\2\2\u0375\u0376\3\2\2\2\u0376\u0093\3\2\2\2\u0377\u0378")
        buf.write("\5\u00aaV\2\u0378\u0379\7.\2\2\u0379\u037a\5\u008cG\2")
        buf.write("\u037a\u0095\3\2\2\2\u037b\u037d\5\u0098M\2\u037c\u037e")
        buf.write("\5\u009aN\2\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e")
        buf.write("\u0380\3\2\2\2\u037f\u0381\5\u009cO\2\u0380\u037f\3\2")
        buf.write("\2\2\u0380\u0381\3\2\2\2\u0381\u0097\3\2\2\2\u0382\u0383")
        buf.write("\7\26\2\2\u0383\u0384\5\u008cG\2\u0384\u0385\5\u0084C")
        buf.write("\2\u0385\u038b\3\2\2\2\u0386\u0387\7\26\2\2\u0387\u0388")
        buf.write("\5\u0088E\2\u0388\u0389\5\u0084C\2\u0389\u038b\3\2\2\2")
        buf.write("\u038a\u0382\3\2\2\2\u038a\u0386\3\2\2\2\u038b\u0099\3")
        buf.write("\2\2\2\u038c\u038d\7\27\2\2\u038d\u038f\5\u0098M\2\u038e")
        buf.write("\u038c\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u038e\3\2\2\2")
        buf.write("\u0390\u0391\3\2\2\2\u0391\u009b\3\2\2\2\u0392\u0393\7")
        buf.write("\27\2\2\u0393\u0394\5\u0084C\2\u0394\u009d\3\2\2\2\u0395")
        buf.write("\u0396\7\21\2\2\u0396\u0397\5\u00a0Q\2\u0397\u0398\7\22")
        buf.write("\2\2\u0398\u0399\5\u008cG\2\u0399\u039a\5\u0084C\2\u039a")
        buf.write("\u03a1\3\2\2\2\u039b\u039c\7\21\2\2\u039c\u039d\5\u008c")
        buf.write("G\2\u039d\u039e\7\25\2\2\u039e\u039f\5\u0084C\2\u039f")
        buf.write("\u03a1\3\2\2\2\u03a0\u0395\3\2\2\2\u03a0\u039b\3\2\2\2")
        buf.write("\u03a1\u009f\3\2\2\2\u03a2\u03a8\5\u00aaV\2\u03a3\u03a4")
        buf.write("\7(\2\2\u03a4\u03a5\5\u00a2R\2\u03a5\u03a6\7)\2\2\u03a6")
        buf.write("\u03a8\3\2\2\2\u03a7\u03a2\3\2\2\2\u03a7\u03a3\3\2\2\2")
        buf.write("\u03a8\u00a1\3\2\2\2\u03a9\u03ae\5\u00aaV\2\u03aa\u03ab")
        buf.write("\7+\2\2\u03ab\u03ad\5\u00aaV\2\u03ac\u03aa\3\2\2\2\u03ad")
        buf.write("\u03b0\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2")
        buf.write("\u03af\u00a3\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b1\u03b6\5")
        buf.write("\u008cG\2\u03b2\u03b3\7+\2\2\u03b3\u03b5\5\u008cG\2\u03b4")
        buf.write("\u03b2\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2")
        buf.write("\u03b6\u03b7\3\2\2\2\u03b7\u00a5\3\2\2\2\u03b8\u03b6\3")
        buf.write("\2\2\2\u03b9\u03be\5\u00a8U\2\u03ba\u03bb\7+\2\2\u03bb")
        buf.write("\u03bd\5\u00a8U\2\u03bc\u03ba\3\2\2\2\u03bd\u03c0\3\2")
        buf.write("\2\2\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u00a7")
        buf.write("\3\2\2\2\u03c0\u03be\3\2\2\2\u03c1\u03c2\5\u00aaV\2\u03c2")
        buf.write("\u03c3\7.\2\2\u03c3\u03c4\5\u008cG\2\u03c4\u00a9\3\2\2")
        buf.write("\2\u03c5\u03c8\7J\2\2\u03c6\u03c8\5\u00aeX\2\u03c7\u03c5")
        buf.write("\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8\u00ab\3\2\2\2\u03c9")
        buf.write("\u03cb\t\7\2\2\u03ca\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u00ad\3")
        buf.write("\2\2\2\u03ce\u03cf\t\b\2\2\u03cf\u00af\3\2\2\2n\u00b1")
        buf.write("\u00b6\u00be\u00c1\u00c7\u00cb\u00d4\u00dc\u00df\u00e7")
        buf.write("\u00eb\u00f4\u00f8\u00ff\u0112\u0119\u0120\u0129\u013b")
        buf.write("\u014a\u014d\u0157\u015d\u0162\u016c\u0172\u0177\u017c")
        buf.write("\u0183\u0189\u018d\u019b\u01a1\u01a7\u01ac\u01b1\u01b6")
        buf.write("\u01b9\u01c3\u01c9\u01ce\u01d8\u01de\u01e3\u01ed\u01f3")
        buf.write("\u01f8\u0202\u0208\u020d\u0212\u0217\u021c\u0221\u0226")
        buf.write("\u0233\u023e\u0241\u024b\u024f\u0251\u0256\u025a\u0267")
        buf.write("\u026f\u027b\u027d\u0286\u0290\u0294\u029b\u029e\u02a4")
        buf.write("\u02ae\u02b3\u02b7\u02b9\u02bc\u02c6\u02cb\u02d4\u02dd")
        buf.write("\u02e2\u02eb\u02f1\u0303\u030d\u0313\u0322\u0344\u034a")
        buf.write("\u034d\u034f\u0363\u0368\u0371\u0375\u037d\u0380\u038a")
        buf.write("\u0390\u03a0\u03a7\u03ae\u03b6\u03be\u03c7\u03cc")
        return buf.getvalue()


class CWScriptParser ( Parser ):

    grammarFileName = "CWScriptParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'contract'", "'interface'", "'import'", 
                     "'implements'", "'impl'", "'extension'", "'requires'", 
                     "'extends'", "'error'", "'event'", "'instantiate'", 
                     "'exec'", "'query'", "'migrate'", "'for'", "'in'", 
                     "'from'", "'state'", "'times'", "'if'", "'else'", "'and'", 
                     "'or'", "'true'", "'false'", "'let'", "'fail'", "'return'", 
                     "'struct'", "'enum'", "'type'", "'emit'", "'as'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'.'", "','", "'?'", 
                     "'!'", "':'", "'::'", "'$'", "'#'", "'@'", "'&'", "'->'", 
                     "'=>'", "'''", "'\"'", "'='", "'=='", "'!='", "'+'", 
                     "'+='", "'-'", "'-='", "'*'", "'*='", "'/'", "'/='", 
                     "'%'", "'%='", "'<'", "'<='", "'>'", "'>='", "'**'" ]

    symbolicNames = [ "<INVALID>", "CONTRACT", "INTERFACE", "IMPORT", "IMPLEMENTS", 
                      "IMPL", "EXTENSION", "REQUIRES", "EXTENDS", "ERROR", 
                      "EVENT", "INSTANTIATE", "EXEC", "QUERY", "MIGRATE", 
                      "FOR", "IN", "FROM", "STATE", "TIMES", "IF", "ELSE", 
                      "AND", "OR", "TRUE", "FALSE", "LET", "FAIL", "RETURN", 
                      "STRUCT", "ENUM", "TYPE", "EMIT", "AS", "LPAREN", 
                      "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", 
                      "DOT", "COMMA", "QUEST", "EXCLAM", "COLON", "D_COLON", 
                      "DOLLAR", "HASH", "AT", "AMP", "ARROW", "FAT_ARROW", 
                      "S_QUOTE", "D_QUOTE", "EQ", "EQEQ", "NEQ", "PLUS", 
                      "PLUS_EQ", "MINUS", "MINUS_EQ", "MUL", "MUL_EQ", "DIV", 
                      "DIV_EQ", "MOD", "MOD_EQ", "LT", "LT_EQ", "GT", "GT_EQ", 
                      "POW", "Ident", "StringLiteral", "IntegerLiteral", 
                      "DecimalLiteral", "CWSPEC_LINE_COMMENT", "CWSPEC_BLOCK_COMMENT", 
                      "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    RULE_sourceFile = 0
    RULE_topLevelStmt = 1
    RULE_contractDefn = 2
    RULE_interfaceList = 3
    RULE_interfaceVal = 4
    RULE_interfaceDefn = 5
    RULE_importStmt = 6
    RULE_importSymbolList = 7
    RULE_importSymbol = 8
    RULE_contractBody = 9
    RULE_interfaceBody = 10
    RULE_contractItem = 11
    RULE_interfaceItem = 12
    RULE_errorDefn = 13
    RULE_errorDefnBlock = 14
    RULE_errorDefnBlock_item = 15
    RULE_eventDefn = 16
    RULE_eventDefnBlock = 17
    RULE_eventDefnBlock_item = 18
    RULE_stateDefn = 19
    RULE_stateDefnBlock = 20
    RULE_stateDefnBlock_item = 21
    RULE_itemDefn = 22
    RULE_mapDefn = 23
    RULE_mapDefnKeys = 24
    RULE_mapDefnKey = 25
    RULE_instantiateDefn = 26
    RULE_instantiateDecl = 27
    RULE_execDefn = 28
    RULE_execDefnBlock = 29
    RULE_execDefnBlock_item = 30
    RULE_execDecl = 31
    RULE_execDeclBlock = 32
    RULE_execDeclBlock_item = 33
    RULE_queryDefn = 34
    RULE_queryDefnBlock = 35
    RULE_queryDefnBlock_item = 36
    RULE_queryDecl = 37
    RULE_queryDeclBlock = 38
    RULE_queryDeclBlock_item = 39
    RULE_migrateDefn = 40
    RULE_migrateDecl = 41
    RULE_enumVariant = 42
    RULE_enumVariant_struct = 43
    RULE_enumVariant_tuple = 44
    RULE_enumVariant_unit = 45
    RULE_tupleMembers = 46
    RULE_parenStructMembers = 47
    RULE_curlyStructMembers = 48
    RULE_structMember = 49
    RULE_typeExpr = 50
    RULE_typeParam = 51
    RULE_pathList = 52
    RULE_typePath = 53
    RULE_typeDefn = 54
    RULE_structDefn = 55
    RULE_enumDefn = 56
    RULE_enumVariantList = 57
    RULE_typeAliasDefn = 58
    RULE_namedFnDecl = 59
    RULE_namedFnDefn = 60
    RULE_fnType = 61
    RULE_fnArgs = 62
    RULE_fnArgList = 63
    RULE_fnArg = 64
    RULE_fnBody = 65
    RULE_stmt = 66
    RULE_letStmt_ = 67
    RULE_letLHS = 68
    RULE_expr = 69
    RULE_val = 70
    RULE_structVal_ = 71
    RULE_structValMembers = 72
    RULE_structValMember = 73
    RULE_ifExpr_ = 74
    RULE_ifClause_ = 75
    RULE_elseIfClauses = 76
    RULE_elseClause = 77
    RULE_forStmt_ = 78
    RULE_forItem = 79
    RULE_identList = 80
    RULE_exprList = 81
    RULE_namedExprList = 82
    RULE_namedExpr = 83
    RULE_ident = 84
    RULE_cwspec = 85
    RULE_reservedKeyword = 86

    ruleNames =  [ "sourceFile", "topLevelStmt", "contractDefn", "interfaceList", 
                   "interfaceVal", "interfaceDefn", "importStmt", "importSymbolList", 
                   "importSymbol", "contractBody", "interfaceBody", "contractItem", 
                   "interfaceItem", "errorDefn", "errorDefnBlock", "errorDefnBlock_item", 
                   "eventDefn", "eventDefnBlock", "eventDefnBlock_item", 
                   "stateDefn", "stateDefnBlock", "stateDefnBlock_item", 
                   "itemDefn", "mapDefn", "mapDefnKeys", "mapDefnKey", "instantiateDefn", 
                   "instantiateDecl", "execDefn", "execDefnBlock", "execDefnBlock_item", 
                   "execDecl", "execDeclBlock", "execDeclBlock_item", "queryDefn", 
                   "queryDefnBlock", "queryDefnBlock_item", "queryDecl", 
                   "queryDeclBlock", "queryDeclBlock_item", "migrateDefn", 
                   "migrateDecl", "enumVariant", "enumVariant_struct", "enumVariant_tuple", 
                   "enumVariant_unit", "tupleMembers", "parenStructMembers", 
                   "curlyStructMembers", "structMember", "typeExpr", "typeParam", 
                   "pathList", "typePath", "typeDefn", "structDefn", "enumDefn", 
                   "enumVariantList", "typeAliasDefn", "namedFnDecl", "namedFnDefn", 
                   "fnType", "fnArgs", "fnArgList", "fnArg", "fnBody", "stmt", 
                   "letStmt_", "letLHS", "expr", "val", "structVal_", "structValMembers", 
                   "structValMember", "ifExpr_", "ifClause_", "elseIfClauses", 
                   "elseClause", "forStmt_", "forItem", "identList", "exprList", 
                   "namedExprList", "namedExpr", "ident", "cwspec", "reservedKeyword" ]

    EOF = Token.EOF
    CONTRACT=1
    INTERFACE=2
    IMPORT=3
    IMPLEMENTS=4
    IMPL=5
    EXTENSION=6
    REQUIRES=7
    EXTENDS=8
    ERROR=9
    EVENT=10
    INSTANTIATE=11
    EXEC=12
    QUERY=13
    MIGRATE=14
    FOR=15
    IN=16
    FROM=17
    STATE=18
    TIMES=19
    IF=20
    ELSE=21
    AND=22
    OR=23
    TRUE=24
    FALSE=25
    LET=26
    FAIL=27
    RETURN=28
    STRUCT=29
    ENUM=30
    TYPE=31
    EMIT=32
    AS=33
    LPAREN=34
    RPAREN=35
    LBRACK=36
    RBRACK=37
    LBRACE=38
    RBRACE=39
    DOT=40
    COMMA=41
    QUEST=42
    EXCLAM=43
    COLON=44
    D_COLON=45
    DOLLAR=46
    HASH=47
    AT=48
    AMP=49
    ARROW=50
    FAT_ARROW=51
    S_QUOTE=52
    D_QUOTE=53
    EQ=54
    EQEQ=55
    NEQ=56
    PLUS=57
    PLUS_EQ=58
    MINUS=59
    MINUS_EQ=60
    MUL=61
    MUL_EQ=62
    DIV=63
    DIV_EQ=64
    MOD=65
    MOD_EQ=66
    LT=67
    LT_EQ=68
    GT=69
    GT_EQ=70
    POW=71
    Ident=72
    StringLiteral=73
    IntegerLiteral=74
    DecimalLiteral=75
    CWSPEC_LINE_COMMENT=76
    CWSPEC_BLOCK_COMMENT=77
    LINE_COMMENT=78
    BLOCK_COMMENT=79
    WS=80

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceFileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def EOF(self):
            return self.getToken(CWScriptParser.EOF, 0)

        def topLevelStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.TopLevelStmtContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.TopLevelStmtContext,i)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_sourceFile




    def sourceFile(self):

        localctx = CWScriptParser.SourceFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 174
                localctx.spec = self.cwspec()


            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT))) != 0) or _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 177
                self.topLevelStmt()
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 183
            self.match(CWScriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contractDefn(self):
            return self.getTypedRuleContext(CWScriptParser.ContractDefnContext,0)


        def interfaceDefn(self):
            return self.getTypedRuleContext(CWScriptParser.InterfaceDefnContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(CWScriptParser.ImportStmtContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_topLevelStmt




    def topLevelStmt(self):

        localctx = CWScriptParser.TopLevelStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelStmt)
        try:
            self.state = 188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 185
                self.contractDefn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self.interfaceDefn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 187
                self.importStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext
            self.name = None # IdentContext
            self.parents = None # IdentListContext
            self.interfaces = None # InterfaceListContext

        def CONTRACT(self):
            return self.getToken(CWScriptParser.CONTRACT, 0)

        def contractBody(self):
            return self.getTypedRuleContext(CWScriptParser.ContractBodyContext,0)


        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def EXTENDS(self):
            return self.getToken(CWScriptParser.EXTENDS, 0)

        def IMPLEMENTS(self):
            return self.getToken(CWScriptParser.IMPLEMENTS, 0)

        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def identList(self):
            return self.getTypedRuleContext(CWScriptParser.IdentListContext,0)


        def interfaceList(self):
            return self.getTypedRuleContext(CWScriptParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_contractDefn




    def contractDefn(self):

        localctx = CWScriptParser.ContractDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_contractDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 190
                localctx.spec = self.cwspec()


            self.state = 193
            self.match(CWScriptParser.CONTRACT)

            self.state = 194
            localctx.name = self.ident()
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.EXTENDS:
                self.state = 195
                self.match(CWScriptParser.EXTENDS)
                self.state = 196
                localctx.parents = self.identList()


            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.IMPLEMENTS:
                self.state = 199
                self.match(CWScriptParser.IMPLEMENTS)

                self.state = 200
                localctx.interfaces = self.interfaceList()


            self.state = 203
            self.contractBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.InterfaceValContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.InterfaceValContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_interfaceList




    def interfaceList(self):

        localctx = CWScriptParser.InterfaceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_interfaceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.interfaceVal()
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 206
                self.match(CWScriptParser.COMMA)
                self.state = 207
                self.interfaceVal()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceValContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.interfaceName = None # IdentContext
            self.mixins = None # IdentListContext

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def LBRACK(self):
            return self.getToken(CWScriptParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CWScriptParser.RBRACK, 0)

        def identList(self):
            return self.getTypedRuleContext(CWScriptParser.IdentListContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_interfaceVal




    def interfaceVal(self):

        localctx = CWScriptParser.InterfaceValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interfaceVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            localctx.interfaceName = self.ident()
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.LBRACK:
                self.state = 214
                self.match(CWScriptParser.LBRACK)
                self.state = 215
                localctx.mixins = self.identList()
                self.state = 216
                self.match(CWScriptParser.RBRACK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext
            self.name = None # IdentContext
            self.mixinName = None # IdentContext
            self.parents = None # InterfaceListContext

        def INTERFACE(self):
            return self.getToken(CWScriptParser.INTERFACE, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(CWScriptParser.InterfaceBodyContext,0)


        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.IdentContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.IdentContext,i)


        def LBRACK(self):
            return self.getToken(CWScriptParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CWScriptParser.RBRACK, 0)

        def EXTENDS(self):
            return self.getToken(CWScriptParser.EXTENDS, 0)

        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def interfaceList(self):
            return self.getTypedRuleContext(CWScriptParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_interfaceDefn




    def interfaceDefn(self):

        localctx = CWScriptParser.InterfaceDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_interfaceDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 220
                localctx.spec = self.cwspec()


            self.state = 223
            self.match(CWScriptParser.INTERFACE)

            self.state = 224
            localctx.name = self.ident()
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.LBRACK:
                self.state = 225
                self.match(CWScriptParser.LBRACK)
                self.state = 226
                localctx.mixinName = self.ident()
                self.state = 227
                self.match(CWScriptParser.RBRACK)


            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.EXTENDS:
                self.state = 231
                self.match(CWScriptParser.EXTENDS)
                self.state = 232
                localctx.parents = self.interfaceList()


            self.state = 235
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fileName = None # Token
            self.symbols = None # ImportSymbolListContext
            self.star = None # Token

        def IMPORT(self):
            return self.getToken(CWScriptParser.IMPORT, 0)

        def StringLiteral(self):
            return self.getToken(CWScriptParser.StringLiteral, 0)

        def FROM(self):
            return self.getToken(CWScriptParser.FROM, 0)

        def importSymbolList(self):
            return self.getTypedRuleContext(CWScriptParser.ImportSymbolListContext,0)


        def MUL(self):
            return self.getToken(CWScriptParser.MUL, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_importStmt




    def importStmt(self):

        localctx = CWScriptParser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importStmt)
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(CWScriptParser.IMPORT)

                self.state = 238
                localctx.fileName = self.match(CWScriptParser.StringLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.match(CWScriptParser.IMPORT)
                self.state = 242
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CWScriptParser.CONTRACT, CWScriptParser.INTERFACE, CWScriptParser.IMPORT, CWScriptParser.IMPLEMENTS, CWScriptParser.EXTENDS, CWScriptParser.ERROR, CWScriptParser.EVENT, CWScriptParser.INSTANTIATE, CWScriptParser.EXEC, CWScriptParser.QUERY, CWScriptParser.MIGRATE, CWScriptParser.FOR, CWScriptParser.IN, CWScriptParser.FROM, CWScriptParser.STATE, CWScriptParser.TIMES, CWScriptParser.IF, CWScriptParser.ELSE, CWScriptParser.AND, CWScriptParser.OR, CWScriptParser.TRUE, CWScriptParser.FALSE, CWScriptParser.LET, CWScriptParser.RETURN, CWScriptParser.STRUCT, CWScriptParser.ENUM, CWScriptParser.TYPE, CWScriptParser.EMIT, CWScriptParser.LPAREN, CWScriptParser.D_COLON, CWScriptParser.Ident]:
                    self.state = 240
                    localctx.symbols = self.importSymbolList()
                    pass
                elif token in [CWScriptParser.MUL]:
                    self.state = 241
                    localctx.star = self.match(CWScriptParser.MUL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 244
                self.match(CWScriptParser.FROM)

                self.state = 245
                localctx.fileName = self.match(CWScriptParser.StringLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSymbolListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._importSymbol = None # ImportSymbolContext
            self.importItem = list() # of ImportSymbolContexts

        def importSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ImportSymbolContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ImportSymbolContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_importSymbolList




    def importSymbolList(self):

        localctx = CWScriptParser.ImportSymbolListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importSymbolList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            localctx._importSymbol = self.importSymbol(0)
            localctx.importItem.append(localctx._importSymbol)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 249
                self.match(CWScriptParser.COMMA)

                self.state = 250
                localctx._importSymbol = self.importSymbol(0)
                localctx.importItem.append(localctx._importSymbol)
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_importSymbol

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AllImportSymbolContext(ImportSymbolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ImportSymbolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typePath(self):
            return self.getTypedRuleContext(CWScriptParser.TypePathContext,0)

        def D_COLON(self):
            return self.getToken(CWScriptParser.D_COLON, 0)
        def MUL(self):
            return self.getToken(CWScriptParser.MUL, 0)


    class TypePathImportSymbolContext(ImportSymbolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ImportSymbolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typePath(self):
            return self.getTypedRuleContext(CWScriptParser.TypePathContext,0)



    class DestructureImportSymbolContext(ImportSymbolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ImportSymbolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typePath(self):
            return self.getTypedRuleContext(CWScriptParser.TypePathContext,0)

        def D_COLON(self):
            return self.getToken(CWScriptParser.D_COLON, 0)
        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)
        def importSymbolList(self):
            return self.getTypedRuleContext(CWScriptParser.ImportSymbolListContext,0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)


    class GroupedImportSymbolContext(ImportSymbolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ImportSymbolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def importSymbolList(self):
            return self.getTypedRuleContext(CWScriptParser.ImportSymbolListContext,0)

        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)


    class RenamedImportSymbolContext(ImportSymbolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ImportSymbolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def importSymbol(self):
            return self.getTypedRuleContext(CWScriptParser.ImportSymbolContext,0)

        def AS(self):
            return self.getToken(CWScriptParser.AS, 0)
        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)




    def importSymbol(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CWScriptParser.ImportSymbolContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_importSymbol, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.GroupedImportSymbolContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 257
                self.match(CWScriptParser.LPAREN)
                self.state = 258
                self.importSymbolList()
                self.state = 259
                self.match(CWScriptParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = CWScriptParser.TypePathImportSymbolContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 261
                self.typePath()
                pass

            elif la_ == 3:
                localctx = CWScriptParser.DestructureImportSymbolContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 262
                self.typePath()
                self.state = 263
                self.match(CWScriptParser.D_COLON)
                self.state = 264
                self.match(CWScriptParser.LBRACE)
                self.state = 265
                self.importSymbolList()
                self.state = 266
                self.match(CWScriptParser.RBRACE)
                pass

            elif la_ == 4:
                localctx = CWScriptParser.AllImportSymbolContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 268
                self.typePath()
                self.state = 269
                self.match(CWScriptParser.D_COLON)
                self.state = 270
                self.match(CWScriptParser.MUL)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CWScriptParser.RenamedImportSymbolContext(self, CWScriptParser.ImportSymbolContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_importSymbol)
                    self.state = 274
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 275
                    self.match(CWScriptParser.AS)
                    self.state = 276
                    self.ident() 
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ContractBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # ContractItemContext

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def contractItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ContractItemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ContractItemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_contractBody




    def contractBody(self):

        localctx = CWScriptParser.ContractBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_contractBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(CWScriptParser.LBRACE)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE))) != 0) or _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 283
                localctx.items = self.contractItem()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 289
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # InterfaceItemContext

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def interfaceItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.InterfaceItemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.InterfaceItemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_interfaceBody




    def interfaceBody(self):

        localctx = CWScriptParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(CWScriptParser.LBRACE)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE))) != 0) or _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 292
                localctx.items = self.interfaceItem()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDefn(self):
            return self.getTypedRuleContext(CWScriptParser.TypeDefnContext,0)


        def errorDefn(self):
            return self.getTypedRuleContext(CWScriptParser.ErrorDefnContext,0)


        def errorDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.ErrorDefnBlockContext,0)


        def eventDefn(self):
            return self.getTypedRuleContext(CWScriptParser.EventDefnContext,0)


        def eventDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.EventDefnBlockContext,0)


        def stateDefn(self):
            return self.getTypedRuleContext(CWScriptParser.StateDefnContext,0)


        def stateDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.StateDefnBlockContext,0)


        def instantiateDefn(self):
            return self.getTypedRuleContext(CWScriptParser.InstantiateDefnContext,0)


        def execDefn(self):
            return self.getTypedRuleContext(CWScriptParser.ExecDefnContext,0)


        def execDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.ExecDefnBlockContext,0)


        def queryDefn(self):
            return self.getTypedRuleContext(CWScriptParser.QueryDefnContext,0)


        def queryDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.QueryDefnBlockContext,0)


        def migrateDefn(self):
            return self.getTypedRuleContext(CWScriptParser.MigrateDefnContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_contractItem




    def contractItem(self):

        localctx = CWScriptParser.ContractItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractItem)
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.typeDefn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.errorDefn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.errorDefnBlock()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.eventDefn()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 304
                self.eventDefnBlock()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 305
                self.stateDefn()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 306
                self.stateDefnBlock()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 307
                self.instantiateDefn()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 308
                self.execDefn()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 309
                self.execDefnBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 310
                self.queryDefn()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 311
                self.queryDefnBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 312
                self.migrateDefn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDefn(self):
            return self.getTypedRuleContext(CWScriptParser.TypeDefnContext,0)


        def errorDefn(self):
            return self.getTypedRuleContext(CWScriptParser.ErrorDefnContext,0)


        def errorDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.ErrorDefnBlockContext,0)


        def eventDefn(self):
            return self.getTypedRuleContext(CWScriptParser.EventDefnContext,0)


        def eventDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.EventDefnBlockContext,0)


        def stateDefn(self):
            return self.getTypedRuleContext(CWScriptParser.StateDefnContext,0)


        def stateDefnBlock(self):
            return self.getTypedRuleContext(CWScriptParser.StateDefnBlockContext,0)


        def instantiateDecl(self):
            return self.getTypedRuleContext(CWScriptParser.InstantiateDeclContext,0)


        def execDecl(self):
            return self.getTypedRuleContext(CWScriptParser.ExecDeclContext,0)


        def execDeclBlock(self):
            return self.getTypedRuleContext(CWScriptParser.ExecDeclBlockContext,0)


        def queryDecl(self):
            return self.getTypedRuleContext(CWScriptParser.QueryDeclContext,0)


        def queryDeclBlock(self):
            return self.getTypedRuleContext(CWScriptParser.QueryDeclBlockContext,0)


        def migrateDecl(self):
            return self.getTypedRuleContext(CWScriptParser.MigrateDeclContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_interfaceItem




    def interfaceItem(self):

        localctx = CWScriptParser.InterfaceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interfaceItem)
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.typeDefn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.errorDefn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 317
                self.errorDefnBlock()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 318
                self.eventDefn()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 319
                self.eventDefnBlock()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 320
                self.stateDefn()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 321
                self.stateDefnBlock()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 322
                self.instantiateDecl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 323
                self.execDecl()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 324
                self.execDeclBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 325
                self.queryDecl()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 326
                self.queryDeclBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 327
                self.migrateDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def ERROR(self):
            return self.getToken(CWScriptParser.ERROR, 0)

        def enumVariant(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariantContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_errorDefn




    def errorDefn(self):

        localctx = CWScriptParser.ErrorDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_errorDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 330
                localctx.spec = self.cwspec()


            self.state = 333
            self.match(CWScriptParser.ERROR)
            self.state = 334
            self.enumVariant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDefnBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(CWScriptParser.ERROR, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def errorDefnBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ErrorDefnBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ErrorDefnBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_errorDefnBlock




    def errorDefnBlock(self):

        localctx = CWScriptParser.ErrorDefnBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_errorDefnBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(CWScriptParser.ERROR)
            self.state = 337
            self.match(CWScriptParser.LBRACE)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 338
                self.errorDefnBlock_item()
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDefnBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def enumVariant(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariantContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_errorDefnBlock_item




    def errorDefnBlock_item(self):

        localctx = CWScriptParser.ErrorDefnBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_errorDefnBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 346
                localctx.spec = self.cwspec()


            self.state = 349
            self.enumVariant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def EVENT(self):
            return self.getToken(CWScriptParser.EVENT, 0)

        def enumVariant(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariantContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_eventDefn




    def eventDefn(self):

        localctx = CWScriptParser.EventDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_eventDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 351
                localctx.spec = self.cwspec()


            self.state = 354
            self.match(CWScriptParser.EVENT)
            self.state = 355
            self.enumVariant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefnBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CWScriptParser.EVENT, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def eventDefnBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.EventDefnBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.EventDefnBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_eventDefnBlock




    def eventDefnBlock(self):

        localctx = CWScriptParser.EventDefnBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_eventDefnBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CWScriptParser.EVENT)
            self.state = 358
            self.match(CWScriptParser.LBRACE)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 359
                self.eventDefnBlock_item()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefnBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def enumVariant(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariantContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_eventDefnBlock_item




    def eventDefnBlock_item(self):

        localctx = CWScriptParser.EventDefnBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_eventDefnBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 367
                localctx.spec = self.cwspec()


            self.state = 370
            self.enumVariant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def STATE(self):
            return self.getToken(CWScriptParser.STATE, 0)

        def itemDefn(self):
            return self.getTypedRuleContext(CWScriptParser.ItemDefnContext,0)


        def mapDefn(self):
            return self.getTypedRuleContext(CWScriptParser.MapDefnContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_stateDefn




    def stateDefn(self):

        localctx = CWScriptParser.StateDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_stateDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 372
                localctx.spec = self.cwspec()


            self.state = 375
            self.match(CWScriptParser.STATE)
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 376
                self.itemDefn()
                pass

            elif la_ == 2:
                self.state = 377
                self.mapDefn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateDefnBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATE(self):
            return self.getToken(CWScriptParser.STATE, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def stateDefnBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.StateDefnBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.StateDefnBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_stateDefnBlock




    def stateDefnBlock(self):

        localctx = CWScriptParser.StateDefnBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_stateDefnBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(CWScriptParser.STATE)
            self.state = 381
            self.match(CWScriptParser.LBRACE)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 382
                self.stateDefnBlock_item()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateDefnBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def itemDefn(self):
            return self.getTypedRuleContext(CWScriptParser.ItemDefnContext,0)


        def mapDefn(self):
            return self.getTypedRuleContext(CWScriptParser.MapDefnContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_stateDefnBlock_item




    def stateDefnBlock_item(self):

        localctx = CWScriptParser.StateDefnBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_stateDefnBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 390
                localctx.spec = self.cwspec()


            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 393
                self.itemDefn()
                pass

            elif la_ == 2:
                self.state = 394
                self.mapDefn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentContext
            self.valueType = None # TypeExprContext

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_itemDefn




    def itemDefn(self):

        localctx = CWScriptParser.ItemDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_itemDefn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            localctx.key = self.ident()
            self.state = 398
            self.match(CWScriptParser.COLON)

            self.state = 399
            localctx.valueType = self.typeExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentContext
            self.mapKeys = None # MapDefnKeysContext
            self.valueType = None # TypeExprContext

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def mapDefnKeys(self):
            return self.getTypedRuleContext(CWScriptParser.MapDefnKeysContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_mapDefn




    def mapDefn(self):

        localctx = CWScriptParser.MapDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_mapDefn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            localctx.key = self.ident()

            self.state = 402
            localctx.mapKeys = self.mapDefnKeys()
            self.state = 403
            self.match(CWScriptParser.COLON)

            self.state = 404
            localctx.valueType = self.typeExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapDefnKeysContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapDefnKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.MapDefnKeyContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.MapDefnKeyContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_mapDefnKeys




    def mapDefnKeys(self):

        localctx = CWScriptParser.MapDefnKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_mapDefnKeys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 406
                self.mapDefnKey()
                self.state = 409 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CWScriptParser.LBRACK):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapDefnKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.keyName = None # IdentContext
            self.keyType = None # TypeExprContext

        def LBRACK(self):
            return self.getToken(CWScriptParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CWScriptParser.RBRACK, 0)

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_mapDefnKey




    def mapDefnKey(self):

        localctx = CWScriptParser.MapDefnKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_mapDefnKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(CWScriptParser.LBRACK)
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 412
                localctx.keyName = self.ident()
                self.state = 413
                self.match(CWScriptParser.COLON)


            self.state = 417
            localctx.keyType = self.typeExpr(0)
            self.state = 418
            self.match(CWScriptParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstantiateDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def INSTANTIATE(self):
            return self.getToken(CWScriptParser.INSTANTIATE, 0)

        def fnArgs(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgsContext,0)


        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)


        def fnType(self):
            return self.getTypedRuleContext(CWScriptParser.FnTypeContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_instantiateDefn




    def instantiateDefn(self):

        localctx = CWScriptParser.InstantiateDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_instantiateDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 420
                localctx.spec = self.cwspec()


            self.state = 423
            self.match(CWScriptParser.INSTANTIATE)
            self.state = 424
            self.fnArgs()
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.ARROW:
                self.state = 425
                self.fnType()


            self.state = 428
            self.fnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstantiateDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def INSTANTIATE(self):
            return self.getToken(CWScriptParser.INSTANTIATE, 0)

        def fnArgs(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgsContext,0)


        def fnType(self):
            return self.getTypedRuleContext(CWScriptParser.FnTypeContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_instantiateDecl




    def instantiateDecl(self):

        localctx = CWScriptParser.InstantiateDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_instantiateDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 430
                localctx.spec = self.cwspec()


            self.state = 433
            self.match(CWScriptParser.INSTANTIATE)
            self.state = 434
            self.fnArgs()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.ARROW:
                self.state = 435
                self.fnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def EXEC(self):
            return self.getToken(CWScriptParser.EXEC, 0)

        def namedFnDefn(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDefnContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_execDefn




    def execDefn(self):

        localctx = CWScriptParser.ExecDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_execDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 438
                localctx.spec = self.cwspec()


            self.state = 441
            self.match(CWScriptParser.EXEC)
            self.state = 442
            self.namedFnDefn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecDefnBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CWScriptParser.EXEC, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def execDefnBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExecDefnBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExecDefnBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_execDefnBlock




    def execDefnBlock(self):

        localctx = CWScriptParser.ExecDefnBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_execDefnBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(CWScriptParser.EXEC)
            self.state = 445
            self.match(CWScriptParser.LBRACE)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 446
                self.execDefnBlock_item()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 452
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecDefnBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def namedFnDefn(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDefnContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_execDefnBlock_item




    def execDefnBlock_item(self):

        localctx = CWScriptParser.ExecDefnBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_execDefnBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 454
                localctx.spec = self.cwspec()


            self.state = 457
            self.namedFnDefn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def EXEC(self):
            return self.getToken(CWScriptParser.EXEC, 0)

        def namedFnDecl(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDeclContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_execDecl




    def execDecl(self):

        localctx = CWScriptParser.ExecDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_execDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 459
                localctx.spec = self.cwspec()


            self.state = 462
            self.match(CWScriptParser.EXEC)
            self.state = 463
            self.namedFnDecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecDeclBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CWScriptParser.EXEC, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def execDeclBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExecDeclBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExecDeclBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_execDeclBlock




    def execDeclBlock(self):

        localctx = CWScriptParser.ExecDeclBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_execDeclBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(CWScriptParser.EXEC)
            self.state = 466
            self.match(CWScriptParser.LBRACE)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 467
                self.execDeclBlock_item()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 473
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecDeclBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def namedFnDecl(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDeclContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_execDeclBlock_item




    def execDeclBlock_item(self):

        localctx = CWScriptParser.ExecDeclBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_execDeclBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 475
                localctx.spec = self.cwspec()


            self.state = 478
            self.namedFnDecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def QUERY(self):
            return self.getToken(CWScriptParser.QUERY, 0)

        def namedFnDefn(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDefnContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_queryDefn




    def queryDefn(self):

        localctx = CWScriptParser.QueryDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_queryDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 480
                localctx.spec = self.cwspec()


            self.state = 483
            self.match(CWScriptParser.QUERY)
            self.state = 484
            self.namedFnDefn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryDefnBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUERY(self):
            return self.getToken(CWScriptParser.QUERY, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def queryDefnBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.QueryDefnBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.QueryDefnBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_queryDefnBlock




    def queryDefnBlock(self):

        localctx = CWScriptParser.QueryDefnBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_queryDefnBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(CWScriptParser.QUERY)
            self.state = 487
            self.match(CWScriptParser.LBRACE)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 488
                self.queryDefnBlock_item()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 494
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryDefnBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def namedFnDefn(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDefnContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_queryDefnBlock_item




    def queryDefnBlock_item(self):

        localctx = CWScriptParser.QueryDefnBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryDefnBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 496
                localctx.spec = self.cwspec()


            self.state = 499
            self.namedFnDefn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def QUERY(self):
            return self.getToken(CWScriptParser.QUERY, 0)

        def namedFnDecl(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDeclContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_queryDecl




    def queryDecl(self):

        localctx = CWScriptParser.QueryDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_queryDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 501
                localctx.spec = self.cwspec()


            self.state = 504
            self.match(CWScriptParser.QUERY)
            self.state = 505
            self.namedFnDecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryDeclBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUERY(self):
            return self.getToken(CWScriptParser.QUERY, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def queryDeclBlock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.QueryDeclBlock_itemContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.QueryDeclBlock_itemContext,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_queryDeclBlock




    def queryDeclBlock(self):

        localctx = CWScriptParser.QueryDeclBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_queryDeclBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(CWScriptParser.QUERY)
            self.state = 508
            self.match(CWScriptParser.LBRACE)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 509
                self.queryDeclBlock_item()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryDeclBlock_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def namedFnDecl(self):
            return self.getTypedRuleContext(CWScriptParser.NamedFnDeclContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_queryDeclBlock_item




    def queryDeclBlock_item(self):

        localctx = CWScriptParser.QueryDeclBlock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_queryDeclBlock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 517
                localctx.spec = self.cwspec()


            self.state = 520
            self.namedFnDecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MigrateDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def MIGRATE(self):
            return self.getToken(CWScriptParser.MIGRATE, 0)

        def fnArgs(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgsContext,0)


        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)


        def fnType(self):
            return self.getTypedRuleContext(CWScriptParser.FnTypeContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_migrateDefn




    def migrateDefn(self):

        localctx = CWScriptParser.MigrateDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_migrateDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 522
                localctx.spec = self.cwspec()


            self.state = 525
            self.match(CWScriptParser.MIGRATE)
            self.state = 526
            self.fnArgs()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.ARROW:
                self.state = 527
                self.fnType()


            self.state = 530
            self.fnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MigrateDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def MIGRATE(self):
            return self.getToken(CWScriptParser.MIGRATE, 0)

        def fnArgs(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgsContext,0)


        def fnType(self):
            return self.getTypedRuleContext(CWScriptParser.FnTypeContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_migrateDecl




    def migrateDecl(self):

        localctx = CWScriptParser.MigrateDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_migrateDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 532
                localctx.spec = self.cwspec()


            self.state = 535
            self.match(CWScriptParser.MIGRATE)
            self.state = 536
            self.fnArgs()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.ARROW:
                self.state = 537
                self.fnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumVariantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumVariant_struct(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariant_structContext,0)


        def enumVariant_tuple(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariant_tupleContext,0)


        def enumVariant_unit(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariant_unitContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_enumVariant




    def enumVariant(self):

        localctx = CWScriptParser.EnumVariantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumVariant)
        try:
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.enumVariant_struct()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.enumVariant_tuple()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 542
                self.enumVariant_unit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumVariant_structContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def parenStructMembers(self):
            return self.getTypedRuleContext(CWScriptParser.ParenStructMembersContext,0)


        def curlyStructMembers(self):
            return self.getTypedRuleContext(CWScriptParser.CurlyStructMembersContext,0)


        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_enumVariant_struct




    def enumVariant_struct(self):

        localctx = CWScriptParser.EnumVariant_structContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumVariant_struct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            localctx.name = self.ident()
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CWScriptParser.LPAREN]:
                self.state = 546
                self.parenStructMembers()
                pass
            elif token in [CWScriptParser.LBRACE]:
                self.state = 547
                self.curlyStructMembers()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumVariant_tupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.members = None # TupleMembersContext

        def tupleMembers(self):
            return self.getTypedRuleContext(CWScriptParser.TupleMembersContext,0)


        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_enumVariant_tuple




    def enumVariant_tuple(self):

        localctx = CWScriptParser.EnumVariant_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumVariant_tuple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            localctx.name = self.ident()
            self.state = 551
            localctx.members = self.tupleMembers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumVariant_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_enumVariant_unit




    def enumVariant_unit(self):

        localctx = CWScriptParser.EnumVariant_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumVariant_unit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            localctx.name = self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleMembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.TypeExprContext,i)


        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_tupleMembers




    def tupleMembers(self):

        localctx = CWScriptParser.TupleMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tupleMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(CWScriptParser.LPAREN)
            self.state = 556
            self.typeExpr(0)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 557
                self.match(CWScriptParser.COMMA)
                self.state = 558
                self.typeExpr(0)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 564
            self.match(CWScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenStructMembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)

        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.StructMemberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_parenStructMembers




    def parenStructMembers(self):

        localctx = CWScriptParser.ParenStructMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_parenStructMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(CWScriptParser.LPAREN)
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 567
                self.structMember()
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CWScriptParser.COMMA:
                    self.state = 568
                    self.match(CWScriptParser.COMMA)
                    self.state = 569
                    self.structMember()
                    self.state = 574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 577
            self.match(CWScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurlyStructMembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.StructMemberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_curlyStructMembers




    def curlyStructMembers(self):

        localctx = CWScriptParser.CurlyStructMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_curlyStructMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(CWScriptParser.LBRACE)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.CWSPEC_LINE_COMMENT - 72)) | (1 << (CWScriptParser.CWSPEC_BLOCK_COMMENT - 72)))) != 0):
                self.state = 580
                self.structMember()
                self.state = 585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 581
                        self.match(CWScriptParser.COMMA)
                        self.state = 582
                        self.structMember() 
                    self.state = 587
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CWScriptParser.COMMA:
                    self.state = 588
                    self.match(CWScriptParser.COMMA)




            self.state = 593
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructMemberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext
            self.name = None # IdentContext
            self.option = None # Token
            self.valueType = None # TypeExprContext

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def QUEST(self):
            return self.getToken(CWScriptParser.QUEST, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_structMember




    def structMember(self):

        localctx = CWScriptParser.StructMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_structMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 595
                localctx.spec = self.cwspec()


            self.state = 598
            localctx.name = self.ident()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.QUEST:
                self.state = 599
                localctx.option = self.match(CWScriptParser.QUEST)


            self.state = 602
            self.match(CWScriptParser.COLON)

            self.state = 603
            localctx.valueType = self.typeExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_typeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RefTypeExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AMP(self):
            return self.getToken(CWScriptParser.AMP, 0)
        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)



    class ParamzdTypeExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)

        def typeParam(self):
            return self.getTypedRuleContext(CWScriptParser.TypeParamContext,0)



    class TupleTypeExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self._typeExpr = None # TypeExprContext
            self.members = list() # of TypeExprContexts
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)
        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.TypeExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)


    class ShortOptionTypeExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)

        def QUEST(self):
            return self.getToken(CWScriptParser.QUEST, 0)


    class TypeDefnExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeDefn(self):
            return self.getTypedRuleContext(CWScriptParser.TypeDefnContext,0)



    class ReflectiveTypeExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)

        def DOLLAR(self):
            return self.getToken(CWScriptParser.DOLLAR, 0)
        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)



    class TypePathExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typePath(self):
            return self.getTypedRuleContext(CWScriptParser.TypePathContext,0)



    class ShortVecTypeExprContext(TypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.TypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)

        def LBRACK(self):
            return self.getToken(CWScriptParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(CWScriptParser.RBRACK, 0)



    def typeExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CWScriptParser.TypeExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_typeExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.TypePathExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 606
                self.typePath()
                pass

            elif la_ == 2:
                localctx = CWScriptParser.TupleTypeExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 607
                self.match(CWScriptParser.LPAREN)

                self.state = 608
                localctx._typeExpr = self.typeExpr(0)
                localctx.members.append(localctx._typeExpr)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CWScriptParser.COMMA:
                    self.state = 609
                    self.match(CWScriptParser.COMMA)
                    self.state = 610
                    localctx._typeExpr = self.typeExpr(0)
                    localctx.members.append(localctx._typeExpr)
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 616
                self.match(CWScriptParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = CWScriptParser.RefTypeExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 618
                self.match(CWScriptParser.AMP)
                self.state = 619
                self.typeExpr(3)
                pass

            elif la_ == 4:
                localctx = CWScriptParser.TypeDefnExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 620
                self.typeDefn()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 633
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = CWScriptParser.ParamzdTypeExprContext(self, CWScriptParser.TypeExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpr)
                        self.state = 623
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 624
                        self.typeParam()
                        pass

                    elif la_ == 2:
                        localctx = CWScriptParser.ShortOptionTypeExprContext(self, CWScriptParser.TypeExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpr)
                        self.state = 625
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 626
                        self.match(CWScriptParser.QUEST)
                        pass

                    elif la_ == 3:
                        localctx = CWScriptParser.ShortVecTypeExprContext(self, CWScriptParser.TypeExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpr)
                        self.state = 627
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 628
                        self.match(CWScriptParser.LBRACK)
                        self.state = 629
                        self.match(CWScriptParser.RBRACK)
                        pass

                    elif la_ == 4:
                        localctx = CWScriptParser.ReflectiveTypeExprContext(self, CWScriptParser.TypeExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpr)
                        self.state = 630
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 631
                        self.match(CWScriptParser.DOLLAR)
                        self.state = 632
                        self.ident()
                        pass

             
                self.state = 637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CWScriptParser.LT, 0)

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(CWScriptParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_typeParam




    def typeParam(self):

        localctx = CWScriptParser.TypeParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(CWScriptParser.LT)
            self.state = 639
            self.typeExpr(0)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 640
                self.match(CWScriptParser.COMMA)
                self.state = 641
                self.typeExpr(0)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self.match(CWScriptParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.IdentContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.IdentContext,i)


        def D_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.D_COLON)
            else:
                return self.getToken(CWScriptParser.D_COLON, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_pathList




    def pathList(self):

        localctx = CWScriptParser.PathListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_pathList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.ident()
            self.state = 654
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 650
                    self.match(CWScriptParser.D_COLON)
                    self.state = 651
                    self.ident() 
                self.state = 656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # Token

        def pathList(self):
            return self.getTypedRuleContext(CWScriptParser.PathListContext,0)


        def D_COLON(self):
            return self.getToken(CWScriptParser.D_COLON, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_typePath




    def typePath(self):

        localctx = CWScriptParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.D_COLON:
                self.state = 657
                localctx.root = self.match(CWScriptParser.D_COLON)


            self.state = 660
            self.pathList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDefn(self):
            return self.getTypedRuleContext(CWScriptParser.StructDefnContext,0)


        def enumDefn(self):
            return self.getTypedRuleContext(CWScriptParser.EnumDefnContext,0)


        def typeAliasDefn(self):
            return self.getTypedRuleContext(CWScriptParser.TypeAliasDefnContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_typeDefn




    def typeDefn(self):

        localctx = CWScriptParser.TypeDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_typeDefn)
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.structDefn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.enumDefn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 664
                self.typeAliasDefn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext

        def STRUCT(self):
            return self.getToken(CWScriptParser.STRUCT, 0)

        def enumVariant(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariantContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_structDefn




    def structDefn(self):

        localctx = CWScriptParser.StructDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_structDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 667
                localctx.spec = self.cwspec()


            self.state = 670
            self.match(CWScriptParser.STRUCT)
            self.state = 671
            self.enumVariant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext
            self.name = None # IdentContext

        def ENUM(self):
            return self.getToken(CWScriptParser.ENUM, 0)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def enumVariantList(self):
            return self.getTypedRuleContext(CWScriptParser.EnumVariantListContext,0)


        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_enumDefn




    def enumDefn(self):

        localctx = CWScriptParser.EnumDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_enumDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 673
                localctx.spec = self.cwspec()


            self.state = 676
            self.match(CWScriptParser.ENUM)

            self.state = 677
            localctx.name = self.ident()
            self.state = 678
            self.match(CWScriptParser.LBRACE)
            self.state = 679
            self.enumVariantList()
            self.state = 680
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumVariantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumVariant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.EnumVariantContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.EnumVariantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_enumVariantList




    def enumVariantList(self):

        localctx = CWScriptParser.EnumVariantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_enumVariantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or _la==CWScriptParser.Ident:
                self.state = 682
                self.enumVariant()
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CWScriptParser.COMMA:
                            self.state = 683
                            self.match(CWScriptParser.COMMA)


                        self.state = 686
                        self.enumVariant() 
                    self.state = 691
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CWScriptParser.COMMA:
                    self.state = 692
                    self.match(CWScriptParser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # CwspecContext
            self.name = None # IdentContext
            self.typeValue = None # TypeExprContext

        def TYPE(self):
            return self.getToken(CWScriptParser.TYPE, 0)

        def EQ(self):
            return self.getToken(CWScriptParser.EQ, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def cwspec(self):
            return self.getTypedRuleContext(CWScriptParser.CwspecContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_typeAliasDefn




    def typeAliasDefn(self):

        localctx = CWScriptParser.TypeAliasDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeAliasDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT:
                self.state = 697
                localctx.spec = self.cwspec()


            self.state = 700
            self.match(CWScriptParser.TYPE)

            self.state = 701
            localctx.name = self.ident()
            self.state = 702
            self.match(CWScriptParser.EQ)

            self.state = 703
            localctx.typeValue = self.typeExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedFnDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fnName = None # IdentContext

        def fnArgs(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgsContext,0)


        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def fnType(self):
            return self.getTypedRuleContext(CWScriptParser.FnTypeContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_namedFnDecl




    def namedFnDecl(self):

        localctx = CWScriptParser.NamedFnDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_namedFnDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            localctx.fnName = self.ident()
            self.state = 706
            self.fnArgs()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.ARROW:
                self.state = 707
                self.fnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedFnDefnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fnName = None # IdentContext

        def fnArgs(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgsContext,0)


        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)


        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def fnType(self):
            return self.getTypedRuleContext(CWScriptParser.FnTypeContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_namedFnDefn




    def namedFnDefn(self):

        localctx = CWScriptParser.NamedFnDefnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_namedFnDefn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            localctx.fnName = self.ident()
            self.state = 711
            self.fnArgs()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.ARROW:
                self.state = 712
                self.fnType()


            self.state = 715
            self.fnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.retType = None # TypeExprContext

        def ARROW(self):
            return self.getToken(CWScriptParser.ARROW, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_fnType




    def fnType(self):

        localctx = CWScriptParser.FnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(CWScriptParser.ARROW)
            self.state = 718
            localctx.retType = self.typeExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)

        def fnArgList(self):
            return self.getTypedRuleContext(CWScriptParser.FnArgListContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_fnArgs




    def fnArgs(self):

        localctx = CWScriptParser.FnArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fnArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(CWScriptParser.LPAREN)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or _la==CWScriptParser.Ident:
                self.state = 721
                self.fnArgList()


            self.state = 724
            self.match(CWScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fnArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.FnArgContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.FnArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_fnArgList




    def fnArgList(self):

        localctx = CWScriptParser.FnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.fnArg()
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 727
                self.match(CWScriptParser.COMMA)
                self.state = 728
                self.fnArg()
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.argName = None # IdentContext
            self.option = None # Token
            self.argType = None # TypeExprContext

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def QUEST(self):
            return self.getToken(CWScriptParser.QUEST, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_fnArg




    def fnArg(self):

        localctx = CWScriptParser.FnArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fnArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            localctx.argName = self.ident()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.QUEST:
                self.state = 735
                localctx.option = self.match(CWScriptParser.QUEST)


            self.state = 738
            self.match(CWScriptParser.COLON)

            self.state = 739
            localctx.argType = self.typeExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_fnBody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NormalFnBodyContext(FnBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.FnBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)
        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.StmtContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.StmtContext,i)



    class ArrowFnBodyContext(FnBodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.FnBodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FAT_ARROW(self):
            return self.getToken(CWScriptParser.FAT_ARROW, 0)
        def stmt(self):
            return self.getTypedRuleContext(CWScriptParser.StmtContext,0)




    def fnBody(self):

        localctx = CWScriptParser.FnBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fnBody)
        self._la = 0 # Token type
        try:
            self.state = 751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CWScriptParser.LBRACE]:
                localctx = CWScriptParser.NormalFnBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.match(CWScriptParser.LBRACE)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.FAIL) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT) | (1 << CWScriptParser.LPAREN) | (1 << CWScriptParser.LBRACK) | (1 << CWScriptParser.EXCLAM) | (1 << CWScriptParser.D_COLON) | (1 << CWScriptParser.PLUS) | (1 << CWScriptParser.MINUS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.StringLiteral - 72)) | (1 << (CWScriptParser.IntegerLiteral - 72)) | (1 << (CWScriptParser.DecimalLiteral - 72)))) != 0):
                    self.state = 742
                    self.stmt()
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 748
                self.match(CWScriptParser.RBRACE)
                pass
            elif token in [CWScriptParser.FAT_ARROW]:
                localctx = CWScriptParser.ArrowFnBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(CWScriptParser.FAT_ARROW)
                self.state = 750
                self.stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FailStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FAIL(self):
            return self.getToken(CWScriptParser.FAIL, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class IfStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifExpr_(self):
            return self.getTypedRuleContext(CWScriptParser.IfExpr_Context,0)



    class EmitStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EMIT(self):
            return self.getToken(CWScriptParser.EMIT, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class ExprStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class AssignStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def EQ(self):
            return self.getToken(CWScriptParser.EQ, 0)
        def PLUS_EQ(self):
            return self.getToken(CWScriptParser.PLUS_EQ, 0)
        def MINUS_EQ(self):
            return self.getToken(CWScriptParser.MINUS_EQ, 0)
        def MUL_EQ(self):
            return self.getToken(CWScriptParser.MUL_EQ, 0)
        def DIV_EQ(self):
            return self.getToken(CWScriptParser.DIV_EQ, 0)
        def MOD_EQ(self):
            return self.getToken(CWScriptParser.MOD_EQ, 0)


    class ExecStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(CWScriptParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class ForStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def forStmt_(self):
            return self.getTypedRuleContext(CWScriptParser.ForStmt_Context,0)



    class ReturnStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(CWScriptParser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class LetStmtContext(StmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.StmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def letStmt_(self):
            return self.getTypedRuleContext(CWScriptParser.LetStmt_Context,0)




    def stmt(self):

        localctx = CWScriptParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.LetStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.letStmt_()
                pass

            elif la_ == 2:
                localctx = CWScriptParser.AssignStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.expr(0)
                self.state = 755
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (CWScriptParser.EQ - 54)) | (1 << (CWScriptParser.PLUS_EQ - 54)) | (1 << (CWScriptParser.MINUS_EQ - 54)) | (1 << (CWScriptParser.MUL_EQ - 54)) | (1 << (CWScriptParser.DIV_EQ - 54)) | (1 << (CWScriptParser.MOD_EQ - 54)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 756
                self.expr(0)
                pass

            elif la_ == 3:
                localctx = CWScriptParser.IfStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 758
                self.ifExpr_()
                pass

            elif la_ == 4:
                localctx = CWScriptParser.ForStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 759
                self.forStmt_()
                pass

            elif la_ == 5:
                localctx = CWScriptParser.ExecStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 760
                self.match(CWScriptParser.EXEC)
                self.state = 761
                self.expr(0)
                pass

            elif la_ == 6:
                localctx = CWScriptParser.EmitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 762
                self.match(CWScriptParser.EMIT)
                self.state = 763
                self.expr(0)
                pass

            elif la_ == 7:
                localctx = CWScriptParser.ReturnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 764
                self.match(CWScriptParser.RETURN)
                self.state = 765
                self.expr(0)
                pass

            elif la_ == 8:
                localctx = CWScriptParser.FailStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 766
                self.match(CWScriptParser.FAIL)
                self.state = 767
                self.expr(0)
                pass

            elif la_ == 9:
                localctx = CWScriptParser.ExprStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 768
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmt_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CWScriptParser.LET, 0)

        def letLHS(self):
            return self.getTypedRuleContext(CWScriptParser.LetLHSContext,0)


        def EQ(self):
            return self.getToken(CWScriptParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_letStmt_




    def letStmt_(self):

        localctx = CWScriptParser.LetStmt_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_letStmt_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(CWScriptParser.LET)
            self.state = 772
            self.letLHS()
            self.state = 773
            self.match(CWScriptParser.EQ)
            self.state = 774
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(CWScriptParser.TypeExprContext,0)


        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def identList(self):
            return self.getTypedRuleContext(CWScriptParser.IdentListContext,0)


        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_letLHS




    def letLHS(self):

        localctx = CWScriptParser.LetLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_letLHS)
        self._la = 0 # Token type
        try:
            self.state = 785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CWScriptParser.CONTRACT, CWScriptParser.INTERFACE, CWScriptParser.IMPORT, CWScriptParser.IMPLEMENTS, CWScriptParser.EXTENDS, CWScriptParser.ERROR, CWScriptParser.EVENT, CWScriptParser.INSTANTIATE, CWScriptParser.EXEC, CWScriptParser.QUERY, CWScriptParser.MIGRATE, CWScriptParser.FOR, CWScriptParser.IN, CWScriptParser.FROM, CWScriptParser.STATE, CWScriptParser.TIMES, CWScriptParser.IF, CWScriptParser.ELSE, CWScriptParser.AND, CWScriptParser.OR, CWScriptParser.TRUE, CWScriptParser.FALSE, CWScriptParser.LET, CWScriptParser.RETURN, CWScriptParser.STRUCT, CWScriptParser.ENUM, CWScriptParser.TYPE, CWScriptParser.EMIT, CWScriptParser.Ident]:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.ident()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CWScriptParser.COLON:
                    self.state = 777
                    self.match(CWScriptParser.COLON)
                    self.state = 778
                    self.typeExpr(0)


                pass
            elif token in [CWScriptParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.match(CWScriptParser.LBRACE)
                self.state = 782
                self.identList()
                self.state = 783
                self.match(CWScriptParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AndExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def AND(self):
            return self.getToken(CWScriptParser.AND, 0)


    class MultDivModExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def MUL(self):
            return self.getToken(CWScriptParser.MUL, 0)
        def DIV(self):
            return self.getToken(CWScriptParser.DIV, 0)
        def MOD(self):
            return self.getToken(CWScriptParser.MOD, 0)


    class QueryExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUERY(self):
            return self.getToken(CWScriptParser.QUERY, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class PosArgsFnCallExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)
        def exprList(self):
            return self.getTypedRuleContext(CWScriptParser.ExprListContext,0)



    class ValExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def val(self):
            return self.getTypedRuleContext(CWScriptParser.ValContext,0)



    class UnaryNotExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCLAM(self):
            return self.getToken(CWScriptParser.EXCLAM, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class CompExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def LT(self):
            return self.getToken(CWScriptParser.LT, 0)
        def GT(self):
            return self.getToken(CWScriptParser.GT, 0)
        def LT_EQ(self):
            return self.getToken(CWScriptParser.LT_EQ, 0)
        def GT_EQ(self):
            return self.getToken(CWScriptParser.GT_EQ, 0)


    class UnarySignExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)

        def PLUS(self):
            return self.getToken(CWScriptParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(CWScriptParser.MINUS, 0)


    class ExpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def POW(self):
            return self.getToken(CWScriptParser.POW, 0)


    class OrExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def OR(self):
            return self.getToken(CWScriptParser.OR, 0)


    class IfExpContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifExpr_(self):
            return self.getTypedRuleContext(CWScriptParser.IfExpr_Context,0)



    class EqExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def EQEQ(self):
            return self.getToken(CWScriptParser.EQEQ, 0)
        def NEQ(self):
            return self.getToken(CWScriptParser.NEQ, 0)


    class NamedArgsFnCallExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)
        def namedExprList(self):
            return self.getTypedRuleContext(CWScriptParser.NamedExprListContext,0)



    class TableLookupExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def LBRACK(self):
            return self.getToken(CWScriptParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(CWScriptParser.RBRACK, 0)


    class MemberAccessExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)

        def DOT(self):
            return self.getToken(CWScriptParser.DOT, 0)
        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)



    class AddSubExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)

        def PLUS(self):
            return self.getToken(CWScriptParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(CWScriptParser.MINUS, 0)


    class GroupedExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CWScriptParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.GroupedExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 788
                self.match(CWScriptParser.LPAREN)
                self.state = 789
                self.expr(0)
                self.state = 790
                self.match(CWScriptParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = CWScriptParser.UnarySignExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 792
                _la = self._input.LA(1)
                if not(_la==CWScriptParser.PLUS or _la==CWScriptParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 793
                self.expr(12)
                pass

            elif la_ == 3:
                localctx = CWScriptParser.UnaryNotExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 794
                self.match(CWScriptParser.EXCLAM)
                self.state = 795
                self.expr(11)
                pass

            elif la_ == 4:
                localctx = CWScriptParser.IfExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 796
                self.ifExpr_()
                pass

            elif la_ == 5:
                localctx = CWScriptParser.QueryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 797
                self.match(CWScriptParser.QUERY)
                self.state = 798
                self.expr(2)
                pass

            elif la_ == 6:
                localctx = CWScriptParser.ValExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 799
                self.val()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 843
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                    if la_ == 1:
                        localctx = CWScriptParser.ExpExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 802
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 803
                        self.match(CWScriptParser.POW)
                        self.state = 804
                        self.expr(11)
                        pass

                    elif la_ == 2:
                        localctx = CWScriptParser.MultDivModExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 805
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 806
                        _la = self._input.LA(1)
                        if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (CWScriptParser.MUL - 61)) | (1 << (CWScriptParser.DIV - 61)) | (1 << (CWScriptParser.MOD - 61)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 807
                        self.expr(10)
                        pass

                    elif la_ == 3:
                        localctx = CWScriptParser.AddSubExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 808
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 809
                        _la = self._input.LA(1)
                        if not(_la==CWScriptParser.PLUS or _la==CWScriptParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 810
                        self.expr(9)
                        pass

                    elif la_ == 4:
                        localctx = CWScriptParser.CompExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 811
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 812
                        _la = self._input.LA(1)
                        if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CWScriptParser.LT - 67)) | (1 << (CWScriptParser.LT_EQ - 67)) | (1 << (CWScriptParser.GT - 67)) | (1 << (CWScriptParser.GT_EQ - 67)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 813
                        self.expr(8)
                        pass

                    elif la_ == 5:
                        localctx = CWScriptParser.EqExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 814
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 815
                        _la = self._input.LA(1)
                        if not(_la==CWScriptParser.EQEQ or _la==CWScriptParser.NEQ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 816
                        self.expr(7)
                        pass

                    elif la_ == 6:
                        localctx = CWScriptParser.AndExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 817
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 818
                        self.match(CWScriptParser.AND)
                        self.state = 819
                        self.expr(6)
                        pass

                    elif la_ == 7:
                        localctx = CWScriptParser.OrExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 820
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 821
                        self.match(CWScriptParser.OR)
                        self.state = 822
                        self.expr(5)
                        pass

                    elif la_ == 8:
                        localctx = CWScriptParser.MemberAccessExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 823
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 824
                        self.match(CWScriptParser.DOT)
                        self.state = 825
                        self.ident()
                        pass

                    elif la_ == 9:
                        localctx = CWScriptParser.TableLookupExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 826
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 827
                        self.match(CWScriptParser.LBRACK)
                        self.state = 828
                        self.expr(0)
                        self.state = 829
                        self.match(CWScriptParser.RBRACK)
                        pass

                    elif la_ == 10:
                        localctx = CWScriptParser.PosArgsFnCallExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 831
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 832
                        self.match(CWScriptParser.LPAREN)
                        self.state = 834
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT) | (1 << CWScriptParser.LPAREN) | (1 << CWScriptParser.LBRACK) | (1 << CWScriptParser.EXCLAM) | (1 << CWScriptParser.D_COLON) | (1 << CWScriptParser.PLUS) | (1 << CWScriptParser.MINUS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (CWScriptParser.Ident - 72)) | (1 << (CWScriptParser.StringLiteral - 72)) | (1 << (CWScriptParser.IntegerLiteral - 72)) | (1 << (CWScriptParser.DecimalLiteral - 72)))) != 0):
                            self.state = 833
                            self.exprList()


                        self.state = 836
                        self.match(CWScriptParser.RPAREN)
                        pass

                    elif la_ == 11:
                        localctx = CWScriptParser.NamedArgsFnCallExprContext(self, CWScriptParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 837
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 838
                        self.match(CWScriptParser.LPAREN)
                        self.state = 840
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or _la==CWScriptParser.Ident:
                            self.state = 839
                            self.namedExprList()


                        self.state = 842
                        self.match(CWScriptParser.RPAREN)
                        pass

             
                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ValContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_val

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TupleStructValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def exprList(self):
            return self.getTypedRuleContext(CWScriptParser.ExprListContext,0)

        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)


    class TrueValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUE(self):
            return self.getToken(CWScriptParser.TRUE, 0)


    class StructValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def structVal_(self):
            return self.getTypedRuleContext(CWScriptParser.StructVal_Context,0)



    class VecValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACK(self):
            return self.getToken(CWScriptParser.LBRACK, 0)
        def exprList(self):
            return self.getTypedRuleContext(CWScriptParser.ExprListContext,0)

        def RBRACK(self):
            return self.getToken(CWScriptParser.RBRACK, 0)


    class FalseValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FALSE(self):
            return self.getToken(CWScriptParser.FALSE, 0)


    class IdentValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)



    class UnitValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(CWScriptParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(CWScriptParser.RPAREN, 0)


    class StringValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteral(self):
            return self.getToken(CWScriptParser.StringLiteral, 0)


    class IntegerValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IntegerLiteral(self):
            return self.getToken(CWScriptParser.IntegerLiteral, 0)


    class DecimalValContext(ValContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ValContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DecimalLiteral(self):
            return self.getToken(CWScriptParser.DecimalLiteral, 0)



    def val(self):

        localctx = CWScriptParser.ValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_val)
        try:
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.UnitValContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.match(CWScriptParser.LPAREN)
                self.state = 849
                self.match(CWScriptParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = CWScriptParser.StructValContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.structVal_()
                pass

            elif la_ == 3:
                localctx = CWScriptParser.TupleStructValContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.match(CWScriptParser.LPAREN)
                self.state = 852
                self.exprList()
                self.state = 853
                self.match(CWScriptParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = CWScriptParser.VecValContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 855
                self.match(CWScriptParser.LBRACK)
                self.state = 856
                self.exprList()
                self.state = 857
                self.match(CWScriptParser.RBRACK)
                pass

            elif la_ == 5:
                localctx = CWScriptParser.StringValContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 859
                self.match(CWScriptParser.StringLiteral)
                pass

            elif la_ == 6:
                localctx = CWScriptParser.IntegerValContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 860
                self.match(CWScriptParser.IntegerLiteral)
                pass

            elif la_ == 7:
                localctx = CWScriptParser.DecimalValContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 861
                self.match(CWScriptParser.DecimalLiteral)
                pass

            elif la_ == 8:
                localctx = CWScriptParser.TrueValContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 862
                self.match(CWScriptParser.TRUE)
                pass

            elif la_ == 9:
                localctx = CWScriptParser.FalseValContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 863
                self.match(CWScriptParser.FALSE)
                pass

            elif la_ == 10:
                localctx = CWScriptParser.IdentValContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 864
                self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructVal_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.structType = None # TypePathContext
            self.members = None # StructValMembersContext

        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def typePath(self):
            return self.getTypedRuleContext(CWScriptParser.TypePathContext,0)


        def structValMembers(self):
            return self.getTypedRuleContext(CWScriptParser.StructValMembersContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_structVal_




    def structVal_(self):

        localctx = CWScriptParser.StructVal_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_structVal_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            localctx.structType = self.typePath()
            self.state = 868
            self.match(CWScriptParser.LBRACE)
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0) or _la==CWScriptParser.Ident:
                self.state = 869
                localctx.members = self.structValMembers()


            self.state = 872
            self.match(CWScriptParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructValMembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structValMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.StructValMemberContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.StructValMemberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_structValMembers




    def structValMembers(self):

        localctx = CWScriptParser.StructValMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_structValMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.structValMember()
            self.state = 879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 875
                    self.match(CWScriptParser.COMMA)
                    self.state = 876
                    self.structValMember() 
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CWScriptParser.COMMA:
                self.state = 882
                self.match(CWScriptParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructValMemberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.value = None # ExprContext

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_structValMember




    def structValMember(self):

        localctx = CWScriptParser.StructValMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_structValMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            localctx.name = self.ident()
            self.state = 886
            self.match(CWScriptParser.COLON)
            self.state = 887
            localctx.value = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpr_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifClause_(self):
            return self.getTypedRuleContext(CWScriptParser.IfClause_Context,0)


        def elseIfClauses(self):
            return self.getTypedRuleContext(CWScriptParser.ElseIfClausesContext,0)


        def elseClause(self):
            return self.getTypedRuleContext(CWScriptParser.ElseClauseContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_ifExpr_




    def ifExpr_(self):

        localctx = CWScriptParser.IfExpr_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ifExpr_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.ifClause_()
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 890
                self.elseIfClauses()


            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 893
                self.elseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfClause_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_ifClause_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfLetClauseContext(IfClause_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.IfClause_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(CWScriptParser.IF, 0)
        def letStmt_(self):
            return self.getTypedRuleContext(CWScriptParser.LetStmt_Context,0)

        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)



    class IfClauseContext(IfClause_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.IfClause_Context
            super().__init__(parser)
            self.predicate = None # ExprContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(CWScriptParser.IF, 0)
        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)




    def ifClause_(self):

        localctx = CWScriptParser.IfClause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ifClause_)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.IfClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.match(CWScriptParser.IF)

                self.state = 897
                localctx.predicate = self.expr(0)
                self.state = 898
                self.fnBody()
                pass

            elif la_ == 2:
                localctx = CWScriptParser.IfLetClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(CWScriptParser.IF)
                self.state = 901
                self.letStmt_()
                self.state = 902
                self.fnBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.ELSE)
            else:
                return self.getToken(CWScriptParser.ELSE, i)

        def ifClause_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.IfClause_Context)
            else:
                return self.getTypedRuleContext(CWScriptParser.IfClause_Context,i)


        def getRuleIndex(self):
            return CWScriptParser.RULE_elseIfClauses




    def elseIfClauses(self):

        localctx = CWScriptParser.ElseIfClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_elseIfClauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 906
                    self.match(CWScriptParser.ELSE)
                    self.state = 907
                    self.ifClause_()

                else:
                    raise NoViableAltException(self)
                self.state = 910 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(CWScriptParser.ELSE, 0)

        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_elseClause




    def elseClause(self):

        localctx = CWScriptParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_elseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(CWScriptParser.ELSE)
            self.state = 913
            self.fnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmt_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CWScriptParser.RULE_forStmt_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInStmtContext(ForStmt_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ForStmt_Context
            super().__init__(parser)
            self.item = None # ForItemContext
            self.iterItems = None # ExprContext
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(CWScriptParser.FOR, 0)
        def IN(self):
            return self.getToken(CWScriptParser.IN, 0)
        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)

        def forItem(self):
            return self.getTypedRuleContext(CWScriptParser.ForItemContext,0)

        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)



    class ForTimesStmtContext(ForStmt_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CWScriptParser.ForStmt_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(CWScriptParser.FOR, 0)
        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)

        def TIMES(self):
            return self.getToken(CWScriptParser.TIMES, 0)
        def fnBody(self):
            return self.getTypedRuleContext(CWScriptParser.FnBodyContext,0)




    def forStmt_(self):

        localctx = CWScriptParser.ForStmt_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forStmt_)
        try:
            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = CWScriptParser.ForInStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.match(CWScriptParser.FOR)
                self.state = 916
                localctx.item = self.forItem()
                self.state = 917
                self.match(CWScriptParser.IN)
                self.state = 918
                localctx.iterItems = self.expr(0)
                self.state = 919
                self.fnBody()
                pass

            elif la_ == 2:
                localctx = CWScriptParser.ForTimesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self.match(CWScriptParser.FOR)
                self.state = 922
                self.expr(0)
                self.state = 923
                self.match(CWScriptParser.TIMES)
                self.state = 924
                self.fnBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def LBRACE(self):
            return self.getToken(CWScriptParser.LBRACE, 0)

        def identList(self):
            return self.getTypedRuleContext(CWScriptParser.IdentListContext,0)


        def RBRACE(self):
            return self.getToken(CWScriptParser.RBRACE, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_forItem




    def forItem(self):

        localctx = CWScriptParser.ForItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forItem)
        try:
            self.state = 933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CWScriptParser.CONTRACT, CWScriptParser.INTERFACE, CWScriptParser.IMPORT, CWScriptParser.IMPLEMENTS, CWScriptParser.EXTENDS, CWScriptParser.ERROR, CWScriptParser.EVENT, CWScriptParser.INSTANTIATE, CWScriptParser.EXEC, CWScriptParser.QUERY, CWScriptParser.MIGRATE, CWScriptParser.FOR, CWScriptParser.IN, CWScriptParser.FROM, CWScriptParser.STATE, CWScriptParser.TIMES, CWScriptParser.IF, CWScriptParser.ELSE, CWScriptParser.AND, CWScriptParser.OR, CWScriptParser.TRUE, CWScriptParser.FALSE, CWScriptParser.LET, CWScriptParser.RETURN, CWScriptParser.STRUCT, CWScriptParser.ENUM, CWScriptParser.TYPE, CWScriptParser.EMIT, CWScriptParser.Ident]:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.ident()
                pass
            elif token in [CWScriptParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.match(CWScriptParser.LBRACE)
                self.state = 930
                self.identList()
                self.state = 931
                self.match(CWScriptParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ident = None # IdentContext
            self.symbols = list() # of IdentContexts

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.IdentContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.IdentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_identList




    def identList(self):

        localctx = CWScriptParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_identList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            localctx._ident = self.ident()
            localctx.symbols.append(localctx._ident)
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 936
                self.match(CWScriptParser.COMMA)

                self.state = 937
                localctx._ident = self.ident()
                localctx.symbols.append(localctx._ident)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_exprList




    def exprList(self):

        localctx = CWScriptParser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.expr(0)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 944
                self.match(CWScriptParser.COMMA)
                self.state = 945
                self.expr(0)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CWScriptParser.NamedExprContext)
            else:
                return self.getTypedRuleContext(CWScriptParser.NamedExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.COMMA)
            else:
                return self.getToken(CWScriptParser.COMMA, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_namedExprList




    def namedExprList(self):

        localctx = CWScriptParser.NamedExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_namedExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.namedExpr()
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CWScriptParser.COMMA:
                self.state = 952
                self.match(CWScriptParser.COMMA)
                self.state = 953
                self.namedExpr()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.value = None # ExprContext

        def COLON(self):
            return self.getToken(CWScriptParser.COLON, 0)

        def ident(self):
            return self.getTypedRuleContext(CWScriptParser.IdentContext,0)


        def expr(self):
            return self.getTypedRuleContext(CWScriptParser.ExprContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_namedExpr




    def namedExpr(self):

        localctx = CWScriptParser.NamedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_namedExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            localctx.name = self.ident()
            self.state = 960
            self.match(CWScriptParser.COLON)
            self.state = 961
            localctx.value = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(CWScriptParser.Ident, 0)

        def reservedKeyword(self):
            return self.getTypedRuleContext(CWScriptParser.ReservedKeywordContext,0)


        def getRuleIndex(self):
            return CWScriptParser.RULE_ident




    def ident(self):

        localctx = CWScriptParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ident)
        try:
            self.state = 965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CWScriptParser.Ident]:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.match(CWScriptParser.Ident)
                pass
            elif token in [CWScriptParser.CONTRACT, CWScriptParser.INTERFACE, CWScriptParser.IMPORT, CWScriptParser.IMPLEMENTS, CWScriptParser.EXTENDS, CWScriptParser.ERROR, CWScriptParser.EVENT, CWScriptParser.INSTANTIATE, CWScriptParser.EXEC, CWScriptParser.QUERY, CWScriptParser.MIGRATE, CWScriptParser.FOR, CWScriptParser.IN, CWScriptParser.FROM, CWScriptParser.STATE, CWScriptParser.TIMES, CWScriptParser.IF, CWScriptParser.ELSE, CWScriptParser.AND, CWScriptParser.OR, CWScriptParser.TRUE, CWScriptParser.FALSE, CWScriptParser.LET, CWScriptParser.RETURN, CWScriptParser.STRUCT, CWScriptParser.ENUM, CWScriptParser.TYPE, CWScriptParser.EMIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.reservedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CwspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CWSPEC_LINE_COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.CWSPEC_LINE_COMMENT)
            else:
                return self.getToken(CWScriptParser.CWSPEC_LINE_COMMENT, i)

        def CWSPEC_BLOCK_COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(CWScriptParser.CWSPEC_BLOCK_COMMENT)
            else:
                return self.getToken(CWScriptParser.CWSPEC_BLOCK_COMMENT, i)

        def getRuleIndex(self):
            return CWScriptParser.RULE_cwspec




    def cwspec(self):

        localctx = CWScriptParser.CwspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_cwspec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 967
                    _la = self._input.LA(1)
                    if not(_la==CWScriptParser.CWSPEC_LINE_COMMENT or _la==CWScriptParser.CWSPEC_BLOCK_COMMENT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 970 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTRACT(self):
            return self.getToken(CWScriptParser.CONTRACT, 0)

        def INTERFACE(self):
            return self.getToken(CWScriptParser.INTERFACE, 0)

        def IMPORT(self):
            return self.getToken(CWScriptParser.IMPORT, 0)

        def IMPLEMENTS(self):
            return self.getToken(CWScriptParser.IMPLEMENTS, 0)

        def EXTENDS(self):
            return self.getToken(CWScriptParser.EXTENDS, 0)

        def ERROR(self):
            return self.getToken(CWScriptParser.ERROR, 0)

        def EVENT(self):
            return self.getToken(CWScriptParser.EVENT, 0)

        def INSTANTIATE(self):
            return self.getToken(CWScriptParser.INSTANTIATE, 0)

        def EXEC(self):
            return self.getToken(CWScriptParser.EXEC, 0)

        def QUERY(self):
            return self.getToken(CWScriptParser.QUERY, 0)

        def MIGRATE(self):
            return self.getToken(CWScriptParser.MIGRATE, 0)

        def FOR(self):
            return self.getToken(CWScriptParser.FOR, 0)

        def IN(self):
            return self.getToken(CWScriptParser.IN, 0)

        def FROM(self):
            return self.getToken(CWScriptParser.FROM, 0)

        def STATE(self):
            return self.getToken(CWScriptParser.STATE, 0)

        def TIMES(self):
            return self.getToken(CWScriptParser.TIMES, 0)

        def IF(self):
            return self.getToken(CWScriptParser.IF, 0)

        def ELSE(self):
            return self.getToken(CWScriptParser.ELSE, 0)

        def AND(self):
            return self.getToken(CWScriptParser.AND, 0)

        def OR(self):
            return self.getToken(CWScriptParser.OR, 0)

        def TRUE(self):
            return self.getToken(CWScriptParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CWScriptParser.FALSE, 0)

        def LET(self):
            return self.getToken(CWScriptParser.LET, 0)

        def RETURN(self):
            return self.getToken(CWScriptParser.RETURN, 0)

        def STRUCT(self):
            return self.getToken(CWScriptParser.STRUCT, 0)

        def ENUM(self):
            return self.getToken(CWScriptParser.ENUM, 0)

        def TYPE(self):
            return self.getToken(CWScriptParser.TYPE, 0)

        def EMIT(self):
            return self.getToken(CWScriptParser.EMIT, 0)

        def getRuleIndex(self):
            return CWScriptParser.RULE_reservedKeyword




    def reservedKeyword(self):

        localctx = CWScriptParser.ReservedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_reservedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CWScriptParser.CONTRACT) | (1 << CWScriptParser.INTERFACE) | (1 << CWScriptParser.IMPORT) | (1 << CWScriptParser.IMPLEMENTS) | (1 << CWScriptParser.EXTENDS) | (1 << CWScriptParser.ERROR) | (1 << CWScriptParser.EVENT) | (1 << CWScriptParser.INSTANTIATE) | (1 << CWScriptParser.EXEC) | (1 << CWScriptParser.QUERY) | (1 << CWScriptParser.MIGRATE) | (1 << CWScriptParser.FOR) | (1 << CWScriptParser.IN) | (1 << CWScriptParser.FROM) | (1 << CWScriptParser.STATE) | (1 << CWScriptParser.TIMES) | (1 << CWScriptParser.IF) | (1 << CWScriptParser.ELSE) | (1 << CWScriptParser.AND) | (1 << CWScriptParser.OR) | (1 << CWScriptParser.TRUE) | (1 << CWScriptParser.FALSE) | (1 << CWScriptParser.LET) | (1 << CWScriptParser.RETURN) | (1 << CWScriptParser.STRUCT) | (1 << CWScriptParser.ENUM) | (1 << CWScriptParser.TYPE) | (1 << CWScriptParser.EMIT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[8] = self.importSymbol_sempred
        self._predicates[50] = self.typeExpr_sempred
        self._predicates[69] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def importSymbol_sempred(self, localctx:ImportSymbolContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def typeExpr_sempred(self, localctx:TypeExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 13)
         





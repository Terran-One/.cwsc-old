import { CwspecContext, IdentContext, LetStmt_Context, IdentLHSContext, StructUnpackLHSContext, InterfaceDefnContext, IdentListContext, SourceFileContext, ContractDefnContext, FailStmtContext, ReturnStmtContext, EmitStmtContext, ExecStmtContext, EnumVariant_structContext, StructMemberContext, EnumVariant_tupleContext, ErrorDefnContext, ContractBodyContext, EventDefnContext, ErrorDefnBlockContext, EventDefnBlockContext, StateItemDefnContext, StateMapDefnContext, MapDefnKeyContext, StateDefnBlockContext, InstantiateDefnContext, FnArgsContext, FnArgContext, NormalFnBodyContext, ArrowFnBodyContext, ExecDefnContext, QueryDefnContext, ExecDefnBlockContext, QueryDefnBlockContext, UnitValContext, FalseValContext, TrueValContext, IntegerValContext, DecimalValContext, StringValContext, TupleValContext, VecValContext, StructValContext, StructValMemberContext, QueryExprContext, OrExprContext, AndExprContext, EqExprContext, CompExprContext, AddSubExprContext, MultDivModExprContext, ExpExprContext, PosArgsFnCallExprContext, NamedArgsFnCallExprContext, NamedExprContext, TableLookupExprContext, MemberAccessExprContext, UnaryExprContext, IfLetClauseContext, IfExpr_Context, IfClauseContext, InstantiateDeclContext, ExecDeclContext, QueryDeclContext, ExecDeclBlockContext, QueryDeclBlockContext, MigrateDeclContext, InterfaceBodyContext, MigrateDefnContext, TypePathContext, ParamzdTypeExprContext, TupleTypeExprContext, ShortOptionTypeExprContext, ShortVecTypeExprContext, RefTypeExprContext, GroupedExprContext, StructDefnContext, ImportAllStmtContext, ImportItemsStmtContext, ImportItemContext, AssignStmt_Context, IdentAssignLHSContext, MemberAssignLHSContext, StateMapAssignLHSContext, StateItemAssignLHSContext, TableAssignLHSContext, StateItemAccessExprContext, StateMapAccessExprContext, InnerPathContext, FnDefnContext, ForInStmtContext, ExecuteNowStmtContext, MsgContext, ExprListContext } from '../grammar/CWScriptParser';
import { CWScriptParserVisitor } from '../grammar/CWScriptParserVisitor';
import { AbstractParseTreeVisitor } from 'antlr4ts/tree/AbstractParseTreeVisitor';
import { AST, ExecuteNowStmt, ExprList, ForInStmt, List, Msg } from './nodes';
import { Expr, SourceFile, Stmt, ImportAllStmt, ImportItem, ImportItemsStmt, TypePath, ParamzdTypeExpr, TupleTypeExpr, ShortOptionTypeExpr, ShortVecTypeExpr, RefTypeExpr, Ident, CWSpec, InterfaceItem, ContractItem, InterfaceDefn, ContractDefn, StructMember, StructDefn, TupleStructDefn, EnumVariantStruct, EnumVariantTuple, ErrorDefn, EventDefn, ItemDefn, MapDefn, StateDefn, MapDefnKey, FnDefn, ExecDefn, InstantiateDefn, QueryDefn, MigrateDefn, InstantiateDecl, ExecDecl, QueryDecl, MigrateDecl, UnitVal, BoolVal, IntegerVal, DecimalVal, StringVal, TupleVal, VecVal, StructVal, StructValMember, QueryExpr, OrExpr, AndExpr, CompOpExpr, ArithmeticOpExpr, ExpExpr, UnaryExpr, PosArgsFnCallExpr, NamedArgsFnCallExpr, NamedExpr, StateItemAccessExpr, StateMapAccessExpr, TableLookupExpr, MemberAccessExpr, Ext, IfExpr, IfClause, IfLetClause, LetStmt, ExecStmt, ReturnStmt, EmitStmt, FailStmt, AssignStmt, InnerPath, StateItemAssignLHS, StateMapAssignLHS, IdentAssignLHS, MemberAssignLHS, TableAssignLHS, IdentLHS, StructUnpackLHS, FnArg } from './nodes';
export declare class CWScriptASTVisitor extends AbstractParseTreeVisitor<AST> implements CWScriptParserVisitor<AST> {
    protected defaultResult(): AST;
    visitSourceFile(ctx: SourceFileContext): SourceFile;
    visitImportAllStmt(ctx: ImportAllStmtContext): ImportAllStmt;
    visitImportItem(ctx: ImportItemContext): ImportItem;
    visitImportItemsStmt(ctx: ImportItemsStmtContext): ImportItemsStmt;
    visitTypePath(ctx: TypePathContext): TypePath;
    visitParamzdTypeExpr(ctx: ParamzdTypeExprContext): ParamzdTypeExpr;
    visitTupleTypeExpr(ctx: TupleTypeExprContext): TupleTypeExpr;
    visitShortOptionTypeExpr(ctx: ShortOptionTypeExprContext): ShortOptionTypeExpr;
    visitShortVecTypeExpr(ctx: ShortVecTypeExprContext): ShortVecTypeExpr;
    visitRefTypeExpr(ctx: RefTypeExprContext): RefTypeExpr;
    visitIdent(ctx: IdentContext): Ident;
    visitIdentList(ctx: IdentListContext): List<Ident>;
    visitCwspec(ctx: CwspecContext): CWSpec;
    visitInterfaceBody(ctx: InterfaceBodyContext): List<InterfaceItem>;
    visitInterfaceDefn(ctx: InterfaceDefnContext): InterfaceDefn;
    visitContractBody(ctx: ContractBodyContext): List<ContractItem>;
    visitContractDefn(ctx: ContractDefnContext): ContractDefn;
    visitStructMember(ctx: StructMemberContext): StructMember;
    visitStructDefn(ctx: StructDefnContext): StructDefn | TupleStructDefn;
    visitEnumVariant_struct(ctx: EnumVariant_structContext): EnumVariantStruct;
    visitEnumVariant_tuple(ctx: EnumVariant_tupleContext): EnumVariantTuple;
    visitErrorDefn(ctx: ErrorDefnContext): ErrorDefn;
    visitEventDefn(ctx: EventDefnContext): EventDefn;
    visitErrorDefnBlock(ctx: ErrorDefnBlockContext): List<ErrorDefn>;
    visitEventDefnBlock(ctx: EventDefnBlockContext): List<EventDefn>;
    visitStateItemDefn(ctx: StateItemDefnContext): ItemDefn;
    visitStateMapDefn(ctx: StateMapDefnContext): MapDefn;
    visitStateDefnBlock(ctx: StateDefnBlockContext): List<StateDefn>;
    visitMapDefnKey(ctx: MapDefnKeyContext): MapDefnKey;
    visitFnArgs(ctx: FnArgsContext): List<FnArg>;
    visitFnArg(ctx: FnArgContext): FnArg;
    visitNormalFnBody(ctx: NormalFnBodyContext): List<Stmt>;
    visitArrowFnBody(ctx: ArrowFnBodyContext): List<Stmt>;
    visitFnDefn(ctx: FnDefnContext): FnDefn;
    visitInstantiateDefn(ctx: InstantiateDefnContext): InstantiateDefn;
    visitExecDefn(ctx: ExecDefnContext): ExecDefn;
    visitExecDefnBlock(ctx: ExecDefnBlockContext): List<ExecDefn>;
    visitQueryDefn(ctx: QueryDefnContext): QueryDefn;
    visitMigrateDefn(ctx: MigrateDefnContext): MigrateDefn;
    visitQueryDefnBlock(ctx: QueryDefnBlockContext): List<QueryDefn>;
    visitInstantiateDecl(ctx: InstantiateDeclContext): InstantiateDecl;
    visitExecDecl(ctx: ExecDeclContext): ExecDecl;
    visitExecDeclBlock(ctx: ExecDeclBlockContext): List<ExecDecl>;
    visitQueryDecl(ctx: QueryDeclContext): QueryDecl;
    visitQueryDeclBlock(ctx: QueryDeclBlockContext): List<QueryDecl>;
    visitMigrateDecl(ctx: MigrateDeclContext): MigrateDecl;
    visitUnitVal(ctx: UnitValContext): UnitVal;
    visitTrueVal(ctx: TrueValContext): BoolVal;
    visitFalseVal(ctx: FalseValContext): BoolVal;
    visitIntegerVal(ctx: IntegerValContext): IntegerVal;
    visitDecimalVal(ctx: DecimalValContext): DecimalVal;
    visitStringVal(ctx: StringValContext): StringVal;
    visitTupleVal(ctx: TupleValContext): TupleVal;
    visitVecVal(ctx: VecValContext): VecVal;
    visitStructVal(ctx: StructValContext): StructVal;
    visitStructValMember(ctx: StructValMemberContext): StructValMember;
    visitQueryExpr(ctx: QueryExprContext): QueryExpr;
    visitOrExpr(ctx: OrExprContext): OrExpr;
    visitAndExpr(ctx: AndExprContext): AndExpr;
    visitEqExpr(ctx: EqExprContext): CompOpExpr;
    visitCompExpr(ctx: CompExprContext): CompOpExpr;
    visitAddSubExpr(ctx: AddSubExprContext): ArithmeticOpExpr;
    visitMultDivModExpr(ctx: MultDivModExprContext): ArithmeticOpExpr;
    visitExprExpr(ctx: ExpExprContext): ExpExpr;
    visitUnaryExpr(ctx: UnaryExprContext): UnaryExpr;
    visitPosArgsFnCallExpr(ctx: PosArgsFnCallExprContext): PosArgsFnCallExpr;
    visitNamedArgsFnCallExpr(ctx: NamedArgsFnCallExprContext): NamedArgsFnCallExpr;
    visitNamedExpr(ctx: NamedExprContext): NamedExpr;
    visitGroupedExpr(ctx: GroupedExprContext): Expr;
    visitStateItemAccessExpr(ctx: StateItemAccessExprContext): StateItemAccessExpr;
    visitStateMapAccessExpr(ctx: StateMapAccessExprContext): StateMapAccessExpr;
    visitTableLookupExpr(ctx: TableLookupExprContext): TableLookupExpr;
    visitMemberAccessExpr(ctx: MemberAccessExprContext): MemberAccessExpr | Ext.State | Ext.SpecialVariable;
    visitIfExpr_(ctx: IfExpr_Context): IfExpr;
    visitIfClause(ctx: IfClauseContext): IfClause;
    visitIfLetClause(ctx: IfLetClauseContext): IfLetClause;
    visitExecStmt(ctx: ExecStmtContext): ExecStmt;
    visitExecuteNowStmt(ctx: ExecuteNowStmtContext): ExecuteNowStmt;
    visitMsg(ctx: MsgContext): Msg;
    visitExprList(ctx: ExprListContext): ExprList;
    visitReturnStmt(ctx: ReturnStmtContext): ReturnStmt;
    visitEmitStmt(ctx: EmitStmtContext): EmitStmt;
    visitFailStmt(ctx: FailStmtContext): FailStmt;
    visitAssignStmt_(ctx: AssignStmt_Context): AssignStmt;
    visitInnerPath(ctx: InnerPathContext): InnerPath;
    visitStateItemAssignLHS(ctx: StateItemAssignLHSContext): StateItemAssignLHS;
    visitStateMapAssignLHS(ctx: StateMapAssignLHSContext): StateMapAssignLHS;
    visitIdentAssignLHS(ctx: IdentAssignLHSContext): IdentAssignLHS;
    visitMemberAssignLHS(ctx: MemberAssignLHSContext): MemberAssignLHS;
    visitTableAssignLHS(ctx: TableAssignLHSContext): TableAssignLHS;
    visitForInStmt(ctx: ForInStmtContext): ForInStmt;
    visitLetStmt_(ctx: LetStmt_Context): LetStmt;
    visitIdentLHS(ctx: IdentLHSContext): IdentLHS;
    visitStructUnpackLHS(ctx: StructUnpackLHSContext): StructUnpackLHS;
}

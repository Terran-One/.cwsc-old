contract CW20Base {    

    error InvalidZeroAmount()
    error Unauthorized()

    event Transfer(sender: Addr, recipient: Addr, amount: u64)
    event Burn(sender: Addr, amount: u64)
    event Mint(minter: Addr, recipient: Addr, amount: u64)
    event Send(sender: Addr, contract: Addr, amount: u64)

    struct TokenInfo {
        name: String,
        symbol: String,
        decimals: u8,
        total_supply: u64,
    }

    state {
        token_info: TokenInfo,
        balances[Addr]: u64
    }
    
    instantiate(
        name: String,
        symbol: String,
        decimals: u8,
        initial_balances: struct Cw20Coin { address: Addr, amount: u64 }[],
        mint?: String
    ) {
        let total_supply = 0
        // for { address, amount } in initial_balances {
        //     state.balances[address] += amount
        //     total_supply += amount
        // }

        state.token_info = TokenInfo {
            name: name,
            symbol: symbol,
            decimals: decimals,
            total_supply: total_supply,
        }
    }

//     exec transfer(recipient: Addr, amount: Uint128) {
//         state.balances[msg.sender] -= amount
//         state.balances[recipient] += amount
//         emit Transfer(msg.sender, recipient, amount)
//     }

//     exec burn(amount: Uint128) {
//         state.balances[msg.sender] -= amount
//         state.token_info.total_supply -= amount
//         emit Burn(msg.sender, amount)
//     }

//    exec send_test_1(contract_addr: Addr, amount: Uint128, msg: Binary?) {
//         state.balances[msg.sender] -= amount
//         state.balances[contract_addr] += amount
//         emit Send(msg.sender, contract_addr, amount) 
//     }

//     exec send_test_2(contract_addr: Addr, amount: Uint128, msg: Binary) {
//         state.balances[msg.sender] -= amount
//         state.balances[contract_addr] += amount
//         emit Send(msg.sender, contract_addr, amount) 
//     }

//     exec send_test_3(contract_addr: Addr, amount: Uint128, msg: Binary) {
//         state.balances[msg.sender] -= amount
//         state.balances[contract_addr] += amount
//         emit Send(msg.sender, contract_addr, amount) 
//     }

//     exec mint(recipient: Addr, amount: Uint128) {
//         state.balances[recipient] += amount
//         state.token_info.total_supply += amount
//         emit Mint(recipient, amount)
//     }

//     query balance(address: Addr) -> struct BalanceResponse { balance: Uint128 } {
//         // return _ {
//         //     balance: state.balances[address] or 0
//         // }
//     }

    query token_info() -> struct TokenInfoResponse { token_info: TokenInfo } {
        return TokenInfoResponse {
            token_info: state.token_info
        }
    }

}
